from django.shortcuts import render,redirect
from django.http import HttpResponse,JsonResponse,HttpResponseRedirect
from django.contrib.auth.forms import UserCreationForm, AuthenticationForm
from django.contrib.auth import login, logout, authenticate
from django.contrib import messages
from django.contrib.auth.decorators import login_required
from django.contrib.auth.models import User
from django.core.exceptions import ValidationError
from datetime import date,timedelta,time
import time
import re
import datetime,calendar
from calendar import monthrange
from array import array
from django.contrib.sessions.models import Session
from rest_framework.views import APIView
from rest_framework.response import Response
from django.views.generic import View
from dlw.models import *
from dlw.serializers import testSerializer
import re,uuid,copy
from copy import deepcopy
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth.views import password_reset,password_reset_done
from django.contrib.auth import update_session_auth_hash
from django.contrib.auth.forms import PasswordChangeForm
from dlw.forms import UserRegisterForm
from django.contrib import auth
from authy.api import AuthyApiClient
from django.conf import settings
from django.contrib.auth.decorators import user_passes_test
from dlw.decorators import role_required
from django.db.models import Max
from django.http import HttpResponseRedirect
import math,random
from random import randint
import datetime
import smtplib 
import pandas
import requests
from .rp import *

import pandas as pd

from django.db.models import Q
from .utils import render_to_pdf 
from django.db.models.functions import Substr
from django.db.models import Subquery,Sum,Count
from .utils import render_to_pdf
from django.db.models import Sum,Subquery
from django.utils import formats
from django.utils.dateformat import DateFormat
from decimal import *


def GeneratePdf(request, *args, **kwargs):
    m13_no = request.GET.get('m13_no')
    m13_date = request.GET.get('m13_date')
    char_wo = request.GET.get('char_wo')
    sl_no = request.GET.get('sl_no')
    batch_no = request.GET.get('batch_no')
    epc = request.GET.get('epc')
    brn_no = request.GET.get('brn_no')
    loco_from = request.GET.get('loco_from')
    loco_to = request.GET.get('loco_to')
    assly_no = request.GET.get('assly_no')
    assly_desc = request.GET.get('assly_desc')
    part_no = request.GET.get('part_no')
    part_desc = request.GET.get('part_desc')
    quantity = request.GET.get('quantity')
    unit = request.GET.get('unit')
    pm_no = request.GET.get('pm_no')
    m14_no = request.GET.get('m14_no')
    rforhw = request.GET.get('rforhw')
    m14_date=datetime.datetime.now().strftime ("%d-%m-%Y")
    data = {
        'm14_date':m14_date,
        'rforhw':rforhw,
        'm14_no':m14_no,
        'pm_no':pm_no,
        'unit':unit,
        'quantity':quantity,
        'part_desc':part_desc,
        'part_no':part_no,
        'assly_desc':assly_desc,
        'assly_no':assly_no,
        'loco_to':loco_to,
        'loco_from':loco_from,
        'brn_no':brn_no,
        'epc':epc,
        'batch_no':batch_no,
        'sl_no':sl_no,
        'char_wo':char_wo,
        'm13_date':m13_date,
        'm13_no':m13_no,    
        }
    if str(m13_no)==str(0):
        pdf = render_to_pdf('m14genpdf2.html', data)
    else:
        pdf = render_to_pdf('m14genpdf1.html', data)
    return HttpResponse(pdf, content_type='application/pdf')



def viewsPermission(request):
    rolelist = roles.objects.all().values('role').order_by('role').distinct('role')
    urlfirst = navbar.objects.all().values('link').distinct('link')
    first = []
    for i in range(len(urlfirst)):
        if urlfirst[i]['link']!='#':
            first.append(urlfirst[i]['link'])
    urlsecond = subnavbar.objects.all().values('link').distinct('link')
    second = []
    for i in range(len(urlsecond)):
        if urlsecond[i]['link']!='#':
            second.append(urlsecond[i]['link'])
    urlprefinal = first + second
    urlmade1 = viewUrlPermission.objects.all().values('urlname').distinct('urlname')
    urlmade = []
    for i in range(len(urlmade1)):
        urlmade.append(urlmade1[i]['urlname'])
    urlnotmade = []
    for i in range(len(urlprefinal)):
        if urlprefinal[i] not in urlmade and urlprefinal[i]!='/password_reset_inside/':
            urlnotmade.append(urlprefinal[i])
    parentmenu = navbar.objects.all().values('navitem').distinct('navitem')
    parent = []
    for i in range(len(parentmenu)):
        if parentmenu[i]['navitem']!='Under Production' and parentmenu[i]['navitem']!='Not Authorized':
            parent.append(parentmenu[i]['navitem'])
    if request.method=="POST":
        inputurl = request.POST.get('inpurl')
        rolesassign = request.POST.getlist('rolesassign')
        navbarparent = request.POST.get('navbarparent')
        rolesassignlist= ", ".join(rolesassign)
        if inputurl and rolesassign and navbarparent:
            viewUrlPermission.objects.create(navitem=navbarparent,urlname=inputurl,rolespermission=rolesassignlist)
            messages.success(request,'Successful')
            return redirect('viewsPermission')
        else:
            messages.error(request,'error')
            return redirect('viewsPermission')
    context = {
        'ip':get_client_ip(request),
        'rolelist':rolelist,
        'urlnotmade' : urlnotmade,
        'parentmenu':parent,
    }
    return render(request,'viewsPermission.html',context)





def viewsPermissiondelete(request):
    urlmade = viewUrlPermission.objects.all().values('urlname').distinct('urlname')
    if request.method=="POST":
        inputurl = request.POST.get('inpurl')
        if inputurl:
            viewUrlPermission.objects.filter(urlname=inputurl).delete()
            messages.success(request,'Successful')
            return redirect('viewsPermissiondelete')
        else:
            messages.error(request,'error')
            return redirect('viewsPermissiondelete')
    context = {
        'ip':get_client_ip(request),
        'urlmade' : urlmade,
    }
    return render(request,'viewsPermissiondel.html',context)





def viewsPermissionUpdate(request):
    rolelist = roles.objects.all().values('role').order_by('role').distinct('role')
    urlmade = viewUrlPermission.objects.all().values('urlname').distinct('urlname')
    parentmenu = navbar.objects.all().values('navitem').distinct('navitem')
    parent = []
    for i in range(len(parentmenu)):
        if parentmenu[i]['navitem']!='Under Production' and parentmenu[i]['navitem']!='Not Authorized':
            parent.append(parentmenu[i]['navitem'])
    if request.method=="POST":
        inputurl = request.POST.get('inpurl')
        rolesassign = request.POST.getlist('rolesassign')
        navbarparent = request.POST.get('navbarparent')
        rolesassignlist= ", ".join(rolesassign)
        if inputurl and rolesassign and navbarparent:
            toupdate = viewUrlPermission.objects.filter(urlname=inputurl).first()
            toupdate.rolespermission = rolesassignlist
            toupdate.navitem = navbarparent
            toupdate.save()
            messages.success(request,'Successful')
            return redirect('viewsPermissionUpdate')
        else:
            messages.error(request,'error')
            return redirect('viewsPermissionUpdate')
    context = {
        'ip':get_client_ip(request),
        'rolelist':rolelist,
        'urlmade' : urlmade,
        'parentmenu':parent,
    }
    return render(request,'viewsPermissionUpdate.html',context)





def login_request(request):
    if request.method=='POST':
        u_id = request.POST.get('user_id')
        pwd=request.POST.get('password')
        user = authenticate(username=u_id, password=pwd)
        if user is not None:
            login(request, user)
            currentuser=empmast.objects.filter(empno=user).first()
            rolelist=currentuser.role.split(", ")
            if "Superuser" in rolelist:
                return redirect('homeadmin')
            else:
                return redirect('homeuser')
        else:
            messages.error(request,"Invalid username or password")
    form = AuthenticationForm()
    return render(request, 'login.html', {"form": form})







def get_client_ip(request):
    x_forwarded_for = request.META.get('HTTP_X_FORWARDED_FOR')
    if x_forwarded_for:
        ip = x_forwarded_for.split(',')[0]
    else:
        ip = request.META.get('REMOTE_ADDR')
    return ip








@login_required
def logout_request(request):
    if request.method=='POST':
        logout(request)
        data={}
        return JsonResponse(data)
    return HttpResponseRedirect('login')



@login_required
@role_required(urlpass='/homeadmin/')
def homeadmin(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist).order_by('childmenu')
    context={
        'nav':nav,
        'subnav':subnav,
        'usermaster':usermaster,
        'ip':get_client_ip(request),
    }
    return render(request,'homeadmin.html',context)




@login_required
@role_required(urlpass='/homeuser/')
def homeuser(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    context={
        'nav':nav,
        'usermaster':usermaster,
        'ip':get_client_ip(request),
        'subnav':subnav
    }
    return render(request,'homeuser.html',context)










@login_required
def dynamicnavbar(request,rolelist=[]):
    if("Superuser" in rolelist):
        nav=navbar.objects.filter(role="Superuser")
        return nav
    else:
        nav=navbar.objects.filter(role__in=rolelist).distinct('navmenu','navitem')
        return nav

@login_required
@role_required(urlpass='/createuser/')
def create(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    emp=empmast.objects.filter(role__isnull=True,dept_desc='MECHANICAL') | empmast.objects.filter(role__isnull=True,dept_desc='CRIS_MU')
    availableroles=roles.objects.all().values('parent').distinct()
    if request.method == "POST":
        emp_id=request.POST.get('emp_id')
        email=request.POST.get('email')
        role=request.POST.get('role')
        sublevelrole=request.POST.getlist('sublevel')
        sublevelrolelist= ", ".join(sublevelrole)
        password="dlw@123"
        if "Superuser" in sublevelrole and emp_id and role and sublevelrole:
            employee=empmast.objects.filter(empno=emp_id).first()
            employee.role=sublevelrolelist
            employee.parent=role
            newuser = User.objects.create_user(username=emp_id, password=password,email=email)
            employee.save()
            newuser.is_staff= True
            newuser.is_superuser=True
            newuser.save()
            messages.success(request, 'Successfully Created!')
            return redirect('create')
        elif "Superuser" not in sublevelrole and emp_id and role and sublevelrole:
            employee=empmast.objects.filter(empno=emp_id).first()
            employee.role=sublevelrolelist
            employee.parent=role
            newuser = User.objects.create_user(username=emp_id, password=password,email=email)
            employee.save()
            newuser.is_staff= True
            newuser.is_superuser=False
            newuser.save()
            messages.success(request, 'Successfully Created!')
            return redirect('create')
        else:
            messages.error(request, 'Error, Try Again!')
    context={
        'nav':nav,
        'usermaster':usermaster,
        'emp':emp,
        'ip':get_client_ip(request),
        'roles':availableroles,
        'subnav':subnav,
    }

    return render(request,'createuser.html',context)





    




@login_required
@role_required(urlpass='/update_permission/')
def update_permission(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    users=User.objects.all()
    availableroles=roles.objects.all().values('parent').distinct() 
    if request.method == "POST":
        updateuser=request.POST.get('emp_id')
        sublevelrole=request.POST.getlist('sublevel')
        role=request.POST.get('role')
        sublevelrolelist= ", ".join(sublevelrole)
        if updateuser and sublevelrole:
            usermasterupdate=empmast.objects.filter(empno=updateuser).first()
            usermasterupdate.role=sublevelrolelist
            usermasterupdate.parent=role
            usermasterupdate.save()
            messages.success(request, 'Successfully Updated!')
            return redirect('update_permission')
        else:
            messages.error(request,"Error!")
            return redirect('update_permission')

    context={
        'users':users,
        'nav':nav,
        'usermaster':usermaster,
        'ip':get_client_ip(request),
        'roles':availableroles,
        'subnav':subnav,
    }
    return render(request,'update_permission.html',context)



@login_required
def update_permission_incharge(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    parentrole=roles.objects.all().filter(role__in=rolelist).first()
    available=roles.objects.all().filter(parent=parentrole.parent).values('role').exclude(role__in=rolelist)
    users=empmast.objects.all().filter(parent=parentrole.parent).values('empno').exclude(role__in=rolelist)
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    if request.method == "POST":
        updateuser=request.POST.get('emp_id')
        sublevelrole=request.POST.getlist('sublevel')
        sublevelrolelist= ", ".join(sublevelrole)
        if updateuser and sublevelrole:
            usermasterupdate=empmast.objects.filter(empno=updateuser).first()
            usermasterupdate.role=sublevelrolelist
            usermasterupdate.save()
            messages.success(request, 'Successfully Updated!')
            return redirect('update_permission_incharge')
        else:
            messages.error(request,"Error!")
            return redirect('update_permission_incharge')

    context={
        'users':users,
        'nav':nav,
        'usermaster':usermaster,
        'ip':get_client_ip(request),
        'roles':available,
        'subnav':subnav,
    }
    return render(request,'update_permission_incharge.html',context)



@login_required
def update_emp_shift(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    parentrole=roles.objects.all().filter(role__in=rolelist).first()
    users=empmast.objects.all().filter(parent=parentrole.parent).exclude(role__in=rolelist)
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    now=datetime.datetime.now() + datetime.timedelta(days=7)
    stringdate=str(now.date())
    movetohistory=shift.objects.all().filter(validity_from__lt=date.today())
    movecount=movetohistory.count()
    yesterday=datetime.datetime.now() - datetime.timedelta(days=1)
    for i in range(movecount):
        shiftcount=shift.objects.get(emp_id=movetohistory[i].emp_id).count()
        if shiftcount>1:
            newhistory=shift_history.objects.create()
            newhistory.emp_id=movetohistory[i].emp_id
            newhistory.shift_id=movetohistory[i].shift_id
            newhistory.validity_from=movetohistory[i].validity_from
            newhistory.validity_to=yesterday
            newhistory.save()
            movetohistory[i].delete()
    context={
        'users':users,
        'nav':nav,
        'subnav':subnav,
        'ip':get_client_ip(request),
        'future':stringdate,
    }
    return render(request,'update_emp_shift.html',context)






def shiftsave(request):
    if request.method=="GET" and request.is_ajax():
        shiftemp=request.GET.get('shift')
        emp_id=request.GET.get('emp')
        datetosave=request.GET.get('seldate')
        datetosaveformatdate = datetime.datetime.strptime(datetosave, "%Y-%m-%d") 
        if datetosaveformatdate.date() == date.today():
            if emp_id and shiftemp and datetosave:
                updateuser=shift.objects.filter(emp_id=emp_id).count()
                if updateuser==0:
                    update=shift.objects.create()
                    update.emp_id=emp_id
                    update.shift_id=shiftemp
                    update.validity_from=datetosave
                    update.save()
                else:
                    up=shift.objects.filter(emp_id=emp_id).update(shift_id=shiftemp,validity_from=datetosave)
        elif datetosaveformatdate.date() < date.today():
            if emp_id and shiftemp and datetosave:
                updateuser=shift.objects.filter(emp_id=emp_id).count()
                

    data={}
    return JsonResponse(data)






@login_required
def update_emp_shift_admin(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    parentshops=roles.objects.all().distinct().values('parent').exclude(parent='Superuser')
    if request.method=="POST":
        emp_shiftupdate=request.POST.get('emp_id')
        shift=request.POST.get('shift')
        if emp_shiftupdate and shift:
            updateuser=empmast.objects.get(empno=emp_shiftupdate)
            if updateuser.shift_id is None:
                updateuser.shift_id=shift
                updateuser.validity_from=date.today()
                updateuser.save()
                messages.success(request, 'Successfully Updated!')
                return redirect('update_emp_shift_admin')
            else:
                newhistory=shift_history.objects.create()
                newhistory.emp_id=updateuser.emp_id
                newhistory.shift_id=updateuser.shift_id
                newhistory.validity_from=updateuser.validity_from
                newhistory.validity_to=date.today()
                newhistory.save()
                updateuser.shift_id=shift
                updateuser.validity_from=date.today()
                updateuser.save()
                messages.success(request, 'Successfully Updated!')
                return redirect('update_emp_shift_admin')
        else:
            messages.error(request,"Error!")
            return redirect('update_emp_shift_admin')
    context={
        'nav':nav,
        'subnav':subnav,
        'ip':get_client_ip(request),
        'parentshops':parentshops,
    }
    return render(request,'update_emp_shift_admin.html',context)

def getEmpInfo(request):
    if request.method == "GET" and request.is_ajax():
        emp_id=request.GET.get('username')
        try:
            emp=empmast.objects.filter(empno=emp_id).first()
            if(emp.parentshop is None):
                uniqparent = list(roles.objects.all().values('parent').distinct())
            else:
                uniqparent = list(roles.objects.all().values('parent').filter(parent = emp.parentshop).distinct())
        except:
            return JsonResponse({"success":False}, status=400)
        emp_info={
            "name":emp.empname,
            "designation":emp.desig_longdesc,
            "department":emp.dept_desc,
            "email":emp.email,
            "contactno":emp.contactno,
            "uniqparent" : uniqparent
        }
        return JsonResponse({"emp_info":emp_info}, status=200)

    return JsonResponse({"success":False}, status=400)

def getauthempInfo(request):
    if request.method == "GET" and request.is_ajax():
        emp_id=request.GET.get('username')
        emp=User.objects.filter(username=emp_id).first()
        if emp:
            usermaster=empmast.objects.filter(empno=emp).first()
            auth_info={
                "name":usermaster.empname,
                "designation":usermaster.desig_longdesc,
                "department":usermaster.dept_desc,
                "contactno":usermaster.contactno
            }
            return JsonResponse({"auth_info":auth_info}, status=200)
        else:
            auth_info={
                "name":"No User Found",
                "designation":"",
                "department":"",
                "contactno":""
            }
            return JsonResponse({"auth_info":auth_info}, status=200)
    return JsonResponse({"success":False}, status=400)

def getPermissionInfo(request):
    if request.method == "GET" and request.is_ajax():
        selectrole=request.GET.get('username')
        subshop=roles.objects.filter(parent=selectrole).values('role')
        sub=list(subshop.values('role'))
        permission_info={
            "sub":sub,
        }
        return JsonResponse({"permission_info":permission_info}, status=200)
    return JsonResponse({"success":False}, status=400)

def getshopempinfo(request):
    if request.method == "GET" and request.is_ajax():
        shop=request.GET.get('username')
        usermaster=empmast.objects.filter(parent=shop).values('empno')
        neededusers=list(usermaster.values('empno'))
        shopemp_info={
            "neededusers":neededusers,
            }
        return JsonResponse({"shopemp_info":shopemp_info}, status=200)
    return JsonResponse({"success":False}, status=400)

@login_required
@role_required(urlpass='/delete_user/')
def delete_user(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    users=User.objects.all()
    if not users:
        messages.success(request, 'No User Exist!')
    elif request.method == "POST":
        deleteuser=request.POST.get('emp_id')
        delete=User.objects.filter(username=deleteuser).first()
        if not delete:
            messages.error(request,"Error, No user selected!")
            return redirect('delete_user')
        usermasterupdate=empmast.objects.filter(empno=delete.username).first()
        usermasterupdate.role=None
        usermasterupdate.parent=None
        delete.delete()
        usermasterupdate.save()
        messages.success(request, 'Successfully Deleted!')
        return redirect('delete_user')
    context={
        'users':users,
        'nav':nav,
        'usermaster':usermaster,
        'ip':get_client_ip(request),
        'subnav':subnav,
    }
    return render(request,'delete_user.html',context)


@login_required
@role_required(urlpass='/forget_password/')
def forget_password(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    if request.method == "POST":
        emp=request.POST.get('emp_id')
        forgetuser=User.objects.filter(username=emp).first()
        password=request.POST.get('password')
        conpassword=request.POST.get('conpassword')
        if forgetuser and password==conpassword:
            forgetuser.set_password(password)
            forgetuser.save()
            messages.info(request, 'Successfully Changed Password!')
            return redirect('forget_password')
        else:
            messages.info(request, 'Error, Try Again!')
            return redirect('forget_password')
    context={
        'nav':nav,
        'usermaster':usermaster,
        'ip':get_client_ip(request),
        'subnav':subnav,
    }
    return render(request,'forget_password.html',context)

def forget_path(request):
    if request.method == "POST":
        option=request.POST.get('forget')
        if option=="Email":
            return redirect('password_reset')
        else:
            return redirect('forget_password_path')
    return render(request,'forget_password_path.html',{})



class ChartData(APIView):
    authentication_classes = []
    permission_classes = []
    def get(self,request):
        obj= testc.objects.all()
        serializer=testSerializer(obj,many=True)
        return Response(serializer.data)


@login_required
@role_required(urlpass='/m2view/')
def m2view(request):
    context={}
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    if "Superuser" in rolelist:
        tm2=list(Batch.objects.filter(status='R').values('bo_no').distinct())
        tmp2=[]
        for on in tm2:
            tmp2.append(on['bo_no'])   
                   
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'work_no':tmp2
        }  
        if request.method == "POST":
            submitvalue = request.POST.get('proceed')
            if submitvalue=='Save':
                
                leng=request.POST.get('hidtxt')
                work=request.POST.get('work')
                shopsec= request.POST.get('shop_no1')
                partno= request.POST.get('part_no1')
                obj=m2_transaction11.objects.filter(work_order=work,shop_sec=shopsec, part_no=partno).distinct()
                if len(obj)==0:
                    for i in range(1, int(leng)+1):
                        qtypr=request.POST.get('qty_p'+str(i))
                        qtyac = request.POST.get('qty_acc'+str(i))
                        wrrej = request.POST.get('w_rej'+str(i))
                        matrej =request.POST.get('m_rej'+str(i))
                        opn=request.POST.get('onumber'+str(i))
                        ins=request.POST.get('inspect'+str(i))
                        m2_transaction11.objects.create(work_order=str(work),shop_sec=str(shopsec),part_no=str(partno),opn_no=str(opn),qty_prod=str(qtypr), qty_accep=str(qtyac), work_rej=str(wrrej), mat_rej=str(matrej),inspect_id=str(ins))
                else:
                    for i in range(1, int(leng)+1):
                        qtypr=request.POST.get('qty_p'+str(i))
                        qtyac =request.POST.get('qty_acc'+str(i))
                        wrrej =request.POST.get('w_rej'+str(i))
                        matrej =request.POST.get('m_rej'+str(i))
                        opn=request.POST.get('onumber'+str(i))
                        ins=request.POST.get('inspect'+str(i))
                        m2_transaction11.objects.filter(work_order=work,shop_sec=shopsec, part_no=partno, opn_no=opn).update(qty_prod=str(qtypr), qty_accep=str(qtyac), work_rej=str(wrrej), mat_rej=str(matrej),inspect_id=ins)
    return render(request, "m2view.html", context)


def m2_view_shop(request):
    obj=[]
    if request.method == "GET" and request.is_ajax():
        work_no = request.GET.get('work')
        shop_no1=request.GET.get('shop_no1')
        obj=list(M2Docnew1.objects.filter(batch_no=work_no,f_shopsec=shop_no1).values('part_no').distinct())
        return JsonResponse(obj, safe = False)
    return JsonResponse({"success":False}, status=400)

def m2_process_sheet(request):
    l=[]
    if request.method == "GET" and request.is_ajax():
        part_no = request.GET.get('part_no')
        obj1=list(Oprn.objects.filter(part_no=part_no).values('opn', 'shop_sec', 'lc_no', 'des','pa','at','ncp_jbs',).order_by('shop_sec','opn'))
        obj2=list(Nstr.objects.filter(pp_part=part_no).values('pp_part','epc','ptc','cp_part').distinct())
        l.append(obj1)
        l.append(obj2)
        return JsonResponse(l, safe = False)
    return JsonResponse({"success":False}, status=400)

def m2_sheet1(request):
    if request.method == "GET" and request.is_ajax():
        l=[]
        brn_no=0
        assembly_no=0
        doc_no=0
        rm_partno=0
        shop_unit=0
        opn_no=0
        l2=[]
        obj12=[]
        l3=[]
        shop_sec = request.GET.get('shop_no1')
        part_no = request.GET.get('part_no')
        wo_no = request.GET.get('work')
        
        kkk=Oprn.objects.all()
        obj=list(M2Docnew1.objects.filter(batch_no=wo_no).values('m2sln','brn_no','assly_no','scl_cl','rm_partno','m4_no','rc_st_wk').distinct())

        if len(obj):
            brn_no=obj[0]['brn_no']
            assembly_no=obj[0]['assly_no']
            doc_no=obj[0]['m2sln']
            rm_partno=obj[0]['rm_partno']
        if len(obj)==0:
            obj=[{'m2sln':"",'brn_no':'','assly_no':'','scl_cl':'','rm_partno':'','m4_no':'','rc_st_wk':''}]
        obj1=list(Part.objects.filter(partno=part_no).values('des','drgno').distinct())
        if len(obj1)==0:
            obj1=[{'des':'','drgno':''}]
        obj2=list(Part.objects.filter(partno=assembly_no).values('des').distinct())
        if len(obj2)==0:
            obj2=[{'des':''}]
        obj3=list(Batch.objects.filter(bo_no=wo_no,brn_no=brn_no,part_no=assembly_no).values('batch_type'))
        if len(obj3)==0:
            obj3=[{'batch_type':''}]
        obj4= list(Oprn.objects.filter(part_no=part_no,shop_sec=shop_sec).values('opn', 'shop_sec', 'lc_no', 'des','pa','at','lot').order_by('opn'))
        for i in range(1, int(len(obj4))+1):
            opn_no=obj4[i-1]['opn']
            l2.append(opn_no)
        if len(obj4)==0:
            obj4=[{'opn':'', 'shop_sec':'', 'lc_no':'', 'des':'','pa':'','at':'','lot':''}]
     
        obj5 = list(M2Docnew1.objects.filter(batch_no=wo_no).values('m2prtdt','qty').distinct())
        if len(obj5)==0:
            obj5=[{'m2prtdt':'','qty':""}]
        now =obj5[0]['m2prtdt']
        date_string = now
        obj5[0]['m2prtdt']=date_string
        obj6=list(Proddem.objects.filter(part_no=part_no).values('l_fr','l_to').distinct())
        obj7=list(Part.objects.filter(partno=rm_partno).values('des').distinct())
        obj8=list(M2Docnew1.objects.filter(rm_partno=rm_partno).values('rm_qty').distinct())
        obj9=list(Part.objects.filter(partno=part_no).values('shop_ut').distinct())
        if len(obj9):
            shop_unit=obj9[0]['shop_ut']
        if len(obj6)==0:
            
            obj6=[{'l_fr':'','l_to':''}]
        if len(obj7)==0:
            obj7=[{'des':''}]  
        if len(obj8)==0:
            obj8=[{'rm_qty':''}]  
        if len(obj9)==0:
            obj9=[{'shop_ut':''}]
        obj10=list(Code.objects.filter(cd_type='51',code=shop_unit).values('alpha_1').distinct()) 
        
        if len(obj10)==0:
            obj10=[{'alpha_1':''}]  
        obj11=list(Cutdia.objects.filter(ep_part=part_no,rm_part=rm_partno).values('cutdia_no').distinct())    
        
        if len(obj11)==0:
            obj11=[{'cutdia_no':''}]
        for i in range(1,len(l2)+1):

            l3=list(m2_transaction11.objects.filter(work_order=wo_no,opn_no=l2[i-1]).values('qty_prod','qty_accep','work_rej','mat_rej','inspect_id').distinct())
            if len(l3)==0:
                l3=[{'qty_prod':'','qty_accep':'','work_rej':'','mat_rej':'','inspect_id':''}]
            obj12.append(l3)
        l.append(obj)
        l.append(obj1)
        l.append(obj2)
        l.append(obj3)
        l.append(obj4)
        l.append(obj5)
        l.append(obj6)
        l.append(obj7)
        l.append(obj8)
        l.append(obj9)
        l.append(obj10)
        l.append(obj11)
        l.append(obj12)
        return JsonResponse(l, safe = False)
    return JsonResponse({"success":False}, status=400)    

def m2_shop(request):
    if request.method == "GET" and request.is_ajax():
        
        work=request.GET.get('work')
        obj=list(M2Docnew1.objects.filter(batch_no=str(work)).values('f_shopsec').distinct())
        
        return JsonResponse(obj, safe = False)
    return JsonResponse({"success":False}, status=400)

def m2_getname(request):
    if request.method =="GET" and request.is_ajax():
        ins_id=request.GET.get('ins_id')
        for i in (empmast.objects.annotate(emp=Substr("empno",7,5)).filter(emp=ins_id).values('empname').distinct()):
            break
        obj=i['empname']
        if len(obj)==0:
            obj=[]
        return JsonResponse(obj, safe=False)
    return JsonResponse({"success":False}, status=400)   

def m2Pdf(request, *args, **kwargs):
    l=[]
    brn_no=0
    assembly_no=0
    doc_no=0
    rm_partno=0
    shop_unit=0
    opn_no=0
    l2=[]
    obj12=[]
    l3=[]
    m4_no=0
    scl_cl=0
    rc_st_wk=0
    rm_qty=0
    alpha_1=0
    cutdia_no=0
    date_string=0
    l_to=0
    l_fr=0
    des1=0
    drgno=0
    shop_sec = request.GET.get('shop_no1')
    part_no = request.GET.get('part_no1')
    wo_no = request.GET.get('work')
    obj=list(M2Docnew1.objects.filter(batch_no=wo_no).values('m2sln','brn_no','assly_no','scl_cl','rm_partno','m4_no','rc_st_wk').distinct())

    if len(obj):
        brn_no=obj[0]['brn_no']
        assembly_no=obj[0]['assly_no']
        doc_no=obj[0]['m2sln']
        rm_partno=obj[0]['rm_partno']
        scl_cl=obj[0]['scl_cl']
        m4_no=obj[0]['m4_no']
        rc_st_wk=obj[0]['rc_st_wk']
    obj1=list(Part.objects.filter(partno=part_no).values('des','drgno').distinct())  
    obj2=list(Part.objects.filter(partno=assembly_no).values('des').distinct())
    obj3=list(Batch.objects.filter(bo_no=wo_no,brn_no=brn_no,part_no=assembly_no).values('batch_type'))
    obj4= list(Oprn.objects.filter(part_no=part_no,shop_sec=shop_sec).values('opn', 'shop_sec', 'lc_no', 'des','pa','at','lot').order_by('opn'))
    if len(obj1):
        des1=obj1[0]['des']
        drgno=obj1[0]['drgno']
    for i in range(1, int(len(obj4))+1):
        opn_no=obj4[i-1]['opn']
        l2.append(opn_no)
    
    obj5 = list(M2Docnew1.objects.filter(batch_no=wo_no).values('m2prtdt','qty').distinct())
    
    now =obj5[0]['m2prtdt']
    qty =obj5[0]['qty']
    date_string = now
    obj5[0]['m2prtdt']=date_string
    obj6=list(Proddem.objects.filter(part_no=part_no).values('l_fr','l_to').distinct())
    if len(obj6):
        l_to=obj6[0]['l_to']
        l_fr=obj6[0]['l_fr']
    obj7=list(Part.objects.filter(partno=rm_partno).values('des').distinct())
    obj8=list(M2Docnew1.objects.filter(rm_partno=rm_partno).values('rm_qty').distinct())
    if len(obj8):
        rm_qty=obj8[0]['rm_qty']

    obj9=list(Part.objects.filter(partno=part_no).values('shop_ut').distinct())
    
    obj10=list(Code.objects.filter(cd_type='51',code=shop_unit).values('alpha_1').distinct())
    if len(obj10):
        alpha_1=obj10[0]['alpha_1'] 
    if len(obj9):
            shop_unit=obj9[0]['shop_ut']
    if len(obj6)==0:    
        obj6=[{'l_fr':'','l_to':''}]
    if len(obj7)==0:
        obj7=[{'des':''}]  
    if len(obj8)==0:
        obj8=[{'rm_qty':''}]  
    if len(obj9)==0:
        obj9=[{'shop_ut':''}]  
    obj11=list(Cutdia.objects.filter(ep_part=part_no,rm_part=rm_partno).values('cutdia_no').distinct())    
    if len(obj11):
        cutdia_no=obj11[0]['cutdia_no']
    for i in range(1,len(l2)+1):
        l3=list(m2_transaction11.objects.filter(work_order=wo_no,opn_no=l2[i-1]).values('qty_prod','qty_accep','work_rej','mat_rej','inspect_id').distinct())
        if len(l3)==0:
            l3=[{'qty_prod':'','qty_accep':'','work_rej':'','mat_rej':'','inspect_id':''}]
        obj12.append(l3)
    for i in range(0,int(len(obj4))):
        obj4[i].update({'qty_prod':obj12[i][0]['qty_prod'],'qty_accep':obj12[i][0]['qty_accep'],'work_rej':obj12[i][0]['work_rej'],'mat_rej':obj12[i][0]['mat_rej'],'inspect_id':obj12[i][0]['inspect_id']})
    pdfcontext={
        'des1':des1,
        'drgno':drgno,
        'l_to':l_to,
        'qty':qty,
        'l_fr':l_fr,
        'shop_unit':shop_unit,
        'date_string':date_string,
        'cutdia_no':cutdia_no,
        'alpha_1':alpha_1,
        'rm_qty':rm_qty,
        'm4_no':m4_no,
        'scl_cl':scl_cl,
        'rc_st_wk':rc_st_wk,
        'brn_no':brn_no,
        'assembly_no':assembly_no,
        'doc_no':doc_no,
        'rm_partno':rm_partno,
        'shop_unit':shop_unit,
        'wo_no':wo_no,
        'part_no':part_no,
        'shop_sec':shop_sec,
        'obj':obj,
        'obj1':obj1,
        'obj2':obj2,
        'obj3':obj3,
        'obj4':obj4,
        'obj5':obj5,
        'obj6':obj6,
        'obj7':obj7,
        'obj8':obj8,
        'obj9':obj9,
        'obj10':obj10,
        'obj11':obj11,
        'obj12':obj12
    }  
    pdf = render_to_pdf('m2report.html',pdfcontext)
    return HttpResponse(pdf, content_type='application/pdf')




@login_required
@role_required(urlpass='/m4view/')
def m4view(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    if "Superuser" in rolelist:
        tm=shop_section.objects.all()
        tmp=[]
        for on in tm:
            tmp.append(on.section_code)
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles':tmp
        }
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):

            w1 = Oprn.objects.filter(shop_sec=rolelist[i]).values('part_no').distinct()
            req = M14M4new1.objects.filter(assly_no__in=w1).values('bo_no').distinct()
            wo_nop = wo_nop | req

        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'wo_nop':wo_nop,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist
        }
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist
        }
    if request.method == "POST":
        submitvalue = request.POST.get('proceed')
        if submitvalue=='Proceed':
            rolelist=usermaster.role.split(", ")
            wo_nop = empmast.objects.none()
            shop_sec = request.POST.get('shop_sec')
            part_no = request.POST.get('part_nop')
            wo_no = request.POST.get('wo_no')
            brn_no = request.POST.get('br_no')
            assembly_no = request.POST.get('assm_no')
            doc_no = request.POST.get('doc_no')
            kkk=Oprn.objects.all()
            obj1 = Part.objects.filter(partno=part_no).values('des', 'drgno').distinct()
            obj2 = Part.objects.filter(partno=assembly_no).values('des').distinct()
            obj3 = Batch.objects.filter(bo_no=wo_no,brn_no=brn_no,part_no=assembly_no).values('batch_type')
            obj4 =  M14M4new1.objects.filter(doc_no=doc_no,brn_no=brn_no,assly_no=assembly_no,bo_no=wo_no,part_no=part_no).values('l_fr','l_to')
            obj5 =  M14M4new1.objects.filter(doc_no=doc_no,brn_no=brn_no,assly_no=assembly_no,bo_no=wo_no,part_no=part_no).values('opn_no','pm_no','due_wk')            
            obj6 = Part.objects.filter(partno=part_no).values('m14splt_cd').distinct()
            code = M14M4new1.objects.filter(doc_no=doc_no,brn_no=brn_no,assly_no=assembly_no,bo_no=wo_no,part_no=part_no).values('unit').distinct()           
            obj7 = Code.objects.filter(cd_type='51',code=code[0]['unit']).values('alpha_1').distinct()
            check_obj=Oprn.objects.all().filter(shop_sec=shop_sec)
            obj = M14M4new1.objects.filter(doc_no=doc_no,assly_no=assembly_no,brn_no=brn_no,part_no=part_no).values('received_mat', 'issued_qty', 'received_qty', 'laser_pst', 'line', 'closing_bal', 'remarks', 'posted_date', 'wardkp_date', 'shopsup_date', 'posted1_date')
            if len(obj) == 0:
                obj = range(0,1)
            if len(obj7)==0:
                obj7=[{'alpha_1':'None'}] 
            if obj6[0]['m14splt_cd'] is None:
                obj6=[{'m14splt_cd':'1'}]    

            if len(obj4) == 0:
                obj4 = range(0, 1)

            if len(obj5) == 0:
                obj5 = range(0, 1)
            
            if len(obj6) == 0:
                obj6 = range(0, 1)
            date = M14M4new1.objects.filter(doc_no=doc_no,assly_no=assembly_no,brn_no=brn_no,part_no=part_no).values('prtdt','qty').distinct()
            leng = obj.count()
            lenm = obj4.count()
            lenn = obj5.count()
            datel = date.count()
            if "Superuser" in rolelist:
                tm=shop_section.objects.all()
                tmp=[]
                for on in tm:
                    tmp.append(on.section_code)
                context = {
                    'roles':tmp,
                    'lenm' :2,
                    'nav':nav,
                    'subnav':subnav,
                    'ip':get_client_ip(request),
                    'obj': obj,
                    'obj1': obj1,
                    'obj2': obj2,
                    'obj3': obj3,
                    'obj4': obj4,
                    'obj5': obj5,
                    'obj6': obj6,
                    'obj7': obj7,
                    'sub': 1,
                    'len': leng,
                    'date': date,
                    'datel': datel,
                    'shop_sec': shop_sec,
                    'part_no': part_no,
                    'wo_no': wo_no,
                    'brn_no': brn_no,
                    'assembly_no': assembly_no,
                    'doc_no': doc_no,
                }
            elif(len(rolelist)==1):
                for i in range(0,len(rolelist)):
                    w1 = Oprn.objects.filter(shop_sec=rolelist[i]).values('part_no').distinct()
                    req = M14M4new1.objects.filter(assly_no__in=w1).values('bo_no').distinct()
                    wo_nop = wo_nop | req

                context = {
                    'wo_nop':wo_nop,
                    'roles' :rolelist,
                    'subnav':subnav,
                    'usermaster':usermaster,
                    'lenm' :len(rolelist),
                    'nav': nav,
                    'ip': get_client_ip(request),
                    'obj': obj,
                    'obj1': obj1,
                    'obj2': obj2,
                    'obj3': obj3,
                    'sub': 1,
                    'len': leng,
                    'date': date,
                    'datel': datel,
                    'shop_sec': shop_sec,
                    'part_no': part_no,
                    'wo_no': wo_no,
                    'brn_no': brn_no,
                    'assembly_no': assembly_no,
                    'doc_no': doc_no,
                }
            elif(len(rolelist)>1):
                context = {
                    'lenm' :len(rolelist),
                    'nav':nav,
                    'subnav':subnav,
                    'ip':get_client_ip(request),
                    'usermaster':usermaster,
                    'roles' :rolelist,
                    'obj': obj,
                    'obj1': obj1,
                    'obj2': obj2,
                    'obj3': obj3,
                    'sub': 1,
                    'len': leng,
                    'date': date,
                    'datel': datel,
                    'shop_sec': shop_sec,
                    'part_no': part_no,
                    'wo_no': wo_no,
                    'brn_no': brn_no,
                    'assembly_no': assembly_no,
                    'doc_no': doc_no,
                }


        if submitvalue=='Save':
            doc_no= request.POST.get('doc_no1')
            part_no= request.POST.get('part_no1')
            wo_no=request.POST.get('wo_no1')
            brn_no=request.POST.get('brn_no1')
            received_mat = request.POST.get('received_mat')
            issued_qty = request.POST.get('issued_qty')
            received_qty = request.POST.get('received_qty')
            laser_pst = request.POST.get('laser_pst')
            line= request.POST.get('line')
            closing_bal = request.POST.get('closing_bal')
            remarks = request.POST.get('remarks')
            posted_date = request.POST.get('posted_date')
            wardkp_date = request.POST.get('wardkp_date')
            shopsup_date = request.POST.get('shopsup_date')
            posted1_date = request.POST.get('posted1_date')
            M14M4new1.objects.filter(part_no=part_no,doc_no=doc_no,brn_no=brn_no,bo_no=wo_no).update(received_mat=str(received_mat), issued_qty=int(issued_qty), received_qty=int(received_qty), laser_pst=str(laser_pst), line=str(line), closing_bal=int(closing_bal), remarks=str(remarks), posted_date=str(posted_date), wardkp_date=str(wardkp_date), shopsup_date=str(shopsup_date), posted1_date=str(posted1_date))
            wo_no=M14M4new1.objects.all().values('bo_no').distinct()
            messages.success(request, 'Successfully Updated!, Select new values to update')
    return render(request, "m4view.html", context)



def m4getwono(request):
    if request.method == "GET" and request.is_ajax():
        from.models import Batch
        shop_sec = request.GET.get('shop_sec')
        w1 = Oprn.objects.filter(shop_sec=shop_sec).values('part_no').distinct()
        w2 =Batch.objects.filter(status='R').values('bo_no').exclude(bo_no__isnull=True).distinct()
        wono = list(w2)
        return JsonResponse(wono, safe = False)
    return JsonResponse({"success":False}, status=400)

def m4getbr(request):
    if request.method == "GET" and request.is_ajax():
        wo_no = request.GET.get('wo_no')
        br_no = list(M14M4new1.objects.filter(doc_code='88',bo_no =wo_no).values('brn_no').exclude(brn_no__isnull=True).distinct())
        return JsonResponse(br_no, safe = False)
    return JsonResponse({"success":False}, status=400)

def m4getassly(request):
    if request.method == "GET" and request.is_ajax():
        wo_no = request.GET.get('wo_no')
        br_no = request.GET.get('brn_no')
        assm_no = list(M14M4new1.objects.filter(doc_code='88',bo_no =wo_no,brn_no=br_no).values('assly_no').exclude(assly_no__isnull=True).distinct())
        return JsonResponse(assm_no, safe = False)
    return JsonResponse({"success":False}, status=400)



def m4getpart_no(request):
    if request.method == "GET" and request.is_ajax():
        wo_no = request.GET.get('wo_no')
        br_no = request.GET.get('brn_no')
        assembly_no = request.GET.get('assm_no')
        part_no = list(M14M4new1.objects.filter(doc_code='88',brn_no=br_no,assly_no=assembly_no,bo_no=wo_no).values('part_no').exclude(part_no__isnull=True).distinct())
        return JsonResponse(part_no, safe = False)
    return JsonResponse({"success":False}, status=400)



def m4getdoc_no(request):
    if request.method == "GET" and request.is_ajax():
        wo_no = request.GET.get('wo_no')
        br_no = request.GET.get('brn_no')
        shop_sec = request.GET.get('shop_sec')
        assembly_no = request.GET.get('assm_no')
        part_no = request.GET.get('part_no')
        doc_no = list(M14M4new1.objects.filter(doc_code='88',bo_no =wo_no,brn_no=br_no,assly_no=assembly_no,part_no=part_no).values('doc_no').exclude(doc_no__isnull=True).distinct())
        return JsonResponse(doc_no, safe = False)
    return JsonResponse({"success":False}, status=400)







@login_required
@role_required(urlpass='/m14view/')
def m14view(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    if "Superuser" in rolelist:
        tm=shop_section.objects.all()
        tmp=[]
        for on in tm:
            tmp.append(on.section_code)
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles':tmp
        }
    
    if request.method == "POST":
        submitvalue = request.POST.get('proceed')
        if submitvalue=='Proceed':
            shop_sec = request.POST.get('shop_sec')
            part_no = request.POST.get('part_nop')
            wo_no = request.POST.get('wo_no')
            brn_no = request.POST.get('br_no')
            assembly_no = request.POST.get('assm_no')
            doc_no = request.POST.get('doc_no')
            obj1 = Part.objects.filter(partno=part_no).values('des', 'drgno').distinct()
            obj2 = Part.objects.filter(partno=assembly_no).values('des').distinct()
            obj3 = Batch.objects.filter(bo_no=wo_no,brn_no=brn_no,part_no=assembly_no).values('batch_type')
            obj4 =  M14M4.objects.filter(doc_no=doc_no,brn_no=brn_no,assly_no=assembly_no,bo_no=wo_no,part_no=part_no).values('l_fr','l_to')
            obj5 =  M14M4.objects.filter(doc_no=doc_no,brn_no=brn_no,assly_no=assembly_no,bo_no=wo_no,part_no=part_no).values('opn_no','pm_no','due_wk')
            obj = M14M4.objects.filter(doc_no=doc_no,brn_no=brn_no,assly_no=assembly_no,bo_no=wo_no,part_no=part_no).values('received_mat14', 'issued_qty14', 'received_qty14', 'laser_pst14', 'line14', 'closing_bal14', 'remarks14', 'posted_date14', 'wardkp_date14', 'shopsup_date14', 'posted1_date14')
            obj6 = Part.objects.filter(partno=part_no).values('m14splt_cd').distinct()
            code = M14M4.objects.filter(doc_no=doc_no,brn_no=brn_no,assly_no=assembly_no,bo_no=wo_no,part_no=part_no).values('unit').distinct()
            
            obj7 = Code.objects.filter(cd_type='51',code=code[0]['unit']).values('alpha_1').distinct()
          
            if len(obj7)==0:
                obj7=[{'alpha_1':'None'}] 
            if obj6[0]['m14splt_cd'] is None:
                obj6=[{'m14splt_cd':'1'}]    
            if len(obj) == 0:
                obj = range(0, 1)

            if len(obj4) == 0:
                obj4 = range(0, 1)

            if len(obj5) == 0:
                obj5 = range(0, 1)
            
            if len(obj6) == 0:
                obj6 = range(0, 1)
            
            date = M14M4.objects.filter(doc_no=doc_no,brn_no=brn_no,assly_no=assembly_no,bo_no=wo_no).values('prtdt','qty').distinct()
            leng = obj.count()
            lenm = obj4.count()
            lenn = obj5.count()
            datel= date.count()
            
            if "Superuser" in rolelist:
                tm=shop_section.objects.all()
                tmp=[]
                for on in tm:
                    tmp.append(on.section_code)
                context = {
                    'roles':tmp,
                    'lenm' :2,
                    'nav':nav,
                    'subnav':subnav,
                    'ip':get_client_ip(request),
                    'obj': obj,
                    'obj1': obj1,
                    'obj2': obj2,
                    'obj3': obj3,
                    'obj4': obj4,
                    'obj5': obj5,
                    'obj6': obj6,
                    'obj7': obj7,
                    'sub': 1,
                    'len': leng,
                    'date': date,
                    'datel': datel,
                    'shop_sec': shop_sec,
                    'part_no': part_no,
                    'wo_no': wo_no,
                    'brn_no': brn_no,
                    'assembly_no': assembly_no,
                    'doc_no': doc_no,
                }
                
            
        if submitvalue=='Save':
            doc_no= request.POST.get('doc_no1')
            part_no= request.POST.get('part_no1')
            wo_no=request.POST.get('wo_no1')
            brn_no=request.POST.get('brn_no1')
            
            received_mat = request.POST.get('received_mat')
            issued_qty = request.POST.get('issued_qty')
            received_qty = request.POST.get('received_qty')
            laser_pst = request.POST.get('laser_pst')
            line= request.POST.get('line')
            closing_bal = request.POST.get('closing_bal')
            remarks = request.POST.get('remarks')
            posted_date = request.POST.get('posted_date')
            wardkp_date = request.POST.get('wardkp_date')
            shopsup_date = request.POST.get('shopsup_date')
            posted1_date = request.POST.get('posted1_date')
            M14M4.objects.filter(part_no=part_no,doc_no=doc_no,brn_no=brn_no,bo_no=wo_no).update(received_mat14=str(received_mat), issued_qty14=str(issued_qty), received_qty14=str(received_qty), laser_pst14=str(laser_pst), line14=str(line), closing_bal14=str(closing_bal), remarks14=str(remarks), posted_date14=str(posted_date), wardkp_date14=str(wardkp_date), shopsup_date14=str(shopsup_date), posted1_date14=str(posted1_date))
           
            messages.success(request, 'Successfully Updated!, Select new values to update')
    return render(request, "m14view.html", context)




def m14getwono(request):
    if request.method == "GET" and request.is_ajax():
        from.models import Batch
        shop_sec = request.GET.get('shop_sec')
        w1 = Oprn.objects.filter(shop_sec=shop_sec).values('part_no').distinct()
        w2 = Batch.objects.filter(status='R').values('bo_no').exclude(bo_no__isnull=True).distinct()
        wono = list(w2)
        return JsonResponse(wono, safe = False)
    return JsonResponse({"success":False}, status=400)

def m14getbr(request):
    if request.method == "GET" and request.is_ajax():
        wo_no = request.GET.get('wo_no')
        br_no = list(M14M4.objects.filter(bo_no =wo_no).values('brn_no').exclude(brn_no__isnull=True).distinct())
        return JsonResponse(br_no, safe = False)
    return JsonResponse({"success":False}, status=400)

def m14getassly(request):
    if request.method == "GET" and request.is_ajax():
        wo_no = request.GET.get('wo_no')
        br_no = request.GET.get('brn_no')
        assm_no = list(M14M4.objects.filter(bo_no =wo_no,brn_no=br_no).values('assly_no').exclude(assly_no__isnull=True).distinct())
        return JsonResponse(assm_no, safe = False)
    return JsonResponse({"success":False}, status=400)



def m14getpart_no(request):
    if request.method == "GET" and request.is_ajax():
        wo_no = request.GET.get('wo_no')
        br_no = request.GET.get('brn_no')
        assembly_no = request.GET.get('assm_no')
        part_no = list(M14M4.objects.filter(brn_no=br_no,assly_no=assembly_no,bo_no=wo_no).values('part_no').exclude(part_no__isnull=True).distinct())
        return JsonResponse(part_no, safe = False)
    return JsonResponse({"success":False}, status=400)



def m14getdoc_no1(request):
    if request.method == "GET" and request.is_ajax():
        wo_no = request.GET.get('wo_no')
        br_no = request.GET.get('brn_no')
        shop_sec = request.GET.get('shop_sec')
        assembly_no = request.GET.get('assm_no')
        part_no = request.GET.get('part_no')
        doc_no = list(M14M4.objects.filter(bo_no =wo_no,brn_no=br_no,assly_no=assembly_no,part_no=part_no).values('doc_no').exclude(doc_no__isnull=True).distinct())

        return JsonResponse(doc_no, safe = False)
    return JsonResponse({"success":False}, status=400)






@login_required
@role_required(urlpass='/aprodplan/')
def bprodplan(request):
    from .models import annual_production,jpo,namedgn,loconame,materialname
    existlen=0
    context={}
    dictemper={}
    yearlist=[]
    indrwspan=0
    years={}
    flagg=1
    diiict={}
    dct={}
    tod = date.today()
    ft=int(tod.strftime("%Y"))
    ft2=ft+1
    ctp=str(ft)+'-'+str(ft2)
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    context={
        'nav':nav,
        'subnav':subnav,
        'usermaster':usermaster,
        'ip':get_client_ip(request),
    }
    year=None
    cuser=request.user
    ruser=True
    num=0
    numfy=0
    objj=None
    objx=None
    dgp=0
    flag=0
    rcnt=0
    dt=None
    rmlist=[]
    reflist=[]
    dictt=jpo.objects.all().aggregate(Max('revisionid'))
    revex=dictt['revisionid__max']
    if revex is None:
            revex=0
    else:
        objx=jpo.objects.filter(revisionid=revex,jpo='main').exists()
        if objx is True:
            objx1=jpo.objects.filter(revisionid=revex,jpo='main',finalval=1).exists()
            objx2=jpo.objects.filter(revisionid=revex,jpo='rsp',finalval=1).exists()
            if objx1 is True or objx2 is True:
                revex=revex+1
    formno=0
    number=0
    mjalt=None
    headalt=None
    remk=None
    sub=None
    ref=None
    context={
              'nav':nav,
              'revex':revex,
              'usermaster':usermaster,
              'ip':get_client_ip(request),
              'ruser':ruser,'ref':ref,
              'yup':True,
              'Manpower':"Manpower",
              'Account':"Account",
              'Add':"Add",
              'Role':rolelist[0],
              'cyear':ctp,
              'numfy':'-','dgp':'-','flag':flag,'existlen':0,
              'subnav':subnav,
            }
    lcname=loco(request)
    mtname=material(request)
    if request.method=="POST":
        flag=0
        dicn={}
        bval=request.POST.get('proceed')
        save=request.POST.get('save')
        typec=request.POST.get('type')
        if (bval==None and save==None):
            save="Save"
        dgp=request.POST.get('dgp')
        if dgp is None:
            cnt=0
        else:
            cnt=int(dgp)
        typenew=typec
        if(typec== "ind-rail" ):
            typenew="Indian Railway Loco"
        elif(typec == "zrover"):
            typenew="ZR Overhauling"
        elif(typec=="rspitm"):
            typenew="RSP Items"
        elif(typec=="rspm"):
            typenew="RSP Manufacturing"
        elif(typec == "zr"):
            typenew="ZR"
        elif(typec=="export"):
            typenew="Export"
        elif(typec=="nrc"):
            typenew="NRC"
        
        if typec=='ind-rail' or typec=='nrc' or typec=='export' or typec=='nrcdgset' or typec=='zr' or typec=='zrover' or typec=='zrasstn':
            jpot='main'
            iammain=1
        else:
            jpot='rsp'
            iammain=0
        if revex==0:
            revf=0
        else:
            pp=jpo.objects.filter(revisionid=revex,jpo=jpot).exists()
            if pp:
                revf=revex
            else:
                revf=revex-1
        objc=jpo.objects.filter(revisionid=revf,jpo=jpot).exists()
        if objc is True:
            objp=jpo.objects.filter(revisionid=revf,jpo=jpot)
            if len(objp):
                formno=objp[0].formno
                number=objp[0].number
                sub=objp[0].subject
                ref=objp[0].reference
                mjalt=objp[0].majoralt
                headalt=objp[0].headmjr
                remk=objp[0].remark
                dt=objp[0].date
        cnt=0
        if bval == "Proceed" :
            numfy1=0
            typec=request.POST.get('type')
            lcname2=set()
            abc=annual_production.objects.filter(revisionid=revf,customer=typec)
            for a in abc:
                lcname2.add(a.loco_type)
            lcname2=(list(lcname2))
            dt=request.POST.get('xTime')
            tod = date.today()
            ft=int(tod.strftime("%Y"))
            ft2=ft+1
            ctp=str(ft)+'-'+str(ft2)
            yr=ctp
            jpoobj=jpo.objects.filter(financial_year=yr,revisionid=revf,jpo=jpot)
            if len(jpoobj):
                numfy1=int(jpoobj[0].numyrs)
                cspan=numfy1
                dt=jpoobj[0].date
                sub=jpoobj[0].subject

            if numfy1==0 or numfy1 >= num:
                numfy1=int(num)
            numfy=request.POST.get("numfy")
            cspan=numfy
            tod = date.today()
            ft=int(tod.strftime("%Y"))
            ft2=ft+1
            for lol in range(int(numfy)):
                yearlist.append(str(ft)+'-'+str(ft2))
                ft=ft+1
                ft2=ft2+1

            for lol in range(int(numfy1)):
                indo=annual_production.objects.filter(financial_year=yearlist[lol],revisionid=revf,customer=typec)
                if len(indo)==0:
                    flagg=0

                elif len(indo)!=0 and indrwspan==0:
                    indrwspan=len(indo)+1

            for yrs in range(int(numfy)):

                temr = {str(yrs):{"yrs":yearlist[yrs],}}

                years.update(copy.deepcopy(temr))

            if flagg:
                indobj=annual_production.objects.filter(financial_year=yearlist[0],revisionid=revf,customer=typec)
                dell=0

                for j in range(len(indobj)):
                    
                    for kill in range(int(numfy)):
                        dct={}
                        inobj=annual_production.objects.filter(financial_year=yearlist[kill],revisionid=revf,customer=typec,loco_type=indobj[j].loco_type)
                        if len(inobj)!=0:
                        
                            v=inobj[0].target_quantity
                            bq=inobj[0].buffer_quantity

                            if len(v)==0:
                                v='-'

                            if len(bq)==0:
                                bq='-'
                        else:
                            v='-'
                            bq='-'


                        dct["yrtq"]=v
                        dct["yrbq"]=bq
                        diiict[(str(kill))]=dct

                        

                        dct=None

                    dictname="dict"
                    temper = {str(j):{"loty":indobj[j].loco_type,
                                    "dict":diiict,}}
                    

                    dictemper.update(copy.deepcopy(temper))
                    j=j+1

            objn=namedgn.objects.filter(revision=revf)
            namedg={}
            k=0
            diff=int(dgp)-len(objn)
            if diff>0:
                for j in range(len(objn)):
                    k=j
                    temp={str(j):{"name":objn[j].namep,
                                "dgn":objn[j].design,}}
                    namedg.update(copy.deepcopy(temp))
                k=k+1
                for j in range(k,(k+diff)):
                    temp1={str(j):{"name":"","dgn":"",}}
                    namedg.update(copy.deepcopy(temp1))
            elif diff==0:
                for j in range(len(objn)):
                    temp={str(j):{"name":objn[j].namep,
                                "dgn":objn[j].design,}}
                    namedg.update(copy.deepcopy(temp))
            else:
                for j in range(int(dgp)):
                    temp={str(j):{"name":objn[j].namep,
                                "dgn":objn[j].design,}}
                    namedg.update(copy.deepcopy(temp))
            flag=1
            existlen=(len(dictemper))
            context={
                        'user':cuser,
                        'ruser':ruser,
                        'yup':True,
                        'Manpower':"Manpower",
                        'Account':"Account",
                        'Add':"Add",
                        'nav':nav,
                        'subnav':subnav,
                        'Role':rolelist[0],
                        'value': range(5),
                        'typec':typec,
                        'typed':typenew,'numfy':numfy,'dgp':dgp,
                        'cyear':ctp,'ref':ref,'mjalt':mjalt,'remk':remk,'headalt':headalt,
                        'val':range(3),'iammain':iammain,
                        'revex':revex,
                        'usermaster':usermaster,'cnt':range(cnt),
                        'ip':get_client_ip(request),
                        'loconame':lcname,'matrname':mtname,'flag':flag,
                        'delcname':lcname2,'existlen':existlen,
                        'rcnt':rcnt,'dictemper':dictemper,'rev':revex,
                        'formno':formno,'number':number,'sub':sub,'dt':dt,'namedg':namedg,
                        "years":years,"cspan":int(cspan)+1,"bufcspan":cspan,
                    }
        elif(save=="Save"):
            nmdgn={}
            dgp=request.POST.get('dgp')
            cnt=int(dgp)+1
            temp1="namep"
            temp2="desig"
            temp3="remk"
            namelist=[]
            desiglist=[]
            rnamelist=[]
            for i in range(1,cnt):
                temp1=temp1+str(i)
                temp2=temp2+str(i)
                namelist.append(temp1)
                desiglist.append(temp2)
                temp1="namep"
                temp2="desig"
            for key in request.POST:
                for (a,b) in zip(namelist,desiglist):
                    if key==a or key==b:
                        nmdgn[request.POST[a]]=request.POST[b]
            new=0
            rem=0
            num=0
            rem_num=0
            ref_num=0
            remlist=[]
            reflist=[]
            rev=request.POST.get("rev")
            typ=request.POST.get("typec")
            num=request.POST.get("num")
            ref=request.POST.get("ref")
            formno=request.POST.get('formno')
            number=request.POST.get('number')
            dt=request.POST.get('xTime')
            remk=request.POST.get('remk')
            mjalt=request.POST.get('mjalt')
            headalt=request.POST.get('headalt')
            ob=namedgn.objects.filter(revision=rev)
            indx=len(ob)
            if indx==0:
                for k,v in nmdgn.items():
                    obj1=namedgn.objects.create()
                    obj1.namep=k
                    obj1.design=v
                    obj1.revision=rev
                    obj1.save()
            elif len(ob)==int(dgp):
                i=0
                for k,v in nmdgn.items():
                    ob[i].namep=k
                    ob[i].design=v
                    ob[i].revision=rev
                    ob[i].save()
                    i=i+1
            else:
                ob=namedgn.objects.filter(revision=rev).delete()
                i=0
                for k,v in nmdgn.items():
                    obj1=namedgn.objects.create()
                    obj1.namep=k
                    obj1.design=v
                    obj1.revision=rev
                    obj1.save()

            obj1=None
            if num!='THE OUTPUT OF PRODUCT FUNCTION' or num is None:
                new=int(num)

            nfy=int(request.POST.get("numfy"))
            sub=request.POST.get("sub")
            ref=request.POST.get('refrn')


            delm=request.POST.get("num_del")
            del_num=0
            if delm!='THE OUTPUT OF DEL FUNCTION' and delm!=None:
                del_num=int(request.POST.get("num_del"))     

            tod = date.today()
            ft=int(tod.strftime("%Y"))
            ft2=ft+1
            ctp=str(ft)+'-'+str(ft2)
            if typ=='ind-rail' or typ=='nrc' or typ=='export' or typ=='nrcdgset' or typ=='zr' or typ=='zrover' or typ=='zrasstn':

                nl=request.POST.get('num_of_loco')
                num_loco=0
                if(nl is not None):
                    num_loco=nl
                nf=request.POST.get('num_of_numfy')
                num_fy=0
                if(nf is not None):
                    num_fy=nfy
                tod = date.today()
                ft=int(tod.strftime("%Y"))
                ft2=ft+1

                yearr=[]
                for dq in range(1,int(num_fy)+1):
                    ctp=str(ft)+'-'+str(ft2)
                    yearr.append(ctp)
                    ft=ft+1
                    ft2=ft2+1
                deledit=annual_production.objects.filter(customer=typ,revisionid=rev).delete()
                for lo in range(0,int(num_loco)):

                    for nf in range(1,int(num_fy)+1):
                        if(request.POST.get("edit"+str(lo)+str(1))!=None):
                            if len(request.POST.get("edit"+str(lo)+str(1))) and (request.POST.get("edit"+str(lo)+str(1))) is not None:
                                credit=annual_production.objects.create()
                                credit.financial_year=yearr[nf-1]
                                credit.revisionid=rev
                                credit.customer=typ
                                credit.loco_type=request.POST.get("editloconame"+str(lo+1))
                                credit.target_quantity=request.POST.get("edit"+str(lo)+str(nf))
                                credit.buffer_quantity=request.POST.get("editbf"+str(lo)+str(nf))
                                credit.save()


                loconame="delname"
                
                for k in range(1,del_num+1):
                    for j in range(1,nfy+1):
                        o=annual_production.objects.filter(financial_year=yearr[j-1],revisionid=rev,customer=typ,loco_type=request.POST.get(loconame+str(k)))
                        if len(o)!=0:
                            o.delete()


                tod = date.today()
                ft=int(tod.strftime("%Y"))
                ft2=ft+1
                ctp=str(ft)+'-'+str(ft2)
                subobj=jpo.objects.filter(financial_year=ctp,revisionid=rev,jpo='main')
                indx=len(subobj)
                if len(subobj)==0 and (sub is not None) and (ref is not None):
                    sobj=jpo.objects.create()
                    sobj.financial_year=ctp
                    sobj.revisionid=rev
                    sobj.jpo='main'
                    if "Dy_CME/Plg" in rolelist:
                        sobj.subject=sub
                        sobj.reference=ref
                    sobj.date=dt
                    sobj.numyrs=nfy
                    sobj.numdgp=dgp
                    sobj.formno=formno
                    sobj.number=number
                    sobj.remark=remk
                    sobj.majoralt=mjalt
                    sobj.headmjr=headalt
                    sobj.save()
                else:
                    if "Dy_CME/Plg" in rolelist:
                        subobj[0].subject=sub
                        subobj[0].reference=ref
                    subobj[0].date=dt
                    subobj[0].numyrs=nfy
                    subobj[0].numdgp=dgp
                    subobj[0].formno=formno
                    subobj[0].number=number
                    subobj[0].remark=remk
                    subobj[0].headmjr=headalt
                    subobj[0].majoralt=mjalt
                    subobj[0].save()


            elif typ=='rspm' or typ=='rspitm':

                num_loco=request.POST.get('num_of_loco')
                num_fy=request.POST.get('numfy')
                tod = date.today()
                ft=int(tod.strftime("%Y"))
                ft2=ft+1

                yearr=[]
                for dq in range(1,int(num_fy)+1):
                    ctp=str(ft)+'-'+str(ft2)
                    yearr.append(ctp)
                    ft=ft+1
                    ft2=ft2+1

                deledit=annual_production.objects.filter(customer=typ,revisionid=rev).delete()
                

                for lo in range(0,int(num_loco)):
                    for nf in range(1,int(num_fy)+1):
                        if(request.POST.get("edit"+str(lo)+str(1))!=None):
                            if len(request.POST.get("edit"+str(lo)+str(1))) and (request.POST.get("edit"+str(lo)+str(1))) is not None:
               
                                credit=annual_production.objects.create()
                                credit.financial_year=yearr[nf-1]
                                credit.revisionid=rev
                                credit.customer=typ
                                credit.loco_type=request.POST.get("editloconame"+str(lo+1))
                                
                                if(request.POST.get("edit"+str(lo)+str(nf))==None):
                                    credit.target_quantity='-'
                                else:
                                    credit.target_quantity=request.POST.get("edit"+str(lo)+str(nf))
                                credit.buffer_quantity='-'
                                

                                credit.save()
           



                loconame="delname"
                
                for k in range(1,del_num+1):
                    for j in range(1,nfy+1):
                        o=annual_production.objects.filter(financial_year=yearr[j-1],revisionid=rev,customer=typ,loco_type=request.POST.get(loconame+str(k)))
                        if len(o)!=0:
                            o.delete()


                tod = date.today()
                ft=int(tod.strftime("%Y"))
                ft2=ft+1
                ctp=str(ft)+'-'+str(ft2)
                subobj=jpo.objects.filter(financial_year=ctp,revisionid=rev,jpo='rsp')
                if len(subobj)==0 and (sub is not None):
                    sobj=jpo.objects.create()
                    sobj.financial_year=ctp
                    sobj.revisionid=rev
                    sobj.jpo='rsp'
                    if "Dy_CME/Plg" in rolelist:
                        sobj.subject=sub
                        sobj.reference=ref
                    sobj.date=dt
                    sobj.numyrs=nfy
                    sobj.numdgp=dgp
                    sobj.remark=remk
                    sobj.majoralt=mjalt
                    sobj.formno=formno
                    sobj.number=number
                    sobj.save()
                else:
                    if "Dy_CME/Plg" in rolelist:
                        subobj[0].subject=sub
                        subobj[0].reference=ref
                    subobj[0].date=dt
                    subobj[0].numyrs=nfy
                    subobj[0].numdgp=dgp
                    subobj[0].formno=formno
                    subobj[0].number=number
                    subobj[0].remark=remk
                    subobj[0].majoralt=mjalt
                    subobj[0].save()

            
            nl=[]
            rma=[]

            qunat=[]
            qunatb=[]
            qt="quantity"
            qtb="quantityb"
            loconame="name"

            tod = date.today()
            ft=int(tod.strftime("%Y"))
            ft2=ft+1

            yearr=[]
            for dq in range(1,nfy+1):
                ctp=str(ft)+'-'+str(ft2)
                yearr.append(ctp)
                ft=ft+1
                ft2=ft2+1



            for k in range(1,new+1):
                for j in range(1,nfy+1):


                    qtname=qt+str(k)+str(j)
                    qtbuffname=qtb+str(k)+str(j)
                    if(request.POST.get(loconame+str(k))!=None):
                        if len(request.POST.get(loconame+str(k))) and (request.POST.get(loconame+str(k))) is not None:

                            o=annual_production.objects.create()
                            o.financial_year=yearr[j-1]
                            o.target_quantity=request.POST.get(qtname)
                            if request.POST.get("typec")=='rspitm' or request.POST.get("typec")=='rspm':
                                o.buffer_quantity='-'
                            else:
                                o.buffer_quantity=request.POST.get(qtbuffname)
                            temp=request.POST.get(loconame+str(k))
                            o.loco_type=temp.upper()
                            o.revisionid=int(request.POST.get("rev"))
                            o.customer=request.POST.get("typec")
                            o.save()
                            messages.success(request, 'Successfully Created!')
                            o=None
    return render(request,'newaprodplan.html',context)








@login_required
@role_required(urlpass='/jpo/')
def jpo(request):
    from .models import annual_production,jpo,namedgn
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    dictt=jpo.objects.all().aggregate(Max('revisionid'))
    revex=dictt['revisionid__max']
    if revex is None:
        revex=0
    revcnt=revex+1    
    datadic={}
    context={
        'nav':nav,
        'subnav':subnav,
        'usermaster':usermaster,
        'ip':get_client_ip(request),
        'revcnt':range(revcnt),
    }
    spclremlist=[]
    reflist=[]
    remklist=[]
    nrmllist=[]
    altrlist=[]
    datadic={}
    nrc={}
    f=0
    nr=0 
    k=0
    j=0
    data=0
    e=0  
    exp={}  
    ex=0  

    d=0
    dgs={}
    dg=0

    r1=0
    rspm={}
    rm=0

    r2=0
    rspitm={}
    ri=0

    z=0
    zrzr={}
    zr=0

    z2=0
    zozo={}
    zo=0

    remark={}
    rma=0
    rmark=0

    ty1=0
    ty2=0
    ty3=0
    ty4=0

    yearlist=[]
    years={}



    flag=1
    dictemper={}
    diiict={}
    dct={}
    indrwspan=0


    nrcflag=1
    nrcdictemper={}
    nrcrwspan=0

    nrcdgflag=1
    nrcdgdictemper={}
    nrcdgrwspan=0

    cspan=0

    expflag=1
    expdictemper={}
    exprwspan=0

    zrflag=1
    zrdictemper={}
    zrrwspan=0

    zrasflag=1
    zrasdictemper={}
    zrasrwspan=0

    zroverflag=1
    zroverdictemper={}
    zroverrwspan=0

    rspflag=1
    rspdictemper={}
    rsprwspan=0

    rspitmflag=1
    rspitmdictemper={}
    rspitmrwspan=0

    total={}
    tottq=[]
    tot=0

    rev=None
    remk1=None
    remk2=None
    jpoo=None
    sub=None
    dt=None
    finalvalue=0
    formno=0
    number=0
    cdgp=0

    if request.method == "POST":
        tod = date.today()
        ft=int(tod.strftime("%Y"))
        ft2=ft+1
        ctp=str(ft)+'-'+str(ft2)
        yr=ctp
        ree=request.POST.get('rev')
        if ree is not None:
            rev=int(ree)
        objm=jpo.objects.filter(jpo='main',revisionid=rev)
        if len(objm):
            cdgp=int(objm[0].numdgp)
        objnm=namedgn.objects.filter(revision=rev)
        namelist=[]
        desiglist=[]
        for o in objnm:
            namelist.append(o.namep)
            desiglist.append(o.design)
        
        jpoo=request.POST.get('jpotype')
        finalize=request.POST.get('finalize')
        Finalize=request.POST.get('Finalize')
        
        if (rev is None) and (finalize is not None):
            rev=int(request.POST.get('revh'))
        if (jpoo is None) and (finalize is not None):
            jpoo=request.POST.get('jpotypeh')
        reflist=[]
        remklist=[]
        altrlist=[]
        jpoobj=jpo.objects.filter(financial_year=yr,revisionid=rev)
        y1=[]
        y2=[]
        y3=[]
        y4=[]
        yint=[]
        y1=yr.split('-',2)
        

        yint.append(int(y1[0])+1)
        yint.append(int(y1[1])+1)
        

        y2.append(str(yint[0]))
        y2.append(str(yint[1]))
        yr2=y2[0]+'-'+y2[1]

        yint=[]

        yint.append(int(y2[0])+1)
        yint.append(int(y2[1])+1)
        

        y3.append(str(yint[0]))
        y3.append(str(yint[1]))
        yr3=y3[0]+'-'+y3[1]

        yint=[]

        yint.append(int(y3[0])+1)
        yint.append(int(y3[1])+1)
        

        y4.append(str(yint[0]))
        y4.append(str(yint[1]))
        yr4=y4[0]+'-'+y4[1]
        yl=[]
        yl.append(yr)
        yl.append(yr3)

        if jpoo=="main":


            listname=['loty','yr1','yr2','yr3','yr4']
            jpoobj=jpo.objects.filter(financial_year=yr,revisionid=rev,jpo='main')
            
            if len(jpoobj):
                sub=jpoobj[0].subject
                numfy=jpoobj[0].numyrs
                ref=jpoobj[0].reference
                mjalt=jpoobj[0].majoralt
                headalt=jpoobj[0].headmjr
                remk=jpoobj[0].remark
                dt=jpoobj[0].date
                formno=jpoobj[0].formno
                number=jpoobj[0].number
                if ref is not None:
                    reflist=findthis(request,ref)
                if mjalt is not None:
                    altrlist=findthis(request,mjalt)
                if remk is not None:
                    remklist=findthis(request,remk)
                spclremlist=[]
                nrmllist=[]
                for str2 in remklist:
                    if len(str2.split('$'))>1:
                        spclremlist.append(str2)
                    elif len(str2.split('*'))>1:
                        spclremlist.append(str2)
                    else:
                        nrmllist.append(str2)

                cspan=numfy

                tod = date.today()
                ft=int(tod.strftime("%Y"))
                ft2=ft+1
                for lol in range(int(numfy)):
                    yearlist.append(str(ft)+'-'+str(ft2))
                    ft=ft+1
                    ft2=ft2+1
                    indo=annual_production.objects.filter(financial_year=yearlist[lol],revisionid=rev,customer='ind-rail')
                    if len(indo)==0:
                        flag=0

                    elif len(indo)!=0 and indrwspan==0:
                        indrwspan=len(indo)+1
                        

                    nrco=annual_production.objects.filter(financial_year=yearlist[lol],revisionid=rev,customer='nrc')
                    if len(nrco)==0:
                        nrcflag=0
                    elif len(nrco)!=0 and nrcrwspan==0:
                        nrcrwspan=len(nrco)+1
                        

                    expo=annual_production.objects.filter(financial_year=yearlist[lol],revisionid=rev,customer='export')
                    if len(expo)==0:
                        expflag=0

                    elif len(expo)!=0 and exprwspan==0:
                        exprwspan=len(expo)+1

                    zro=annual_production.objects.filter(financial_year=yearlist[lol],revisionid=rev,customer='zr')
                    if len(zro)==0:
                        zrflag=0

                    elif len(zro)!=0 and zrrwspan==0:
                        zrrwspan=len(zro)+1


                    zrov=annual_production.objects.filter(financial_year=yearlist[lol],revisionid=rev,customer='zrover')
                    if len(zrov)==0:
                        zroverflag=0

                    elif len(zrov)!=0 and zroverrwspan==0:
                        zroverrwspan=len(zrov)+1


                    zraso=annual_production.objects.filter(financial_year=yearlist[lol],revisionid=rev,customer='zrasstn')
                    if len(zraso)==0:
                        zrasflag=0

                    elif len(zraso)!=0 and zrasrwspan==0:
                        zrasrwspan=len(zraso)+1

                    nrcdgo=annual_production.objects.filter(financial_year=yearlist[lol],revisionid=rev,customer='nrcdgset')
                    if len(nrcdgo)==0:
                        nrcdgflag=0
                    elif len(nrcdgo)!=0 and nrcdgrwspan==0:
                        nrcdgrwspan=len(nrcdgo)+1

                for yrs in range(int(numfy)):

                    temr = {str(yrs):{"yrs":yearlist[yrs],}}
                    years.update(copy.deepcopy(temr))

                if flag:
                    indobj=annual_production.objects.filter(financial_year=yearlist[0],revisionid=rev,customer='ind-rail')
                    dell=0

                    for j in range(len(indobj)):
                        
                        for kill in range(int(numfy)):
                            dct={}
                            inobj=annual_production.objects.filter(financial_year=yearlist[kill],revisionid=rev,customer='ind-rail',loco_type=indobj[j].loco_type)
                            
                            v=inobj[0].target_quantity
                            bq=inobj[0].buffer_quantity

                            if len(v)==0:
                                v='-'

                            if len(bq)==0:
                                bq='-'

                            dct["yrtq"]=v
                            dct["yrbq"]=bq
                            diiict[(str(kill))]=dct

                            dct=None

                        dictname="dict"
                        temper = {str(j):{"loty":indobj[j].loco_type,
                                      "dict":diiict,}}
                       
                        dictemper.update(copy.deepcopy(temper))
                        j=j+1

                    for kill in range(int(numfy)):

                        for j in range(len(indobj)):
                            if(dictemper[str(j)]['dict'][str(kill)]['yrtq']!='-'):
                                art=dictemper[str(j)]['dict'][str(kill)]['yrtq']
                                artl=[ord(cc) for cc in art]
                                
                                tr=[]
                                l=[48,49,50,51,52,53,54,55,56,57]
                                for p in range(len(artl)):
                                    if artl[p] in l:
                                        tr.append(artl[p])
                               
                                s=''.join(chr(artl[d]) for d in range(len(tr)) )
                                tot=tot+int(s)
                        tottq.append(tot)
                        tot=0
                        tottemper = {str(kill):{"totq":tottq[kill],}}

                        total.update(copy.deepcopy(tottemper))

                    tottq=[]

                if nrcflag:
                    nrcdobj=annual_production.objects.filter(financial_year=yearlist[0],revisionid=rev,customer='nrc')
                    dell=0

                    for j in range(len(nrcdobj)):
                        
                        for kill in range(int(numfy)):
                            dct={}
                            nrcobj=annual_production.objects.filter(financial_year=yearlist[kill],revisionid=rev,customer='nrc',loco_type=nrcdobj[j].loco_type)
                            
                            v=nrcobj[0].target_quantity
                            bq=nrcobj[0].buffer_quantity

                            if len(v)==0:
                                v='-'

                            if len(bq)==0:
                                bq='-'
                            

                            dct["yrtq"]=v
                            dct["yrbq"]=bq
                            diiict[(str(kill))]=dct

                            

                            dct=None

                        temper = {str(j):{"loty":nrcdobj[j].loco_type,
                                      "dict":diiict,}}

                       

                        j=j+1
                       
                        nrcdictemper.update(copy.deepcopy(temper))

                    for kill in range(int(numfy)):

                        for j in range(len(nrcdobj)):
                            if(nrcdictemper[str(j)]['dict'][str(kill)]['yrtq']!='-'):
                                if len(total.keys()) and j==0:
                                    tot=int(total[str(kill)]['totq'])
                                art=nrcdictemper[str(j)]['dict'][str(kill)]['yrtq']
                                artl=[ord(cc) for cc in art]
                                
                                tr=[]
                                l=[48,49,50,51,52,53,54,55,56,57]
                                for p in range(len(artl)):
                                    if artl[p] in l:
                                        tr.append(artl[p])
                                s=''.join(chr(artl[d]) for d in range(len(tr)) )
                                tot=tot+int(s)
                            else:
                                tot=int(total[str(kill)]['totq'])
                        tottq.append(tot)
                        tot=0
                        tottemper = {str(kill):{"totq":tottq[kill],
                                      
                                        }}

                        total.update(copy.deepcopy(tottemper))

                    tottq=[]

                if nrcdgflag:
                    nrcdgdobj=annual_production.objects.filter(financial_year=yearlist[0],revisionid=rev,customer='nrcdgset')
                    dell=0

                    for j in range(len(nrcdgdobj)):
                        
                        for kill in range(int(numfy)):
                            dct={}
                            nrcdgobj=annual_production.objects.filter(financial_year=yearlist[kill],revisionid=rev,customer='nrcdgset',loco_type=nrcdgdobj[j].loco_type)
                            
                            v=nrcdgobj[0].target_quantity
                            bq=nrcdgobj[0].buffer_quantity

                            if len(v)==0:
                                v='-'

                            if len(bq)==0:
                                bq='-'
                            

                            dct["yrtq"]=v
                            dct["yrbq"]=bq
                            diiict[(str(kill))]=dct

                            

                            dct=None

                        temper = {str(j):{"loty":nrcdgdobj[j].loco_type,
                                      "dict":diiict,}}

                       

                        j=j+1
                       
                        nrcdgdictemper.update(copy.deepcopy(temper))


                if expflag:
                    expdobj=annual_production.objects.filter(financial_year=yearlist[0],revisionid=rev,customer='export')
                    dell=0

                    for j in range(len(expdobj)):
                        
                        for kill in range(int(numfy)):
                            dct={}
                            expobj=annual_production.objects.filter(financial_year=yearlist[kill],revisionid=rev,customer='export',loco_type=expdobj[j].loco_type)
                            
                            v=expobj[0].target_quantity
                            bq=expobj[0].buffer_quantity

                            if len(v)==0:
                                v='-'

                            if len(bq)==0:
                                bq='-'
                            

                            dct["yrtq"]=v
                            dct["yrbq"]=bq
                            diiict[(str(kill))]=dct

                            

                            dct=None

                        temper = {str(j):{"loty":expdobj[j].loco_type,
                                      "dict":diiict,
                                  
                                        }}                 

                        j=j+1
                       
                        expdictemper.update(copy.deepcopy(temper))


                    for kill in range(int(numfy)):

                        for j in range(len(expdobj)):
                            if(expdictemper[str(j)]['dict'][str(kill)]['yrtq']!='-'):
                                if len(total.keys()) and j==0:
                                    tot=int(total[str(kill)]['totq'])
                                art=expdictemper[str(j)]['dict'][str(kill)]['yrtq']
                                artl=[ord(cc) for cc in art]
                                
                                tr=[]
                                l=[48,49,50,51,52,53,54,55,56,57]
                                for p in range(len(artl)):
                                    if artl[p] in l:
                                        tr.append(artl[p])
                               
                                s=''.join(chr(artl[d]) for d in range(len(tr)) )
                                tot=tot+int(s)
                            else:
                                tot=int(total[str(kill)]['totq'])
                                
                        tottq.append(tot)
                        tot=0
                        tottemper = {str(kill):{"totq":tottq[kill],
                                      
                                        }}

                        total.update(copy.deepcopy(tottemper))

                    tottq=[]


                if zrflag:
                    zrdobj=annual_production.objects.filter(financial_year=yearlist[0],revisionid=rev,customer='zr')
                    dell=0

                    for j in range(len(zrdobj)):
                        
                        for kill in range(int(numfy)):
                            dct={}
                            zrobj=annual_production.objects.filter(financial_year=yearlist[kill],revisionid=rev,customer='zr',loco_type=zrdobj[j].loco_type)
                            
                            v=zrobj[0].target_quantity
                            bq=zrobj[0].buffer_quantity

                            if len(v)==0:
                                v='-'

                            if len(bq)==0:
                                bq='-'
                            

                            dct["yrtq"]=v
                            dct["yrbq"]=bq
                            diiict[(str(kill))]=dct

                            dct=None

                        temper = {str(j):{"loty":zrdobj[j].loco_type,
                                      "dict":diiict,}}                 

                        j=j+1
                       
                        zrdictemper.update(copy.deepcopy(temper))



                if zroverflag:
                    zrovdobj=annual_production.objects.filter(financial_year=yearlist[0],revisionid=rev,customer='zrover')
                    dell=0

                    for j in range(len(zrovdobj)):
                        
                        for kill in range(int(numfy)):
                            dct={}
                            zrovobj=annual_production.objects.filter(financial_year=yearlist[kill],revisionid=rev,customer='zrover',loco_type=zrovdobj[j].loco_type)
                            
                            v=zrovobj[0].target_quantity
                            bq=zrovobj[0].buffer_quantity

                            if len(v)==0:
                                v='-'

                            if len(bq)==0:
                                bq='-'
                            

                            dct["yrtq"]=v
                            dct["yrbq"]=bq
                            diiict[(str(kill))]=dct

                            

                            dct=None

                        temper = {str(j):{"loty":zrovdobj[j].loco_type,
                                      "dict":diiict,}}                 

                        j=j+1
                       
                        zroverdictemper.update(copy.deepcopy(temper))
                
                if zrasflag:
                    zrasdobj=annual_production.objects.filter(financial_year=yearlist[0],revisionid=rev,customer='zrasstn')
                    dell=0

                    for j in range(len(zrasdobj)):
                        
                        for kill in range(int(numfy)):
                            dct={}
                            zrasobj=annual_production.objects.filter(financial_year=yearlist[kill],revisionid=rev,customer='zrasstn',loco_type=zrasdobj[j].loco_type)
                            
                            v=zrasobj[0].target_quantity
                            bq=zrasobj[0].buffer_quantity

                            if len(v)==0:
                                v='-'

                            if len(bq)==0:
                                bq='-'
                            

                            dct["yrtq"]=v
                            dct["yrbq"]=bq
                            diiict[(str(kill))]=dct

                            dct=None

                        temper = {str(j):{"loty":zrasdobj[j].loco_type,
                                      "dict":diiict,}}                 

                        j=j+1
                       
                        zrasdictemper.update(copy.deepcopy(temper))



            if flag or nrcflag or expflag or zrflag or zroverflag or nrcdgflag or zrasflag:
                data=1

            lidict={0:'loty',1:'yr1',2:'yr3',3:'yr4'}
            colsapn=int(cspan)+2
            if rev==0:
                heading="Production Programme for "
            else:
                heading="Revised Production Programme for "
            for kt,v in years.items():
                heading=heading+str(v['yrs'])+" ,"
            heading=heading+" is indicated below :"

            context={'data':data,
            "data2":datadic,"data3":nrc,"data4":exp,"data5":dgs,"data8":zrzr,"data9":zozo,"jpo":1,
            "listname":listname,"lidict":lidict,
            "years":years,"dictemper":dictemper,"nrcdictemper":nrcdictemper,"expdictemper":expdictemper,"zrdictemper":zrdictemper,"zroverdictemper":zroverdictemper,
            "nrcflag":nrcflag,"flag":flag,"expflag":expflag,"zrflag":zrflag,"zroverflag":zroverflag,
            'nrcdgflag':nrcdgflag,'zrasflag':zrasflag,"nrcdgdictemper":nrcdgdictemper,"zrasdictemper":zrasdictemper,
            "colsapn":colsapn,"bufcspan":int(cspan),
            "nrcrwspan":nrcrwspan,"nrcdgrwspan":nrcdgrwspan,"indrwspan":indrwspan,"exprwspan":exprwspan,"zrrwspan":zrrwspan,"zroverrwspan":zroverrwspan,"zrasrwspan":zrasrwspan,
            "year1":yr,"year2":yr2,"year3":yr3,"year4":yr4,
            "toty1":ty1,"toty2":ty2,"toty3":ty3,"toty4":ty4,'jpoo':jpoo,'rev':rev,
            "pre":f,"n":j+1,'headalt':headalt,
            "pre2":nr,"n2":k+1,
            "pre3":ex,"n3":e+1,
            "pre4":dg,"n4":d+1,
            "pre7":zr,"n7":z+1,
            "pre8":zo,"n8":z2+1,
            'nav':nav,'rev':rev,'heading':heading,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'total':total,'subnav':subnav,
            'namelist':namelist,'desiglist':desiglist,'cdgp':range(cdgp),
            'number':number,'formno':formno,'subject':sub,'dt':dt,
            'reflist':reflist,'altrlist':altrlist,'remklist':remklist,'spclremlist':spclremlist,
            'nrmllist':nrmllist,'revcnt':range(revcnt),
            }

        elif jpoo=="rsp":

            jpoobj=jpo.objects.filter(financial_year=yr,revisionid=rev,jpo='rsp')
            if len(jpoobj):
                numfy=jpoobj[0].numyrs
                cspan=numfy
                dt=jpoobj[0].date
                sub=jpoobj[0].subject
                numfy=jpoobj[0].numyrs
                remk=jpoobj[0].remark
                number=jpoobj[0].number
                remklist=findthis(request,remk)
                spclremlist=[]
                nrmllist=[]
                for str2 in remklist:
                    if len(str2.split('$'))>1:
                        spclremlist.append(str2)
                    elif len(str2.split('*'))>1:
                        spclremlist.append(str2)
                    else:
                        nrmllist.append(str2)

                tod = date.today()
                ft=int(tod.strftime("%Y"))
                ft2=ft+1
                for lol in range(int(numfy)):
                    yearlist.append(str(ft)+'-'+str(ft2))
                    ft=ft+1
                    ft2=ft2+1
                    rspo=annual_production.objects.filter(financial_year=yearlist[lol],revisionid=rev,customer='rspm')
                    if len(rspo)==0:
                        rspflag=0

                    elif len(rspo)!=0 and rsprwspan==0:
                        rsprwspan=len(rspo)+1
                        

                    rspitmo=annual_production.objects.filter(financial_year=yearlist[lol],revisionid=rev,customer='rspitm')
                    if len(rspitmo)==0:
                        rspitmflag=0
                    elif len(rspitmo)!=0 and rspitmrwspan==0:
                        rspitmrwspan=len(rspitmo)+1
                        



                for yrs in range(int(numfy)):

                    temr = {str(yrs):{"yrs":yearlist[yrs],}}


                    years.update(copy.deepcopy(temr))

                myvar=0


                if rspflag:
                    rspdobj=annual_production.objects.filter(financial_year=yearlist[0],revisionid=rev,customer='rspm')
                    dell=0

                    for j in range(len(rspdobj)):
                        
                        for kill in range(int(numfy)):
                            dct={}
                            rspobj=annual_production.objects.filter(financial_year=yearlist[kill],revisionid=rev,customer='rspm',loco_type=rspdobj[j].loco_type)
                        
                            v=rspobj[0].target_quantity
                            bq=rspobj[0].buffer_quantity

                            if len(v)==0:
                                v='-'

                            if len(bq)==0:
                                bq='-'
                            

                            dct["yrtq"]=v
                            dct["yrbq"]=bq
                            diiict[(str(kill))]=dct

                            

                            dct=None


                        dictname="dict"
                        temper = {str(j):{"loty":rspdobj[j].loco_type,
                                      "dict":diiict,}}

                        j=j+1
                        myvar=j
                       
                        rspdictemper.update(copy.deepcopy(temper))


                if rspitmflag:
                    rspitmdobj=annual_production.objects.filter(financial_year=yearlist[0],revisionid=rev,customer='rspitm')
                    dell=0

                    for j in range(len(rspitmdobj)):
                        
                        for kill in range(int(numfy)):
                            dct={}
                            rspitmobj=annual_production.objects.filter(financial_year=yearlist[kill],revisionid=rev,customer='rspitm',loco_type=rspitmdobj[j].loco_type)
                            
                            v=rspitmobj[0].target_quantity
                            bq=rspitmobj[0].buffer_quantity

                            if len(v)==0:
                                v='-'

                            if len(bq)==0:
                                bq='-'
                            

                            dct["yrtq"]=v
                            dct["yrbq"]=bq
                            diiict[(str(kill))]=dct

                            

                            dct=None


                        dictname="dict"
                        myvar=myvar+1
                        temper = {str(myvar):{"loty":rspitmdobj[j].loco_type,
                                      "dict":diiict,
                                  
                                        }}

                        j=j+1
                        rspdictemper.update(copy.deepcopy(temper))


                if rspflag or rspitmflag :
                    data=1
            colsapn=int(cspan)+2

            context={"data":data,"data6":rspm,"data7":rspitm,"jpo":0,
              "years":years,"rspdictemper":rspdictemper,
            "rspflag":rspflag,"rspitmflag":rspitmflag,
            "colsapn":colsapn,"bufcspan":int(cspan),
            "rsprwspan":rsprwspan,"rspitmrwspan":rspitmrwspan,'jpoo':jpoo,'rev':rev,
            "year1":yr,"year2":yr2,"year3":yr3,"year4":yr4,
            "pre5":rm,"n5":r1+1,
            "pre6":ri,"n6":r2+1,
            'nav':nav,'rev':rev,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'dt':dt,'subject':sub,
            'total':total,'subnav':subnav,
            'namelist':namelist,'desiglist':desiglist,'cdgp':range(cdgp),
            'number':number,'subject':sub,'dt':dt,'remklist':remklist,
            'nrmllist':nrmllist,'revcnt':range(revcnt),
            }

        elif jpoo=="combined":
            

            if (finalize == "Submit") and (Finalize == "yes"):
                
                mainjp=jpo.objects.filter(financial_year=yr,revisionid=rev,jpo='main').update(finalval=1)
                
               
                rspjp=jpo.objects.filter(financial_year=yr,revisionid=rev,jpo='rsp').update(finalval=1)
            

            listname=['loty','yr1','yr2','yr3','yr4']



            jpoobj=jpo.objects.filter(financial_year=yr,revisionid=rev,jpo='main')
            jprsp=jpo.objects.filter(financial_year=yr,revisionid=rev,jpo='rsp')
            mainnumfy=0
            rspnumfy=0
            if len(jprsp):
                rspnumfy=int(jprsp[0].numyrs)
            if len(jpoobj):
                mainnumfy=int(jpoobj[0].numyrs)
                if mainnumfy>rspnumfy:
                    numfy=mainnumfy
                else:
                    numfy=rspnumfy
                cspan=numfy
                
                tod = date.today()
                ft=int(tod.strftime("%Y"))
                ft2=ft+1
                for lol in range(int(mainnumfy)):
                    yearlist.append(str(ft)+'-'+str(ft2))
                    ft=ft+1
                    ft2=ft2+1
                    indo=annual_production.objects.filter(financial_year=yearlist[lol],revisionid=rev,customer='ind-rail')
                    if len(indo)==0:
                        flag=0

                    elif len(indo)!=0 and indrwspan==0:
                        indrwspan=len(indo)+1
                        

                    nrco=annual_production.objects.filter(financial_year=yearlist[lol],revisionid=rev,customer='nrc')
                    if len(nrco)==0:
                        nrcflag=0
                    elif len(nrco)!=0 and nrcrwspan==0:
                        nrcrwspan=len(nrco)+1
                        

                    expo=annual_production.objects.filter(financial_year=yearlist[lol],revisionid=rev,customer='export')
                    if len(expo)==0:
                        expflag=0

                    elif len(expo)!=0 and exprwspan==0:
                        exprwspan=len(expo)+1

                    zro=annual_production.objects.filter(financial_year=yearlist[lol],revisionid=rev,customer='zr')
                    if len(zro)==0:
                        zrflag=0

                    elif len(zro)!=0 and zrrwspan==0:
                        zrrwspan=len(zro)+1


                    zrov=annual_production.objects.filter(financial_year=yearlist[lol],revisionid=rev,customer='zrover')
                    if len(zrov)==0:
                        zroverflag=0

                    elif len(zrov)!=0 and zroverrwspan==0:
                        zroverrwspan=len(zrov)+1

                    zraso=annual_production.objects.filter(financial_year=yearlist[lol],revisionid=rev,customer='zrasstn')
                    if len(zraso)==0:
                        zrasflag=0

                    elif len(zraso)!=0 and zrasrwspan==0:
                        zrasrwspan=len(zraso)+1

                    nrcdgo=annual_production.objects.filter(financial_year=yearlist[lol],revisionid=rev,customer='nrcdgset')
                    if len(nrcdgo)==0:
                        nrcdgflag=0
                    elif len(nrcdgo)!=0 and nrcdgrwspan==0:
                        nrcdgrwspan=len(nrcdgo)+1
                for yrs in range(int(numfy)):

                    temr = {str(yrs):{"yrs":yearlist[yrs],}}

                    years.update(copy.deepcopy(temr))




                if flag:
                    indobj=annual_production.objects.filter(financial_year=yearlist[0],revisionid=rev,customer='ind-rail')
                    dell=0

                    for j in range(len(indobj)):
                        
                        for kill in range(int(numfy)):
                            dct={}
                            inobj=annual_production.objects.filter(financial_year=yearlist[kill],revisionid=rev,customer='ind-rail',loco_type=indobj[j].loco_type)
                            
                            if len(inobj)==0:
                                v='-'
                                bq='-'
                            else:
                                v=inobj[0].target_quantity
                                bq=inobj[0].buffer_quantity

                                if len(v)==0:
                                    v='-'

                                if len(bq)==0:
                                    bq='-'


                            dct["yrtq"]=v
                            dct["yrbq"]=bq
                            diiict[(str(kill))]=dct

                            

                            dct=None

                        dictname="dict"
                        temper = {str(j):{"loty":indobj[j].loco_type,"dict":diiict,}}
                       
                       
                        dictemper.update(copy.deepcopy(temper))
                        j=j+1

                    for kill in range(int(numfy)):

                        for j in range(len(indobj)):
                            if(dictemper[str(j)]['dict'][str(kill)]['yrtq']!='-'):
                                art=dictemper[str(j)]['dict'][str(kill)]['yrtq']
                                artl=[ord(cc) for cc in art]
                                
                                tr=[]
                                l=[48,49,50,51,52,53,54,55,56,57]
                                for p in range(len(artl)):
                                    if artl[p] in l:
                                        tr.append(artl[p])
                                s=''.join(chr(artl[d]) for d in range(len(tr)) )
                                tot=tot+int(s)
                        tottq.append(tot)
                        tot=0
                        tottemper = {str(kill):{"totq":tottq[kill],
                                      
                                        }}

                        total.update(copy.deepcopy(tottemper))

                    tottq=[]



                if nrcflag:
                    nrcdobj=annual_production.objects.filter(financial_year=yearlist[0],revisionid=rev,customer='nrc')
                    dell=0

                    for j in range(len(nrcdobj)):
                        
                        for kill in range(int(numfy)):
                            dct={}
                            nrcobj=annual_production.objects.filter(financial_year=yearlist[kill],revisionid=rev,customer='nrc',loco_type=nrcdobj[j].loco_type)
                            if len(nrcobj)!=0:
                                v=nrcobj[0].target_quantity
                                bq=nrcobj[0].buffer_quantity

                                if len(v)==0:
                                    v='-'

                                if len(bq)==0:
                                    bq='-'
                            else:
                                v='-'
                                bq='-'
                            

                            dct["yrtq"]=v
                            dct["yrbq"]=bq
                            diiict[(str(kill))]=dct

                            

                            dct=None

                        temper = {str(j):{"loty":nrcdobj[j].loco_type,
                                      "dict":diiict,
                                  
                                        }}

                       

                        j=j+1
                       
                        nrcdictemper.update(copy.deepcopy(temper))

                    for kill in range(int(numfy)):

                        for j in range(len(nrcdobj)):
                            if(nrcdictemper[str(j)]['dict'][str(kill)]['yrtq']!='-'):
                                if len(total.keys()) and j==0:
                                    tot=int(total[str(kill)]['totq'])
                                art=nrcdictemper[str(j)]['dict'][str(kill)]['yrtq']
                                artl=[ord(cc) for cc in art]
                                
                                tr=[]
                                l=[48,49,50,51,52,53,54,55,56,57]
                                for p in range(len(artl)):
                                    if artl[p] in l:
                                        tr.append(artl[p])
                                s=''.join(chr(artl[d]) for d in range(len(tr)) )
                                tot=tot+int(s)
                            else:
                                tot=int(total[str(kill)]['totq'])
                        tottq.append(tot)
                        tot=0
                        tottemper = {str(kill):{"totq":tottq[kill],
                                      
                                        }}

                        total.update(copy.deepcopy(tottemper))

                    tottq=[]
                    




                if expflag:
                    expdobj=annual_production.objects.filter(financial_year=yearlist[0],revisionid=rev,customer='export')
                    dell=0

                    for j in range(len(expdobj)):
                        
                        for kill in range(int(numfy)):
                            dct={}
                            expobj=annual_production.objects.filter(financial_year=yearlist[kill],revisionid=rev,customer='export',loco_type=expdobj[j].loco_type)
                            
                            if len(expobj)!=0:
                                v=expobj[0].target_quantity
                                bq=expobj[0].buffer_quantity

                                if len(v)==0:
                                    v='-'

                                if len(bq)==0:
                                    bq='-'
                            else:
                                v='-'
                                bq='-'
                            

                            dct["yrtq"]=v
                            dct["yrbq"]=bq
                            diiict[(str(kill))]=dct

                            

                            dct=None

                        temper = {str(j):{"loty":expdobj[j].loco_type,
                                      "dict":diiict,}}                 

                        j=j+1
                       
                        expdictemper.update(copy.deepcopy(temper))


                    for kill in range(int(numfy)):

                        for j in range(len(expdobj)):
                            if(expdictemper[str(j)]['dict'][str(kill)]['yrtq']!='-'):
                                if len(total.keys()) and j==0:
                                    tot=int(total[str(kill)]['totq'])
                                art=expdictemper[str(j)]['dict'][str(kill)]['yrtq']
                                artl=[ord(cc) for cc in art]
                                
                                tr=[]
                                l=[48,49,50,51,52,53,54,55,56,57]
                                for p in range(len(artl)):
                                    if artl[p] in l:
                                        tr.append(artl[p])
                                s=''.join(chr(artl[d]) for d in range(len(tr)) )
                                tot=tot+int(s)
                            else:
                                tot=int(total[str(kill)]['totq'])
                        tottq.append(tot)
                        tot=0
                        tottemper = {str(kill):{"totq":tottq[kill],
                                      
                                        }}

                        total.update(copy.deepcopy(tottemper))

                    tottq=[]
                if nrcdgflag:
                    nrcdgdobj=annual_production.objects.filter(financial_year=yearlist[0],revisionid=rev,customer='nrcdgset')
                    dell=0

                    for j in range(len(nrcdgdobj)):
                        
                        for kill in range(int(numfy)):
                            dct={}
                            nrcdgobj=annual_production.objects.filter(financial_year=yearlist[kill],revisionid=rev,customer='nrcdgset',loco_type=nrcdgdobj[j].loco_type)
                            
                            if len(nrcdgdobj)!=0:
                                v=nrcdgobj[0].target_quantity
                                bq=nrcdgobj[0].buffer_quantity

                                if len(v)==0:
                                    v='-'

                                if len(bq)==0:
                                    bq='-'
                            else:
                                v='-'
                                bq='-'
                            

                            dct["yrtq"]=v
                            dct["yrbq"]=bq
                            diiict[(str(kill))]=dct

                            

                            dct=None

                        temper = {str(j):{"loty":nrcdgdobj[j].loco_type,
                                      "dict":diiict,}}

                       

                        j=j+1
                       
                        nrcdgdictemper.update(copy.deepcopy(temper))

                if zrflag:
                    zrdobj=annual_production.objects.filter(financial_year=yearlist[0],revisionid=rev,customer='zr')
                    dell=0

                    for j in range(len(zrdobj)):
                        
                        for kill in range(int(numfy)):
                            dct={}
                            zrobj=annual_production.objects.filter(financial_year=yearlist[kill],revisionid=rev,customer='zr',loco_type=zrdobj[j].loco_type)
                            
                            if len(zrobj)==0:
                                v='-'
                                bq='-'
                            else:
                                v=zrobj[0].target_quantity
                                bq=zrobj[0].buffer_quantity

                                if len(v)==0:
                                    v='-'

                                if len(bq)==0:
                                    bq='-'
                            

                            dct["yrtq"]=v
                            dct["yrbq"]=bq
                            diiict[(str(kill))]=dct

                            

                            dct=None

                        temper = {str(j):{"loty":zrdobj[j].loco_type,
                                      "dict":diiict,}}                 

                        j=j+1
                       
                        zrdictemper.update(copy.deepcopy(temper))



                if zroverflag:
                    zrovdobj=annual_production.objects.filter(financial_year=yearlist[0],revisionid=rev,customer='zrover')
                    dell=0

                    for j in range(len(zrovdobj)):
                        
                        for kill in range(int(numfy)):
                            dct={}
                            zrovobj=annual_production.objects.filter(financial_year=yearlist[kill],revisionid=rev,customer='zrover',loco_type=zrovdobj[j].loco_type)
                            
                            if len(zrovdobj)==0:
                                v='-'
                                bq='-'
                            else:
                                v=zrovobj[0].target_quantity
                                bq=zrovobj[0].buffer_quantity

                                if len(v)==0:
                                    v='-'

                                if len(bq)==0:
                                    bq='-'
                            

                            dct["yrtq"]=v
                            dct["yrbq"]=bq
                            diiict[(str(kill))]=dct

                            

                            dct=None

                        temper = {str(j):{"loty":zrovdobj[j].loco_type,
                                      "dict":diiict,
                                  
                                        }}                 

                        j=j+1
                       
                        zroverdictemper.update(copy.deepcopy(temper))

                if zrasflag:
                    zrasdobj=annual_production.objects.filter(financial_year=yearlist[0],revisionid=rev,customer='zrasstn')
                    dell=0

                    for j in range(len(zrasdobj)):
                        
                        for kill in range(int(numfy)):
                            dct={}
                            zrasobj=annual_production.objects.filter(financial_year=yearlist[kill],revisionid=rev,customer='zrasstn',loco_type=zrasdobj[j].loco_type)
                            
                            if len(zrasobj)==0:
                                v='-'
                                bq='-'
                            else:
                                v=zrasobj[0].target_quantity
                                bq=zrasobj[0].buffer_quantity

                                if len(v)==0:
                                    v='-'

                                if len(bq)==0:
                                    bq='-'
                            

                            dct["yrtq"]=v
                            dct["yrbq"]=bq
                            diiict[(str(kill))]=dct

                            dct=None

                        temper = {str(j):{"loty":zrasdobj[j].loco_type,
                                      "dict":diiict,}}                 

                        j=j+1
                       
                        zrasdictemper.update(copy.deepcopy(temper))


                tod = date.today()
                ft=int(tod.strftime("%Y"))
                ft2=ft+1
                for lol in range(int(rspnumfy)):
                    yearlist.append(str(ft)+'-'+str(ft2))
                    ft=ft+1
                    ft2=ft2+1
                    rspo=annual_production.objects.filter(financial_year=yearlist[lol],revisionid=rev,customer='rspm')
                    if len(rspo)==0:
                        rspflag=0

                    elif len(rspo)!=0 and rsprwspan==0:
                        rsprwspan=len(rspo)+1
                        

                    rspitmo=annual_production.objects.filter(financial_year=yearlist[lol],revisionid=rev,customer='rspitm')
                    if len(rspitmo)==0:
                        rspitmflag=0
                    elif len(rspitmo)!=0 and rspitmrwspan==0:
                        rspitmrwspan=len(rspitmo)+1



                for yrs in range(int(numfy)):

                    temr = {str(yrs):{"yrs":yearlist[yrs],}}


                    years.update(copy.deepcopy(temr))





                if rspflag:
                    rspdobj=annual_production.objects.filter(financial_year=yearlist[0],revisionid=rev,customer='rspm')
                    dell=0

                    for j in range(len(rspdobj)):
                        
                        for kill in range(int(numfy)):
                            dct={}
                            rspobj=annual_production.objects.filter(financial_year=yearlist[kill],revisionid=rev,customer='rspm',loco_type=rspdobj[j].loco_type)
                            if len(rspobj)==0:
                                v='-'
                                bq='-'
                            else:
                                v=rspobj[0].target_quantity
                                bq=rspobj[0].buffer_quantity

                                if len(v)==0:
                                    v='-'

                                if len(bq)==0:
                                    bq='-'
                            

                            dct["yrtq"]=v
                            dct["yrbq"]=bq
                            diiict[(str(kill))]=dct

                            

                            dct=None


                        dictname="dict"
                        temper = {str(j):{"loty":rspdobj[j].loco_type,
                                      "dict":diiict,}}
                       

                        j=j+1
                       
                        rspdictemper.update(copy.deepcopy(temper))


                if rspitmflag:
                    rspitmdobj=annual_production.objects.filter(financial_year=yearlist[0],revisionid=rev,customer='rspitm')
                    dell=0

                    for j in range(len(rspitmdobj)):
                        
                        for kill in range(int(numfy)):
                            dct={}

                            rspitmobj=annual_production.objects.filter(financial_year=yearlist[kill],revisionid=rev,customer='rspitm',loco_type=rspitmdobj[j].loco_type)
                            if len(rspitmobj)==0:
                                v='-'
                                bq='-'
                            else:
                                v=rspitmobj[0].target_quantity
                                bq=rspitmobj[0].buffer_quantity

                                if len(v)==0:
                                    v='-'

                                if len(bq)==0:
                                    bq='-'
                            

                            dct["yrtq"]=v
                            dct["yrbq"]=bq
                            diiict[(str(kill))]=dct

                            

                            dct=None


                        dictname="dict"
                        temper = {str(j):{"loty":rspitmdobj[j].loco_type,
                                      "dict":diiict,}}

                        j=j+1
                       
                        rspitmdictemper.update(copy.deepcopy(temper))
            if flag or nrcflag or expflag or zrflag or zroverflag or rspflag or rspitmflag or nrcdgflag or zrasflag:
                data=1


            maijp=jpo.objects.filter(financial_year=yr,revisionid=rev,jpo='main')
            if len(maijp)!=0:
                finalvalue=maijp[0].finalval



            lidict={0:'loty',1:'yr1',2:'yr3',3:'yr4'}
            colsapn=int(cspan)+2
            if rev==0:
                heading="Production Programme for "
            else:
                heading="Revised Production Programme for "
            for kt,v in years.items():
                heading=heading+str(v['yrs'])+", "
            heading=heading+" is indicated below :"

            jpoobj=jpo.objects.filter(financial_year=yr,revisionid=rev,jpo='main')
            if len(jpoobj):
                numfy=jpoobj[0].numyrs
                cspan=numfy
                dt=jpoobj[0].date
                sub=jpoobj[0].subject
                numfy=jpoobj[0].numyrs
                ref=jpoobj[0].reference
                mjalt=jpoobj[0].majoralt
                formno=jpoobj[0].formno
                number=jpoobj[0].number
                headalt=jpoobj[0].headmjr
                if ref is not None:
                    reflist=findthis(request,ref)
                if mjalt is not None:
                    altrlist=findthis(request,mjalt)
            jpob=jpo.objects.filter(financial_year=yr,revisionid=rev,jpo='main')
            jpoc=jpo.objects.filter(financial_year=yr,revisionid=rev,jpo='rsp')
            if len(jpob):
                remk1=jpob[0].remark
            if len(jpoc):
                remk2=jpoc[0].remark
            spclremlist=[]
            nrmllist=[]
            if remk1 is not None:
                remklist=findthis(request,remk1)
            for str2 in remklist:
                if len(str2.split('$'))>1:
                    spclremlist.append(str2)
                elif len(str2.split('*'))>1:
                    spclremlist.append(str2)
                else:
                    nrmllist.append(str2)
            if remk2 is not None:
                remklist=findthis(request,remk2)
            for str2 in remklist:
                if len(str2.split('$'))>1:
                    spclremlist.append(str2)
                elif len(str2.split('*'))>1:
                    spclremlist.append(str2)
                else:
                    nrmllist.append(str2)

            context={
            "data":data,"data2":datadic,"data3":nrc,"data4":exp,"data5":dgs,"data8":zrzr,"data9":zozo,"jpo":2,"rev":rev,"jpoo":jpoo,"finalvalue":finalvalue,
            "listname":listname,"lidict":lidict,
            "years":years,"dictemper":dictemper,"nrcdictemper":nrcdictemper,"expdictemper":expdictemper,"zrdictemper":zrdictemper,"zroverdictemper":zroverdictemper,"zrasdictemper":zrasdictemper,
            "nrcdgdictemper":nrcdgdictemper,"nrcdgflag":nrcdgflag,"zrasflag":zrasflag,
            "nrcflag":nrcflag,"flag":flag,"expflag":expflag,"zrflag":zrflag,"zroverflag":zroverflag,

            "colsapn":colsapn,"bufcspan":int(cspan),
            "nrcrwspan":nrcrwspan,"nrcdgrwspan":nrcdgrwspan,"indrwspan":indrwspan,"exprwspan":exprwspan,"zrrwspan":zrrwspan,"zroverrwspan":zroverrwspan,"zrasrwspan":zrasrwspan,
            "total":total,
            "rspdictemper":rspdictemper,"rspitmdictemper":rspitmdictemper,
            "rspflag":rspflag,"rspitmflag":rspitmflag,
            "colsapn":colsapn,"bufcspan":int(cspan),
            "rsprwspan":rsprwspan,"rspitmrwspan":rspitmrwspan,'jpoo':jpoo,'rev':rev,
            "year1":yr,"year2":yr2,"year3":yr3,"year4":yr4,
            "toty1":ty1,"toty2":ty2,"toty3":ty3,"toty4":ty4,
            "pre":f,"n":j+1,'headalt':headalt,
            "pre2":nr,"n2":k+1,
            "pre3":ex,"n3":e+1,
            "pre4":dg,"n4":d+1,
            "pre7":zr,"n7":z+1,
            "pre8":zo,"n8":z2+1,
            'nav':nav,'dt':dt,'subject':sub,'rev':rev,
            'usermaster':usermaster,'ip':get_client_ip(request),
            'total':total,'subnav':subnav,
            'namelist':namelist,'desiglist':desiglist,'cdgp':range(cdgp),
            'number':number,'formno':formno,'subject':sub,'dt':dt,'heading':heading,
            'reflist':reflist,'altrlist':altrlist,'remklist':remklist,'spclremlist':spclremlist,
            'nrmllist':nrmllist,'revcnt':range(revcnt),
            }

        else:
            context={'nav':nav,'dt':dt,'subject':sub,'revcnt':range(revcnt),
            
        'usermaster':usermaster,'subnav':subnav,
        'ip':get_client_ip(request),
        'revision':rev,'namelist':namelist,'desiglist':desiglist,'cdgp':range(cdgp),}

 
    return render(request,"jpoc.html",context)


def loco(request):
    from .models import loconame
    lcname=[]
    objy=loconame.objects.all()
    for o in objy:
        if (o.loconame):
            lcname.append(o.loconame)
    return lcname

def material(request):
    from .models import materialname
    lcname=[]
    objy=materialname.objects.all()
    for o in objy:
        if (o.matrname):
            lcname.append(o.matrname)
    return lcname

def findthis(request,temp):
    templist=[]
    asci=temp
    ascil=[ord(cc) for cc in asci]
    thr=[]
    for i in range(len(ascil)):
        if ascil[i]==13:
            thr.append(i)
    k=0
    for i in range(len(thr)):
        s=''.join(chr(ascil[d]) for d in range(k,thr[i]))
        lis=[13,10]
        if len(s)>0 and s!=''.join(chr(i) for i in lis):
            k=thr[i]+2
            templist.append(s)
    s=''.join(chr(ascil[d]) for d in range(k,len(ascil)))
    if len(s)>0:
        templist.append(s)
    return templist



def getYrDgp(request):
    from .models import jpo
    if request.method == "GET" and request.is_ajax():
        num=0
        dgp=0
       
        typec=request.GET.get('username')
        if typec=='ind-rail' or typec=='nrc' or typec=='export' or typec=='nrcdgset' or typec=='zr' or typec=='zrover' or typec=='zrasstn':
            jpot='main'
        else:
            jpot='rsp'
        try:
            rev=request.GET.get('revex')
            emp=jpo.objects.filter(jpo=jpot,revisionid=rev).first()


        except:
            return JsonResponse({"success":False}, status=400)
       
        if emp is not None:
            num=emp.numyrs
            dgp=emp.numdgp
        
        jpo_info={
             "numfy":num,
             "dgp":dgp
         }
        
        return JsonResponse({"jpo_info":jpo_info}, status=200)

    return JsonResponse({"success":False}, status=400)

def checktotal(request):
    from .models import jpo,annual_production,dpo
    if request.method == "GET" and request.is_ajax():
        loco=request.GET.get('loconame')
        b2=request.GET.get('barl2')
        
        total=0
        try:
            obj=dpo.objects.filter(loco_type=loco,order_no=b2)
            if(len(obj)):
                total=obj[0].total_count
            
        except:
            return JsonResponse({"success":False}, status=400)
   
        dpo_info={
            "total":total,
        }
        return JsonResponse({"dpo_info":dpo_info}, status=200)

    return JsonResponse({"success":False}, status=400)



def checkloco(request):
    from .models import jpo,annual_production
    if request.method == "GET" and request.is_ajax():
        lcname=request.GET.get('vdp')
        flag=0
        try:
            emp=annual_production.objects.filter(loco_type=lcname).exists()
            if emp is True:
                flag=1
        except:
            return JsonResponse({"success":False}, status=400)
        jpo_info={
            "flag":flag,
        }
        return JsonResponse({"jpo_info":jpo_info}, status=200)

    return JsonResponse({"success":False}, status=400)


def test(request):
    if request.method == "POST":
        obj = testing_purpose.objects.create()
        obj.first = request.POST.get('firstinp')
        obj.second = request.POST.get('secondinp')
        obj.save()
    return render(request,'test.html',{})






@login_required
def dpo(request):
    from .models import annual_production

    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)

     

    tod = date.today()
    ft=int(tod.strftime("%Y"))
    ft2=ft+1
    ctp=str(ft)+'-'+str(ft2)

    locos=[]

    obj=annual_production.objects.filter(financial_year=ctp)

    for i in range(0,len(obj)):
        locos.append(obj[i].loco_type)
    


    context={
        'nav':nav,
        'ip':get_client_ip(request),
        'Role':rolelist[0],
        'cyear':ctp,
        'add':0,
        'locolist':locos,
        'subnav':subnav,
    }

    if request.method=="POST":
        submit=request.POST.get('submit')
        locos=[]
        obj=annual_production.objects.filter(financial_year=ctp)
        for i in range(0,len(obj)):
            locos.append(obj[i].loco_type)
        if submit=='Proceed':
            b1=0
            flag=0
            locos=[]
            obj=annual_production.objects.filter(financial_year=ctp)
            for i in range(0,len(obj)):
                locos.append(obj[i].loco_type)
            loco=request.POST.get('loco')
            b2=request.POST.get('barl2')
            tc=request.POST.get('tc')
            num=(int(tc)-1) // 5
            mod=(int(tc)-1) % 5
            if(num>9):
                flag=1
            if loco=='WAP10' or loco=='WAP11' or loco=='WAP-7 ELECTRIC LOCO' or loco=='WAP-9 ELECTRIC LOCO':
                b1=33
            bno=str(b1)+'/'+str(b2)+'/'


            context={
            'nav':nav,
            'ip':get_client_ip(request),
            'Role':rolelist[0],
            'cyear':ctp,
            'b1':b1,
            'b2':b2,
            'tc':tc,
            'bno':bno,
            'ranl9':range(2,num+2),
            'ran':range(2,10),
            'ran2':range(10,num+2),
            'flag':flag,
            'num':num,
            'mod':mod,
            'two':num+2,
            'cm':225,
            'lcname':loco,
            'add':1,
            'locolist':locos,
            'subnav':subnav,

        } 

        if submit=='Save':
            context={
            'nav':nav,
            'ip':get_client_ip(request),
            'Role':rolelist[0],
            'locolist':locos,
            'cyear':ctp,
            'subnav':subnav,

            

        } 



    return render(request, 'dpo.html', context)









@login_required
@role_required(urlpass='/dpoinput/')
def dpoinput(request):
    
    from .models import annual_production,barrelfirst,dpo,dpoloco,jpo
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    tod = date.today()
    ft=int(tod.strftime("%Y"))
    ft2=ft+1
    ctp=str(ft)+'-'+str(ft2)
    locos=[]
    locoindb=[]
    annulloco=[]
    obj=barrelfirst.objects.all()
    for i in range(0,len(obj)):
        locos.append(obj[i].locotype)
    context={
        'nav':nav,
        'subnav':subnav,
        'ip':get_client_ip(request),
        'Role':rolelist[0],
        'cyear':ctp,
        'add':0,
        'locolist':locos,
        'locoindb':locoindb,
        'annualloco':annulloco,
    }
    if request.method=="POST":
        subject=None
        reference=None
        copyto=None
        summary=None
        dat=None
        locoindb=[]
        dictemper={}
        dataext=0
        submit=request.POST.get('submit')
        if submit=='Proceed':
            b1=0
            loco=request.POST.get('loco')
            b2=request.POST.get('barl2')
            cm=225
            cm2=300
            obj1=barrelfirst.objects.filter(locotype=loco)
            b1=obj1[0].code
            
            args = jpo.objects.filter(financial_year=ctp,jpo='main') 
            ar=args.aggregate(Max('revisionid'))
            revisionidmax=ar['revisionid__max']
            annualobj=annual_production.objects.filter(financial_year=ctp,revisionid=revisionidmax)
            for l in range(len(annualobj)):
                annulloco.append(annualobj[l].loco_type)
            
            obj=dpo.objects.filter(locotype=loco,orderno=b2,procedureno=0)
            if (obj is not None) and len(obj):
                subject=obj[0].subject
                reference=obj[0].reference
                copyto=obj[0].copyto
                summary=obj[0].summary
                dat=obj[0].date
            objloco=dpoloco.objects.filter(locotype=loco,orderno=b2,procedureno=0).values('loconame').distinct()
            if (objloco is not None) and len(objloco):
                for l in range(len(objloco)):
                    locoindb.append(objloco[l]['loconame'])

                objlocobt=dpoloco.objects.filter(locotype=loco,orderno=b2,procedureno=0)
                if (objlocobt is not None) and len(objlocobt):
                    for l in range(len(objlocobt)):
                        bnoo=objlocobt[l].batchordno
                        ss=bnoo[0:2]+'/'+bnoo[2:5]+'/'+bnoo[5:8]
                        temper = {str(l):{"bno":ss,
                                           "qty":objlocobt[l].qtybatch,
                                           "cumino":objlocobt[l].cumino,
                                           "loconame":objlocobt[l].loconame,
                                           }}
                        dataext=dataext+1

                        dictemper.update(copy.deepcopy(temper))
                   
            context={
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'Role':rolelist[0],
            'cyear':ctp,
            'b1':b1,
            'b2':b2,
            'cm':cm,
            'cm2':cm2,
            'lcname':loco,
            'add':1,
            'locolist':locos,
            'locoindb':locoindb,
            'subject':subject,
            'reference':reference,
            'copyto':copyto,
            'summary':summary,
            'date':dat,
            'dictemper':dictemper,
            'dataext':dataext,
            'annualloco':annulloco,

        } 

        if submit=='Save':
            sub=request.POST.get('sub')
            refn=request.POST.get('refn')
            summary=request.POST.get('summary')
            copyto=request.POST.get('copyto')
            datee=request.POST.get('xTime')
            
            locot=request.POST.get('loco')
            ordno=request.POST.get('barl2')
            dataext=request.POST.get('dataext')
            totbaches=request.POST.get('totbaches')
            args = jpo.objects.filter(financial_year=ctp,jpo='main') 
            ar=args.aggregate(Max('revisionid'))
            revisionidmax=ar['revisionid__max']
            annualobj=annual_production.objects.filter(financial_year=ctp,revisionid=revisionidmax)
            for l in range(len(annualobj)):
                annulloco.append(annualobj[l].loco_type)
            dpopb=dpo.objects.filter(procedureno=0,locotype=locot,orderno=ordno)
            if dpopb is not None and len(dpopb):
                obj=dpo.objects.filter(procedureno=0,locotype=locot,orderno=ordno).update(subject=sub,reference=refn,date=datee,copyto=copyto,summary=summary)
                
            else:
                obj=dpo.objects.create()
                obj.subject=sub
                obj.reference=refn
                obj.date=datee
                obj.copyto=copyto
                obj.summary=summary
                obj.orderno=ordno
                obj.locotype=locot
                obj.save()
            temp1="loconame"
            idname=[]
            lcname=[]
            ttlcnt=request.POST.get('cm2')
            
            for i in range(1,int(dataext)+1):
                bno=request.POST.get("bno"+str(i))
           
                a=bno.split('/')
                s=""
                for ad in a:
                    s=s+ad
                qty=request.POST.get("qty"+str(i))
                typ=request.POST.get("typ"+str(i))               
                cumino=request.POST.get("cumino"+str(i))
                dpoloco.objects.filter(procedureno=0,locotype=locot,orderno=ordno,batchordno=s,loconame=typ).update(qtybatch=qty,cumino=cumino)
            
            
            for i in range(int(dataext)+1,int(totbaches)+1):
                 
                bno=request.POST.get("bno"+str(i))
         
                a=bno.split('/')
                s=""
                for ad in a:
                    s=s+ad
                qty=request.POST.get("qty"+str(i))
                typ=request.POST.get("typ"+str(i))               
                cumino=request.POST.get("cumino"+str(i))
                obj=dpoloco.objects.create()
                obj.loconame=typ
                obj.batchordno=s
                obj.qtybatch=qty
                obj.cumino=cumino
                obj.orderno=ordno
                obj.locotype=locot
                obj.save()
               
            context={
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'Role':rolelist[0],
            'cyear':ctp,
            'locolist':locos,
            'annualloco':annulloco,
            
        } 

    return render(request, 'dpof.html', context)










@login_required
@role_required(urlpass='/dporeport/')
def dporeport(request):
    from .models import annual_production,dpo,barrelfirst,dpoloco,jpo
    from django.db.models import Max
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)

     

    tod = date.today()
    ft=int(tod.strftime("%Y"))
    ft2=ft+1
    ctp=str(ft)+'-'+str(ft2)

    locos=[]
    reflist=[]

    obj=barrelfirst.objects.all()
    for i in range(0,len(obj)):
        locos.append(obj[i].locotype)
    


    context={
        'nav':nav,
        'ip':get_client_ip(request),
        'Role':rolelist[0],
        'cyear':ctp,
        'add':0,
        'locolist':locos,
        'subnav':subnav,
       
    }

    if request.method=="POST":

        pno=None
        pnonum=None


        subject=None
        reference=None
        copyto=None
        summary=None
        dat=None
        data=0
        locodisp=""
        procedureno=None
        locoindb=[]
        dictemper={}
        dataext=0
        procedure=0
        
        totproduction=0
        balance=0
        totproduced=0
        
        

        submit=request.POST.get('submit')
        finalsubmit=request.POST.get('finalize')
        locos=[]
        obj=barrelfirst.objects.all()
        for i in range(0,len(obj)):
            locos.append(obj[i].locotype)
        if submit=='Proceed':
            pord=request.POST.get('pord')


            b1=0
            loco=request.POST.get('loco')
            b2=request.POST.get('barl2')
            cm=225
            cm2=300
            

            procedure=pord

            if(pord!=None and  len(pord)):
                dloco=dpo.objects.filter(procedureno=pord)
                if(len(dloco) and dloco is not None):
                    loco=dloco[0].locotype
                    b2=dloco[0].orderno
                obj1=barrelfirst.objects.filter(locotype=loco)
                if (obj1 is not None) and len(obj1):
                    b1=obj1[0].code
                
                obj=dpo.objects.filter(locotype=loco,orderno=b2,procedureno=pord)
                if (obj is not None) and len(obj):
                    subject=obj[0].subject
                    reference=obj[0].reference
                    copyto=obj[0].copyto
                    summary=obj[0].summary
                    dat=obj[0].date
                    if(obj[0].procedureno=='0'):
                        procedureno=0
                    else:
                        procedureno=1

                    reflist=findthis(request,reference)
                objloco=dpoloco.objects.filter(locotype=loco,orderno=b2,procedureno=pord).values('loconame').distinct()
                if (objloco is not None) and len(objloco):
                    args = jpo.objects.filter(financial_year=ctp,jpo='main') 
                    ar=args.aggregate(Max('revisionid'))
                    revisionidmax=ar['revisionid__max']
                    lis=['WDM2','YDM4','G4D']
                    for l in range(len(objloco)):
                        locoindb.append(objloco[l]['loconame'])
                        annualobj=annual_production.objects.filter(financial_year=ctp,loco_type=locoindb[l]+" ELECTRIC LOCO",revisionid=revisionidmax)
                        if(annualobj is not None and len(annualobj)):
                            if annualobj[0].target_quantity=='-':
                                totproduction=totproduction+0
                            else:
                                
                                totproduction=totproduction+int(annualobj[0].target_quantity)
                   
                    objlocobt=dpoloco.objects.filter(locotype=loco,orderno=b2,procedureno=pord).order_by('id')
                    if (objlocobt is not None) and len(objlocobt):
                        for l in range(len(objlocobt)):

                            bnoo=objlocobt[l].batchordno
                            ss=bnoo[0:2]+'/'+bnoo[2:5]+'/'+bnoo[5:8]
                            temper = {str(l):{"bno":ss,
                                               "qty":objlocobt[l].qtybatch,
                                               "cumino":objlocobt[l].cumino,
                                               "loconame":objlocobt[l].loconame,
                                               }}
                            totproduced=totproduced+int(objlocobt[l].qtybatch)
                            dataext=dataext+1
                            dictemper.update(copy.deepcopy(temper))
                        data=1

            elif((loco!=None and  len(loco)) and (b2!=None and  len(b2))):
                obj1=barrelfirst.objects.filter(locotype=loco)
                b1=obj1[0].code
                
                obj=dpo.objects.filter(locotype=loco,orderno=b2,procedureno=0)
                if (obj is not None) and len(obj):
                    subject=obj[0].subject
                    reference=obj[0].reference
                    copyto=obj[0].copyto
                    summary=obj[0].summary
                    dat=obj[0].date
                    if(obj[0].procedureno=='0'):
                        procedureno=0
                    else:
                        procedureno=1

                    reflist=findthis(request,reference)
                objloco=dpoloco.objects.filter(locotype=loco,orderno=b2,procedureno=0).values('loconame').distinct()
                if (objloco is not None) and len(objloco):
                    args = jpo.objects.filter(financial_year=ctp,jpo='main') 
                    ar=args.aggregate(Max('revisionid'))
                    revisionidmax=ar['revisionid__max']
                    lis=['WDM2','YDM4','G4D']
                    for l in range(len(objloco)):
                        locoindb.append(objloco[l]['loconame'])
                        annualobj=annual_production.objects.filter(financial_year=ctp,loco_type=locoindb[l]+" ELECTRIC LOCO",revisionid=revisionidmax)
                        if(annualobj is not None and len(annualobj)):
                            if annualobj[0].target_quantity=='-':
                                totproduction=totproduction+0
                            else:
                                
                                totproduction=totproduction+int(annualobj[0].target_quantity)
                
                    for n in locoindb:
                        obt=dpoloco.objects.filter(locotype=loco,orderno=b2,loconame=n)
                        if obt is not None and len(obt):
                            for nn in range(len(obt)):
                                totproduced=totproduced+int(obt[nn].qtybatch)

                    objlocobt=dpoloco.objects.filter(locotype=loco,orderno=b2,procedureno=0).order_by('batchordno')
                    if (objlocobt is not None) and len(objlocobt):
                        for l in range(len(objlocobt)):

                            bnoo=objlocobt[l].batchordno
                            ss=bnoo[0:2]+'/'+bnoo[2:5]+'/'+bnoo[5:8]
                            temper = {str(l):{"bno":ss,
                                                   "qty":objlocobt[l].qtybatch,
                                                   "cumino":objlocobt[l].cumino,
                                                   "loconame":objlocobt[l].loconame,
                                                   }}
                          
                          
                          
                          
                          
                            dataext=dataext+1

                            dictemper.update(copy.deepcopy(temper))
                        data=1


            balance=totproduction-totproduced
            if balance==0:
                balance="NIL"
                
            context={
            'nav':nav,
            'ip':get_client_ip(request),
            'Role':rolelist[0],
            'cyear':ctp,
            'productionyear':ctp,
            'totproduction':totproduction,
            'balance':balance,
            'b1':b1,
            'b2':b2,
            'cm':cm,
            'cm2':cm2,
            'lcname':loco,
            'add':1,
            'locolist':locos,
            'subject':subject,
            'reference':reference,
            'copyto':copyto,
            'summary':summary,
            'date':dat,
            'dictemper':dictemper,
            'dataext':dataext,
            'data':data,
            'reflist':reflist,
            'finalvalue':procedureno,
            'procedure':procedure,
            'subnav':subnav,
        } 



        if finalsubmit == "Submit":
            
            pnonum=0
            b1=0
            loco=request.POST.get('loco')
            b2=request.POST.get('barl2')
            cm=225
            cm2=300
            obj1=barrelfirst.objects.filter(locotype=loco)
            b1=obj1[0].code


            objlocobt=dpoloco.objects.filter(locotype=loco,orderno=b2,procedureno=0)
            if (objlocobt is not None) and len(objlocobt):
                allobj = dpo.objects.all()
                maxobj=dpo.objects.aggregate(Max('procedureno'))
                if allobj is None or len(allobj)==0:
                    pnonum=547
                else:
                    pnonum=int(maxobj['procedureno__max'])+1



            
            obj=dpo.objects.filter(locotype=loco,orderno=b2,procedureno=0)
            if (obj is not None) and len(obj):
                subject=obj[0].subject
                reference=obj[0].reference
                copyto=obj[0].copyto
                summary=obj[0].summary
                dat=obj[0].date
                if(obj[0].procedureno=='0'):
                    procedureno=0
                else:
                    procedureno=1
                reflist=findthis(request,reference)
            objloco=dpoloco.objects.filter(locotype=loco,orderno=b2,procedureno=0).values('loconame').distinct()
            if (objloco is not None) and len(objloco):
                    args = jpo.objects.filter(financial_year=ctp,jpo='main') 
                    ar=args.aggregate(Max('revisionid'))
                    revisionidmax=ar['revisionid__max']
                    lis=['WDM2','YDM4','G4D']
                    for l in range(len(objloco)):
                        locoindb.append(objloco[l]['loconame'])
                        annualobj=annual_production.objects.filter(financial_year=ctp,loco_type=locoindb[l]+" ELECTRIC LOCO",revisionid=revisionidmax)
                        if(annualobj is not None and len(annualobj)):
                            if annualobj[0].target_quantity=='-':
                                totproduction=totproduction+0
                            else:
                                
                                totproduction=totproduction+int(annualobj[0].target_quantity)
                  
            if (objloco is not None) and len(objloco):
                for l in range(len(objloco)):
                    locoindb.append(objloco[l]['loconame'])

                objlocobt=dpoloco.objects.filter(locotype=loco,orderno=b2,procedureno=0)
                if (objlocobt is not None) and len(objlocobt):
                    for l in range(len(objlocobt)):
                        bnoo=objlocobt[l].batchordno
                        ss=bnoo[0:2]+'/'+bnoo[2:5]+'/'+bnoo[5:8]
                        temper = {str(l):{"bno":ss,
                                           "qty":objlocobt[l].qtybatch,
                                           "cumino":objlocobt[l].cumino,
                                           "loconame":objlocobt[l].loconame,
                                           }}
                        dataext=dataext+1

                        dictemper.update(copy.deepcopy(temper))

                    data=1

                    dpp=dpoloco.objects.filter(locotype=loco,orderno=b2,procedureno=0).update(procedureno=pnonum)
                    dpp=dpo.objects.filter(locotype=loco,orderno=b2,procedureno=0).update(procedureno=pnonum)

                    dpoop=dpoloco.objects.filter(locotype=loco,orderno=b2,procedureno=pnonum)
                    procedure=dpoop[0].procedureno
                


            balance=totproduction-totproduced
            if balance==0:
                balance="NIL"
            context={
                'dpono':1,
            
                'productionyear':ctp,
            'totproduction':totproduction,
            'balance':balance,
            
            'nav':nav,
            'ip':get_client_ip(request),
            'Role':rolelist[0],
            'cyear':ctp,
            'b1':b1,
            'b2':b2,
            'cm':cm,
            'cm2':cm2,
            'lcname':loco,
            'add':1,
            'locolist':locos,
            'subject':subject,
            'reference':reference,
            'copyto':copyto,
            'summary':summary,
            'date':dat,
            'dictemper':dictemper,
            'dataext':dataext,
            'data':data,
            'reflist':reflist,
            'finalvalue':procedureno,
            'procedure':procedure,
            'subnav':subnav,
        }





    return render(request, 'dporeport.html', context)



def getcumino(request):
    from .models import dpo,dpoloco
    l=[]
    b=[]
    if request.method == "GET" and request.is_ajax():
        cmno=0
        bnothr=0
       
        loco=request.GET.get('loco')
        locot=request.GET.get('locot')
        ordno=request.GET.get('ordno')
        try:
            emp=dpoloco.objects.filter(loconame=loco,locotype=locot,orderno=ordno)
            
            
        except:
            return JsonResponse({"success":False}, status=400)
       
        if emp is not None  and len(emp):
            cmno=412
            for i in range(len(emp)):
                p=emp[i].cumino
                l.append(int(p.split('-')[1]))
                
                bn=emp[i].batchordno
                b.append(bn)
            
            bnothr=str(max(b))
            bnothr=bnothr[5:8]
                
            cmno=max(l)+1
            
        else:
            if loco=='WAP-7':
                cmno=161
            elif loco=='WAG-9':
                cmno='001'
        
        dpo_info={
            "cumino":cmno,
            "bnothr":bnothr,
         }
        
        return JsonResponse({"dpo_info":dpo_info}, status=200)

    return JsonResponse({"success":False}, status=400)







@login_required
@role_required(urlpass='/m1view/')
def m1view(request):
    pa_no = empmast.objects.none()
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    part11=''
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    if "Superuser" in rolelist:
        tm=shop_section.objects.all()
        tmp=[]
        for on in tm:
            tmp.append(on.section_code)
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'ip':get_client_ip(request),
            'roles':tmp,
            'subnav':subnav
        }
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):
            req = Oprn.objects.all().filter(shop_sec=rolelist[i]).values('part_no').distinct()
            pa_no =pa_no | req
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'pa_no':pa_no,
            'roles' :rolelist,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
        }
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'ip':get_client_ip(request),
            'roles' :rolelist,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
        }
    if request.method == "POST":
        
        submitvalue = request.POST.get('proceed')
        shop_sec = request.POST.get('shop_sec')
        part_no = request.POST.get('part_nop')
        part11=part_no
        obj  = Oprn.objects.filter(part_no=part_no).values('opn', 'shop_sec', 'lc_no', 'des','pa','at','ncp_jbs',).order_by('shop_sec','opn')
        leng = obj.count()
        epcv=0
        ptcv=0
        rmpart=0
        obj3=Nstr.objects.filter(pp_part=part_no).values('epc','ptc','cp_part').distinct()
        if len(obj3):
            epcv=obj3[0]['epc']
            ptcv=obj3[0]['ptc']
            rmpart=obj3[0]['cp_part']
        if submitvalue=='Proceed':
            if "Superuser" in rolelist:
                tm=shop_section.objects.all()
                tmp=[]
                for on in tm:
                    tmp.append(on.section_code)
                context={
                    'sub': 1,
                    'lenm' :2,
                    'nav':nav,
                    'subnav':subnav,
                    'ip':get_client_ip(request),
                    'roles':tmp,
                    'len': leng,
                    'shop_sec': shop_sec,
                    'part_no': part_no,
                    'obj': obj,
                    'epcv':epcv,'ptcv':ptcv,'rmpart':rmpart,
                    'part':part11,
                }
            elif(len(rolelist)==1):
                lent=len(rolelist)
                for i in range(0,len(rolelist)):
                    req = Oprn.objects.all().filter(shop_sec=rolelist[i]).values('part_no').distinct()
                    pa_no =pa_no | req
                context = {
                    'sub': 1,
                    'lenm' :len(rolelist),
                    'pa_no':pa_no,
                    'roles' :rolelist,
                    'nav':nav,
                    'subnav':subnav,
                    'ip':get_client_ip(request),
                    'len': leng,
                    'shop_sec': shop_sec,
                    'part_no': part_no,
                    'obj': obj,'epcv':epcv,'ptcv':ptcv,'rmpart':rmpart,
                    'part':part11,
                }
            elif(len(rolelist)>1):
                context = {
                   'sub': 1,
                    'lenm' :len(rolelist),
                    'ip':get_client_ip(request),
                    'roles' :rolelist,
                    'nav':nav,
                    'subnav':subnav,
                    'ip':get_client_ip(request),
                    'len': leng,
                    'shop_sec': shop_sec,
                    'part_no': part_no,
                    'obj': obj,'epcv':epcv,'ptcv':ptcv,'rmpart':rmpart,
                    'part':part11,
                }
        
        if submitvalue=='Generate Report':
            part11=request.POST.get('h1')
            context = {
                    'lenm' :'',
                  
                    'roles' :'',
                    'nav':'',
                    'subnav':'',
                    'ip':'',
                    'sub': '',
                    'part_no': '',
                    'obj1':'',
                    'dtl':'',
                    'obj3':'',
                    'pttl':'',
                    'attl':'',
                    'dt':'d1',
                    'epcv':'',
                    'ptcv':'',
                    'rmpart':'',
                    'part':part11,
                }
            
            return render(request,"M1report.html",context)
    return render(request,"m1view.html",context)


def m1getpano(request):
    if request.method == "GET" and request.is_ajax():
        pano = list(Oprn.objects.filter(part_no__isnull=False).values('part_no').distinct())
        return JsonResponse(pano, safe = False)
    return JsonResponse({"success":False}, status=400)
    
def m1getshopsec(request):
    if request.method == "GET" and request.is_ajax():
        pano = list(shop_section.objects.values('section_code').distinct())
        return JsonResponse(pano, safe = False)
    return JsonResponse({"success":False}, status=400)

def m1genrept1(request):
    from .models import Part,Partalt,Nstr
    pa_no = empmast.objects.none()
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    part_no = request.POST.get('h1')
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    newob=list(Part.objects.all().values('partno').exclude(partno__isnull=True).distinct())
    if "Superuser" in rolelist:
        tm=shop_section.objects.all()
        tmp=[]
        for on in tm:
            tmp.append(on.section_code)
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'ip':get_client_ip(request),
            'roles':tmp,
            'subnav':subnav,
            'newob':newob,
        }
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):
            req = Oprn.objects.all().filter(shop_sec=rolelist[i]).values('part_no').distinct()
            pa_no =pa_no | req
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'pa_no':pa_no,
            'roles' :rolelist,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'newob':newob,
        }
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'ip':get_client_ip(request),
            'roles' :rolelist,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'newob':newob,
        }
    if request.method == "POST":
        submitvalue = request.POST.get('proceed')
        part_no = part_no
        if submitvalue=='Proceed':
            today = date.today()
            d1 = today.strftime("%d/%m/%Y")
            epcv=0
            ptcv=0
            rmpart=0
            obj=Part.objects.filter(partno=part_no).values('des','drgno','drg_alt','size_m','spec','weight','des').distinct()
            obj3=Nstr.objects.filter(pp_part=part_no).values('epc','ptc','cp_part').distinct()
            if len(obj3):
                epcv=obj3[0]['epc']
                ptcv=obj3[0]['ptc']
                rmpart=obj3[0]['cp_part']
                obj11=Part.objects.filter(partno=rmpart).values('des').distinct()
                if len(obj11):
                    rdes=obj11[0]['des']
            obj2 = Oprn.objects.filter(part_no=part_no).values('opn','shop_sec','lc_no','des','pa','at','ncp_jbs','lot','m5_cd','updt_dt').order_by('opn')
            patotal=0
            attotal=0
            if len(obj2):
                for op in obj2:
                    patotal=patotal+op['pa']
                    attotal=attotal+op['at']
            lst=str(patotal).split('.',1)
            h=int(lst[0])*100
            patotal=int(lst[1])+h
            m=str(patotal % 60).zfill(2)
            patotal=(str(int(patotal/60))+":"+m)
            lst=str(attotal).split('.',1)
            h=int(lst[0])*100
            attotal=int(lst[1])+h
            m=str(attotal % 60).zfill(2)
            attotal=(str(int(attotal/60))+":"+m)          
            if "Superuser" in rolelist:
                tm=shop_section.objects.all()
                tmp=[]
                for on in tm:
                    tmp.append(on.section_code)
                context={
                    'sub':1,
                    'lenm' :2,
                    'nav':nav,
                    'ip':get_client_ip(request),
                    'roles':tmp,
                    'subnav':subnav,
                    'part_no': part_no,
                    'obj1':obj,
                    'dtl':obj2,
                    'obj3':obj3,
                    'pttl':patotal,
                    'attl':attotal,
                    'dt':d1,
                    'epcv':epcv,'ptcv':ptcv,'rmpart':rmpart,
                    'rdes':rdes,
                    'prtno':part_no,
                }
            elif(len(rolelist)==1):
                for i in range(0,len(rolelist)):
                    req = Oprn.objects.all().filter(shop_sec=rolelist[i]).values('part_no').distinct()
                    pa_no =pa_no | req
                context = {
                    'lenm' :len(rolelist),
                    'pa_no':pa_no,
                    'roles' :rolelist,
                    'nav':nav,
                    'subnav':subnav,
                    'ip':get_client_ip(request),
                    'part_no': part_no,
                    'obj1':obj,
                    'dtl':obj2,
                    'obj3':obj3,
                    'pttl':patotal,
                    'attl':attotal,
                    'dt':d1,'sub': 1,
                    'epcv':epcv,'ptcv':ptcv,'rmpart':rmpart,
                    'rdes':rdes,
                    'prtno':part_no,
                }
            elif(len(rolelist)>1):
                context = {
                    'lenm' :len(rolelist),
                    'ip':get_client_ip(request),
                    'roles' :rolelist,
                    'nav':nav,
                    'subnav':subnav,
                    'ip':get_client_ip(request),
                    'sub': 1,
                    'part_no': part_no,
                    'obj1':obj,
                    'dtl':obj2,
                    'obj3':obj3,
                    'pttl':patotal,
                    'attl':attotal,
                    'dt':d1,
                    'epcv':epcv,'ptcv':ptcv,'rmpart':rmpart,
                    'rdes':rdes,
                    'prtno':part_no,
                }
        part_no = request.POST.get('hide1')
        if printpdf=='Print':
            today = date.today()
            d1 = today.strftime("%d/%m/%Y")
            epcv=0
            ptcv=0
            rmpart=0
            obj=Part.objects.filter(partno=part_no).values('des','drgno','drg_alt','size_m','spec','weight','des').distinct()
            obj3=Nstr.objects.filter(pp_part=part_no).values('epc','ptc','cp_part').distinct()
            rdes=''
            if len(obj3):
                epcv=obj3[0]['epc']
                ptcv=obj3[0]['ptc']
                rmpart=obj3[0]['cp_part']
                obj11=Part.objects.filter(partno=rmpart).values('des').distinct()
                if len(obj11):
                    rdes=obj11[0]['des']
            obj2 = Oprn.objects.filter(part_no=part_no).values('opn','shop_sec','lc_no','des','pa','at','ncp_jbs','lot','m5_cd','updt_dt').order_by('opn')
            patotal=0
            attotal=0
            if len(obj2):
                for op in obj2:
                    patotal=patotal+op['pa']
                    attotal=attotal+op['at']
            lst=str(patotal).split('.',1)
            h=int(lst[0])*100
            patotal=int(lst[1])+h
            m=str(patotal % 60).zfill(2)
            patotal=(str(int(patotal/60))+":"+m)
            lst=str(attotal).split('.',1)
            h=int(lst[0])*100
            attotal=int(lst[1])+h
            m=str(attotal % 60).zfill(2)
            attotal=(str(int(attotal/60))+":"+m)          
            if "Superuser" in rolelist:
                tm=shop_section.objects.all()
                tmp=[]
                for on in tm:
                    tmp.append(on.section_code)
                context={
                    'sub':1,
                    'lenm' :2,
                    'nav':nav,
                    'ip':get_client_ip(request),
                    'roles':tmp,
                    'subnav':subnav,
                    'part_no': part_no,
                    'obj1':obj,
                    'dtl':obj2,
                    'obj3':obj3,
                    'pttl':patotal,
                    'attl':attotal,
                    'dt':d1,
                    'epcv':epcv,'ptcv':ptcv,'rmpart':rmpart,
                    'rdes':rdes,
                    'prtno':part_no,
                }
            elif(len(rolelist)==1):
                for i in range(0,len(rolelist)):
                    req = Oprn.objects.all().filter(shop_sec=rolelist[i]).values('part_no').distinct()
                    pa_no =pa_no | req
                context = {
                    'lenm' :len(rolelist),
                    'pa_no':pa_no,
                    'roles' :rolelist,
                    'nav':nav,
                    'subnav':subnav,
                    'ip':get_client_ip(request),
                    'part_no': part_no,
                    'obj1':obj,
                    'dtl':obj2,
                    'obj3':obj3,
                    'pttl':patotal,
                    'attl':attotal,
                    'dt':d1,'sub': 1,
                    'epcv':epcv,'ptcv':ptcv,'rmpart':rmpart,
                    'rdes':rdes,
                    'prtno':part_no,
                }
            elif(len(rolelist)>1):
                context = {
                    'lenm' :len(rolelist),
                    'ip':get_client_ip(request),
                    'roles' :rolelist,
                    'nav':nav,
                    'subnav':subnav,
                    'ip':get_client_ip(request),
                    'sub': 1,
                    'part_no': part_no,
                    'obj1':obj,
                    'dtl':obj2,
                    'obj3':obj3,
                    'pttl':patotal,
                    'attl':attotal,
                    'dt':d1,
                    'epcv':epcv,'ptcv':ptcv,'rmpart':rmpart,
                    'rdes':rdes,
                    'prtno':part_no,
                }
            
            pdf = render_to_pdf('m1pdf.html', context)
            return HttpResponse(pdf, content_type='application/pdf')
        bckbtn=request.POST.get('backbutton')
        if bckbtn=='Back':
            return render(request,"m1view.html",{})
    return render(request,"M1report.html",context)

@login_required
@role_required(urlpass='/m5newview/')
def m5newview(request):
    cuser=request.user
    usermaster=user_master.objects.filter(emp_id=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    if "Superuser" in rolelist:
        tm=shop_section.objects.all()
        tmp=[]
        
        for on in tm:
            tmp.append(on.section_code)
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'ip':get_client_ip(request),
            'roles':tmp,
            'subnav':subnav,
        }

    if request.method == "POST":
        
        submitvalue = request.POST.get('proceed')
        if submitvalue=='Proceed':
            shop_sec = request.POST.get('shop_sec')
            part_no = request.POST.get('part_nop')
            wo_no = request.POST.get('wo_no')
            brn_no = request.POST.get('br_no')
            doc_no = request.POST.get('doc_no')
            res = [int(x) for x in str(wo_no)] 

            s = [str(i) for i in res] 
            workorder = int("".join(s)) 
            obj1 = M5Docnew1.objects.filter(batch_no=wo_no,shop_sec=shop_sec, part_no=part_no,brn_no=brn_no,m5glsn=doc_no).values('opn','n_shopsec','rm_partno','cut_shear','pr_shopsec','n_shopsec','l_fr','l_to','qty_insp','inspector','date','remarks','worker','m2slno','qty_ord','m5prtdt','rm_ut','rm_qty','tot_rm_qty','rej_qty','rev_qty','lc_no','pa','at','opn_desc').distinct()
            obj2 = Part.objects.filter(partno=part_no).values('drgno','des','partno').order_by('partno').distinct()
            obj3 = Batch.objects.filter(bo_no=workorder,brn_no=brn_no,b_close_dt__isnull=True).values('part_no').distinct()
            obj4 = M5SHEMP1.objects.filter(shopsec=shop_sec).values('shopsec','staff_no','in_date','flag','name','cat','in1','out','ticket_no','month_hrs','total_time_taken','out_date','in_date','shift_typename').distinct()
            obj5 = M5SHEMP1.objects.filter(shopsec=shop_sec).values('shopsec','staff_no','name','ticket_no','flag').distinct()
            obj6  = Oprn.objects.filter(shop_sec=shop_sec,part_no=part_no).values('qtr_accep','mat_rej').exclude(qtr_accep=None,mat_rej=None).distinct()
            obj10= Batch.objects.filter(bo_no=workorder).values('batch_type','loco_fr','loco_to')
            if len(obj10)!=0:
                obj10=[{'batch_type':obj10[0]['batch_type'],'loco_fr':obj10[0]['loco_fr'],'loco_to':obj10[0]['loco_to']}]
            else:
                obj10=[{'batch_type':'','loco_fr':'','loco_to':''}]
            leng=0
            leng5=0
            leng9=0
            obj=0
            obj7=0
            obj9=0
            if len(obj1):
                raw_mat= obj1[0]['rm_partno']
                opn= obj1[0]['opn']
                obj7 = Part.objects.filter(partno=raw_mat).values('des').distinct()
                obj  = Oprn.objects.filter(part_no=part_no,opn=opn).values('ncp_jbs').distinct()
                leng = obj.count()
                leng5=obj7.count()
            if len(obj3):
                end_part=obj3[0]['part_no']
                obj9 = Part.objects.filter(partno=end_part).values('des').distinct()
                leng9=obj9.count()

            obj8 = M5SHEMP1.objects.filter(shopsec=shop_sec).values('flag').distinct()
            staff=5548
            rr=0

            staff=M5SHEMP.objects.filter(shopsec=shop_sec).values('staff_no').exclude(staff_no__isnull=True).distinct()
           
            prtstaff=[]
            for i in staff:
              prtstaff.append(i['staff_no'])
            ticket= randint(1111,9999)
           
            leng1=obj1.count()
            leng2=obj2.count()
            leng3=obj3.count()
            leng4=obj4.count()
           
            leng7=obj5.count()
            leng6=obj6.count()
           
            leng8=obj8.count()
            
            
            if obj != None:
                if "Superuser" in rolelist:
                    tm=M5SHEMP.objects.all().values('shopsec').distinct()
                    tmp=[]
                    for on in tm:
                        tmp.append(on['shopsec'])
                    context={
                        'lenm' :2,
                        'nav':nav,
                        'ip':get_client_ip(request),
                        'roles':tmp,
                        'obj': obj,
                        'obj1':obj1,
                        'obj2':obj2,
                        'obj3':obj3,
                        'obj4':obj4,
                        'obj7':obj7,
                        'obj5':obj5,
                        'obj6' :obj6,
                        'obj8':obj8,
                        'obj9':obj9,
                        'obj10':obj10,
                        'len9':leng9,
                        'len8':leng8,
                        'ticket1':ticket,
                        'rr':rr,
                        'sub': 1,
                        'len': leng,
                        'len1':leng1,
                        'len2':leng2,
                        'len3':leng3,
                        'len4':leng4,
                        'len5':leng5,
                        'len6':leng6,
                        'len7':leng7,
                        'shop_sec': shop_sec,
                        'part_no': part_no,
                        'wo_no': wo_no,
                        'brn_no': brn_no,
                        'doc_no': doc_no,
                        'prtstaff':prtstaff,
                        'subnav':subnav,
                    } 
        if submitvalue=='submit':
            leng=request.POST.get('len')
            shopsec= request.POST.get('shop_sec')
            partno= request.POST.get('partno')
            brn_no = request.POST.get('brn_no')
            inoutnum=request.POST.get("inoutnum")
            len4=request.POST.get('len4')
            qty_insp = request.POST.get('qty_insp')
            inspector = request.POST.get('inspector')
            date = request.POST.get('date')
            remarks = request.POST.get('remarks')
            rev_qty=request.POST.get('rev_qty')
            rej_qty=request.POST.get('rej_qty')
            worker=request.POST.get('worker')
            qty_acc=request.POST.get('qtyac')
            mat_rej=request.POST.get('mat_rej')
            
            M5Docnew1.objects.filter(shop_sec=shopsec,part_no=partno,brn_no=brn_no).update(qty_insp=str(qty_insp),inspector=str(inspector),date=str(date),remarks=str(remarks),rev_qty=str(rev_qty),rej_qty=str(rej_qty),worker=str(worker),acc_qty=str(qty_acc),rej_mat=str(mat_rej))           
            len4=request.POST.get('len4')
            
            for i in range(int(len4)+1, int(inoutnum)+1):
                in1 = request.POST.get('in1add'+str(i))
                out = request.POST.get('outadd'+str(i))
                lc_no = request.POST.get('lc_no'+str(i))
                cat = request.POST.get('catadd'+str(i))
                staff_no = request.POST.get('staff_noadd'+str(i))
                staff_name = request.POST.get('staff_nameadd'+str(i))
                ticket_no = request.POST.get('ticket_noadd'+str(i))
                month_hrs = request.POST.get('month_hrsadd'+str(i))
                total_time_taken = request.POST.get('total_time_takenadd'+str(i))
                in_date = request.POST.get('in_date'+str(i))
                out_date = request.POST.get('out_date'+str(i))
                shift = request.POST.get('shiftadd'+str(i))
                
                if len(cat)==1:
                    cat="0"+cat
                M5SHEMP1.objects.create(shopsec=shopsec,staff_no=str(staff_no),name=str(staff_name),in1=str(in1),out=str(out),month_hrs=int(month_hrs),total_time_taken=str(total_time_taken),cat=str(cat),in_date=str(in_date),out_date=str(out_date),ticket_no=int(ticket_no),shift_typename=str(shift))
            messages.success(request, 'Successfully Updated!, Select new values to update')

    return render(request,"m5newview.html",context)
def m5getwono(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        wono = list(M5Docnew1.objects.filter(shop_sec = shop_sec).values('batch_no').exclude(batch_no__isnull=True).distinct())
        return JsonResponse(wono, safe = False)
    return JsonResponse({"success":False}, status=400)

def m5getbr(request):
    if request.method == "GET" and request.is_ajax():
        wo_no = request.GET.get('wo_no')
        shop_sec = request.GET.get('shop_sec')
        br_no = list(M5Docnew1.objects.filter(batch_no =wo_no,shop_sec=shop_sec).values('brn_no').exclude(brn_no__isnull=True).distinct())
        return JsonResponse(br_no, safe = False)
    return JsonResponse({"success":False}, status=400)

   

def m5getpart_no(request):
    if request.method == "GET" and request.is_ajax():
        wo_no = request.GET.get('wo_no')
        br_no = request.GET.get('brn_no')
        shop_sec = request.GET.get('shop_sec')
        part_no = list(M5Docnew1.objects.filter(batch_no =wo_no,brn_no=br_no,shop_sec=shop_sec).values('part_no').exclude(part_no__isnull=True).distinct())
        return JsonResponse(part_no, safe = False)
    return JsonResponse({"success":False}, status=400)



def m5getdoc_no(request):
    if request.method == "GET" and request.is_ajax():
        wo_no = request.GET.get('wo_no')
        br_no = request.GET.get('brn_no')
        shop_sec = request.GET.get('shop_sec')
        part_no = request.GET.get('part_no')
        doc_no = list(M5Docnew1.objects.filter(batch_no =wo_no,brn_no=br_no,shop_sec=shop_sec,part_no=part_no).values('m5glsn').distinct())
        return JsonResponse(doc_no, safe = False)
    return JsonResponse({"success":False}, status=400)


def m5getstaff_no(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        br_no = list(M5SHEMP.objects.filter(shopsec=shop_sec).values('staff_no').exclude(staff_no__isnull=True).distinct())
        return JsonResponse(br_no, safe = False)
    return JsonResponse({"success":False}, status=400)

def m5getshop_name(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        shop_name = list(shop_section.objects.filter(section_code=shop_sec).values('section_desc').distinct())
        return JsonResponse(shop_name , safe = False)
    return JsonResponse({"success":False}, status=400)

def m5getempname(request):

   if request.method == "GET" and request.is_ajax():  
        examcode= request.GET.get('two')
        x =512000
        y=15719
        a = math.floor(math.log10(y))
        hello= int(x*10**(1+a)+y)
        ex = M5SHEMP.objects.filter(staff_no= examcode).all()  
        obj10= empmast.objects.filter(empno__contains=examcode).all()
        ticket=0
        if len(obj10):
            ticket=obj10[0].ticket_no
        exam ={
            "exam_type":ex[0].name,
            "ticket":ticket,
              }
        return JsonResponse({"exam":exam}, safe = False)
        return JsonResponse({"success":False}, status=400)

def m5getcat(request):
   if request.method == "GET" and request.is_ajax():  
        staff_no= request.GET.get('two')
        O=[]
        obj7=Shemp.objects.filter(staff_no=staff_no).values('cat').order_by('-updt_date')
        if len(obj7)!=0:
            O.append(obj7[0])
        return JsonResponse(O, safe = False)
        return JsonResponse({"success":False}, status=400)

@login_required
@role_required(urlpass='/m12view/')
def m12view(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_no = empmast.objects.none()
    if "Superuser" in rolelist:
        tm=shop_section.objects.all()
        tmp=[]
        for on in tm:
            tmp.append(on.section_code)
        context={
            'sub':0,
            'len' :2,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles':tmp
        }
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):
            w1 = Oprn.objects.filter(shop_sec=rolelist[i]).values('part_no').distinct()
            req = Batch.objects.filter(part_no__in=w1).values('bo_no').distinct()
            wo_no =wo_no | req
        context = {
            'sub':0,
            'len' :len(rolelist),
            'wo_no':wo_no,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles' :rolelist,
            'lent':0,
        }
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'len' :len(rolelist),
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles' :rolelist,
            'lent':0,
        }
    if request.method == "POST":
        submitvalue = request.POST.get('proceed')
        if submitvalue=='Proceed':
            from decimal import Decimal
            shop_sec = request.POST.get('shop_sec')
            staff_no = request.POST.get('staff_no')
            month = request.POST.get('month')
            wo_no = request.POST.get('wo_no')
            obj1 = M12DOC.objects.filter(shopsec=shop_sec,staff_no=staff_no,month=month).values('cat','time_hrs','date','in1','out','reasons_for_idle_time','total_time','idle_time','month').distinct() 
            obj2='None'
            obj3='None'
            leng=0
            leng1=0
            rr='None'
            amt=0
            patotal=0
            a=0
            b=0
            if len(obj1):
                t=obj1[0]['cat']
                if t != 'None':
                    obj2 = Rates.objects.filter(cat=t).values('avg_rate').distinct()
                    obj3 = M12DOC.objects.filter(shopsec=shop_sec,staff_no=staff_no,month=month).values('month','cat')[0]
                   
           
                for op in range(len(obj1)):
                    patotal=obj1[op]['total_time']
                    p=patotal.split(':')
                    a=a+Decimal(p[0])
                    b=b+Decimal(p[1])
                    if (b>=60):
                        a=a+1
                        b=b%60
                          
                    rr=str(a)+':'+str(b)  
                tmhr=rr
                if len(obj2):    
                    avgrt=obj2[0]['avg_rate']
                    if tmhr == 'None': 
                        tmhr=0
                        avgrt=0
                    else:
                        tmhr1=tmhr.split(':')
                        tmhr=Decimal(tmhr1[0])+(Decimal(tmhr1[1])/60)
                                
                        
                    amt=tmhr*avgrt
                leng = obj1.count()
                leng1 = obj2.count()
            if "Superuser" in rolelist:
                tm=shop_section.objects.all()
                tmp=[]
                for on in tm:
                    tmp.append(on.section_code)
                context={
                    'len' :2,
                    'nav':nav,
                    'subnav':subnav,
                    'ip':get_client_ip(request),
                    'roles':tmp,
                    'obj1': obj1,
                    'obj2':obj2,
                    'obj3':obj3,
                    'lent': leng,
                    'lent2': leng1,
                    'amt1': amt,
                    'shop_sec': shop_sec,
                    'wo_no': wo_no,
                    'staff_no':staff_no, 
                    'r1':rr,
                    'month': month,
                    'sub':1,
                }
            elif(len(rolelist)==1):
                for i in range(0,len(rolelist)):
                    w1 = Oprn.objects.filter(shop_sec=rolelist[i]).values('part_no').distinct()
                    req = Batch.objects.filter(part_no__in=w1).values('bo_no').distinct()
                    wo_no =wo_no | req
                context = {
                    'len' :len(rolelist),
                    'wo_no':wo_no,
                    'nav':nav,
                    'subnav':subnav,
                    'ip':get_client_ip(request),
                    'roles' :rolelist,
                    'obj1': obj1,
                    'obj2':obj2,
                    'obj3':obj3,
                    'lent': leng,
                    'lent2': leng1,
                    'amt1': amt,
                    'shop_sec': shop_sec,
                    'wo_no': wo_no,
                    'staff_no':staff_no, 
                    'r1':rr,
                    'month': month,
                    'sub':1,
                }
            elif(len(rolelist)>1):
                context = {
                    'len' :len(rolelist),
                    'nav':nav,
                    'subnav':subnav,
                    'ip':get_client_ip(request),
                    'roles' :rolelist,
                    'obj1': obj1,
                    'obj2':obj2,
                    'obj3':obj3,
                    'lent': leng,
                    'lent2': leng1,
                    'amt1': amt,
                    'shop_sec': shop_sec,
                    'wo_no': wo_no,
                    'staff_no':staff_no, 
                    'r1':rr,
                    'month': month,
                    'sub':1,
                }

        if submitvalue=='submit':
            leng=request.POST.get('len')
            shopsec= request.POST.get('shopsec')
            staff_no = request.POST.get('staff_no')
            month = request.POST.get('month')
            inoutnum=request.POST.get("inoutnum")
            amt = request.POST.get('amt')
            for i in range(1, int(leng)+1):
                in1 = request.POST.get('in1'+str(i))
                out = request.POST.get('out'+str(i))
                date = request.POST.get('date'+str(i))
                month = request.POST.get('month'+str(i))
               
                total_time = request.POST.get('total_time'+str(i))
                time_hrs = request.POST.get('total_time'+str(i))
                idle_time = request.POST.get('idle_time'+str(i))
                reasons_for_idle_time = request.POST.get('reasons_for_idle_time'+str(i))
                M12DOC.objects.filter(shopsec=shopsec,staff_no=staff_no,date=date,month=month).update(date=str(date),in1=str(in1),out=str(out),month=str(month),total_time=str(total_time),idle_time=str(idle_time),reasons_for_idle_time=str(reasons_for_idle_time),time_hrs=str(time_hrs),amt=str(amt))
               

            for i in range(1, int(inoutnum)+1):
                in1 = request.POST.get('in1add'+str(i))
                out = request.POST.get('outadd'+str(i))
                month = request.POST.get('month_add'+str(i))
                total_time = request.POST.get('total_time_add'+str(i))
                date = request.POST.get('dateadd'+str(i))
                cat = request.POST.get('catadd'+str(i))
                time_hrs = request.POST.get('total_time_add'+str(i))
                idle_time = request.POST.get('idle_time_add'+str(i))
                reasons_for_idle_time = request.POST.get('reasons_for_idle_timeadd'+str(i))
               
              
                M12DOC.objects.create(shopsec=shopsec,staff_no=staff_no,in1=str(in1),out=str(out),month=str(month),total_time=str(total_time),date=str(date),idle_time=str(idle_time),reasons_for_idle_time=str(reasons_for_idle_time),cat=str(cat),time_hrs=str(time_hrs))
               
                
                

                wo_no=Batch.objects.all().values('bo_no').distinct()
    return render(request,"m12view.html",context)@login_required
@role_required(urlpass='/m12view/')
def m12view(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_no = empmast.objects.none()
    if "Superuser" in rolelist:
        tm=shop_section.objects.all()
        tmp=[]
        for on in tm:
            tmp.append(on.section_code)
        context={
            'sub':0,
            'len' :2,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles':tmp
        }
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):
            w1 = Oprn.objects.filter(shop_sec=rolelist[i]).values('part_no').distinct()
            req = Batch.objects.filter(part_no__in=w1).values('bo_no').distinct()
            wo_no =wo_no | req
        context = {
            'sub':0,
            'len' :len(rolelist),
            'wo_no':wo_no,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles' :rolelist,
            'lent':0,
        }
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'len' :len(rolelist),
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles' :rolelist,
            'lent':0,
        }
    if request.method == "POST":
        submitvalue = request.POST.get('proceed')
        if submitvalue=='Proceed':
            from decimal import Decimal
            shop_sec = request.POST.get('shop_sec')
            staff_no = request.POST.get('staff_no')
            month = request.POST.get('month')
            wo_no = request.POST.get('wo_no')
            tempcat=Shemp.objects.filter(staff_no=staff_no).values('cat','name').distinct()
            empname=tempcat[0]['name']
            tcat=tempcat[0]['cat']
            obj1 = M12DOC.objects.filter(shopsec=shop_sec,staff_no=staff_no,month=month).values('id','cat','time_hrs','in_date','out_date','shift','in1','out','reasons_for_idle_time','total_time','idle_time','month').distinct() 
            obj2='None'
            obj3='None'
            leng=0
            leng1=0
            rr='None'
            amt=0
            patotal=0
            a=0
            b=0
            if len(obj1):
                t=obj1[0]['cat']
                if t != 'None':
                    obj2 = Rates.objects.filter(cat=t).values('avg_rate').distinct()
                    obj3 = M12DOC.objects.filter(shopsec=shop_sec,staff_no=staff_no,month=month).values('month','cat')[0]
                   
           
                for op in range(len(obj1)):
                    patotal=obj1[op]['total_time']
                    p=patotal.split(':')
                    a=a+Decimal(p[0])
                    b=b+Decimal(p[1])
                    if (b>=60):
                        a=a+1
                        b=b%60
                          
                    rr=str(a)+':'+str(b) 
                tmhr=rr
                if len(obj2):    
                    avgrt=obj2[0]['avg_rate']
                    if tmhr == 'None': 
                        tmhr=0
                        avgrt=0
                    else:
                        tmhr1=tmhr.split(':')
                        tmhr=Decimal(tmhr1[0])+(Decimal(tmhr1[1])/60)
                                
                        
                    amt=tmhr*avgrt
                    amt=Decimal(amt).quantize(Decimal('1.00'))
                leng = obj1.count()
                leng1 = obj2.count()
            if "Superuser" in rolelist:
                tm=shop_section.objects.all()
                tmp=[]
                for on in tm:
                    tmp.append(on.section_code)
                context={
                    'len' :2,
                    'nav':nav,
                    'subnav':subnav,
                    'ip':get_client_ip(request),
                    'roles':tmp,
                    'obj1': obj1,
                    'obj2':obj2,
                    'obj3':obj3,
                    'lent': leng,
                    'lent2': leng1,
                    'amt1': amt,
                    'shop_sec': shop_sec,
                    'wo_no': wo_no,
                    'staff_no':staff_no, 
                    'r1':rr,
                    'month': month,
                    'sub':1,
                    'tcat':tcat,'empname':empname,
                }
            elif(len(rolelist)==1):
                for i in range(0,len(rolelist)):
                    w1 = Oprn.objects.filter(shop_sec=rolelist[i]).values('part_no').distinct()
                    req = Batch.objects.filter(part_no__in=w1).values('bo_no').distinct()
                    wo_no =wo_no | req
                context = {
                    'len' :len(rolelist),
                    'wo_no':wo_no,
                    'nav':nav,
                    'subnav':subnav,
                    'ip':get_client_ip(request),
                    'roles' :rolelist,
                    'obj1': obj1,
                    'obj2':obj2,
                    'obj3':obj3,
                    'lent': leng,
                    'lent2': leng1,
                    'amt1': amt,
                    'shop_sec': shop_sec,
                    'wo_no': wo_no,
                    'staff_no':staff_no, 
                    'r1':rr,
                    'month': month,
                    'sub':1,
                    'tcat':tcat,'empname':empname,
                }
            elif(len(rolelist)>1):
                context = {
                    'len' :len(rolelist),
                    'nav':nav,
                    'subnav':subnav,
                    'ip':get_client_ip(request),
                    'roles' :rolelist,
                    'obj1': obj1,
                    'obj2':obj2,
                    'obj3':obj3,
                    'lent': leng,
                    'lent2': leng1,
                    'amt1': amt,
                    'shop_sec': shop_sec,
                    'wo_no': wo_no,
                    'staff_no':staff_no, 
                    'r1':rr,
                    'month': month,
                    'sub':1,
                    'tcat':tcat,'empname':empname,
                }
        submitvalue = request.POST.get('PrintPDF')
        if submitvalue=='PrintPDF':
            from decimal import Decimal
            shop_sec = request.POST.get('shopsec')
            staff_no = request.POST.get('staff_no')
            month = request.POST.get('month')
            wo_no = request.POST.get('wo_no')
            tempcat=Shemp.objects.filter(staff_no=staff_no).values('cat','name').distinct()
            empname=tempcat[0]['name']
            tcat=tempcat[0]['cat']
            
            obj1 = M12DOC.objects.filter(shopsec=shop_sec,staff_no=staff_no,month=month).values('id','cat','time_hrs','in_date','out_date','shift','in1','out','reasons_for_idle_time','total_time','idle_time','month').distinct() 
            
            rr='None'
            amt=0
            patotal=0
            a=0
            b=0
            if len(obj1):
                t=obj1[0]['cat']
                if t != 'None':
                    obj2 = Rates.objects.filter(cat=t).values('avg_rate').distinct()
                    obj3 = M12DOC.objects.filter(shopsec=shop_sec,staff_no=staff_no,month=month).values('month','cat')[0]
                   
           
                for op in range(len(obj1)):
                    patotal=obj1[op]['total_time']
                    p=patotal.split(':')
                    a=a+Decimal(p[0])
                    b=b+Decimal(p[1])
                    if (b>=60):
                        a=a+1
                        b=b%60
                          
                    rr=str(a)+':'+str(b)     
                tmhr=rr
                if len(obj2):    
                    avgrt=obj2[0]['avg_rate']
                    if tmhr == 'None': 
                        tmhr=0
                        avgrt=0
                    else:
                        tmhr1=tmhr.split(':')
                        tmhr=Decimal(tmhr1[0])+(Decimal(tmhr1[1])/60)
                                
                        
                    amt=tmhr*avgrt
                    amt=round(amt,2)
                    context = {
                        
                        'obj1': obj1,
                        'shop_sec': shop_sec,
                        'staff_no':staff_no,
                        'wo_no': wo_no,
                        'r1':rr,
                        'amt1': amt,
                        'month': month,'tcat':tcat,'empname':empname,
                }  
                
            pdf = render_to_pdf('M12pdfc.html',context)
            return HttpResponse(pdf, content_type='application/pdf')

        if submitvalue=='submit':
            leng=request.POST.get('len')
            shopsec= request.POST.get('shopsec')
            staff_no = request.POST.get('staff_no')
            month = request.POST.get('month')
            inoutnum=request.POST.get("inoutnum")
            amt = request.POST.get('amt')
            for i in range(1, int(leng)+1):
                in1 = request.POST.get('in1'+str(i))
                out = request.POST.get('out'+str(i))
                date = request.POST.get('date'+str(i))
                month = request.POST.get('month'+str(i))
               
                total_time = request.POST.get('total_time'+str(i))
                time_hrs = request.POST.get('total_time'+str(i))
                idle_time = request.POST.get('idle_time'+str(i))
                reasons_for_idle_time = request.POST.get('reasons_for_idle_time'+str(i))
                M12DOC.objects.filter(shopsec=shopsec,staff_no=staff_no,date=date,month=month).update(date=str(date),in1=str(in1),out=str(out),month=str(month),total_time=str(total_time),idle_time=str(idle_time),reasons_for_idle_time=str(reasons_for_idle_time),time_hrs=str(time_hrs),amt=str(amt))
               

            for i in range(1, int(inoutnum)+1):
                in1 = request.POST.get('in1add'+str(i))
                out = request.POST.get('outadd'+str(i))
                month = request.POST.get('month_add'+str(i))
                total_time = request.POST.get('total_time_add'+str(i))
                date = request.POST.get('dateadd'+str(i))
                cat = request.POST.get('catadd'+str(i))
                time_hrs = request.POST.get('total_time_add'+str(i))
                idle_time = request.POST.get('idle_time_add'+str(i))
                reasons_for_idle_time = request.POST.get('reasons_for_idle_timeadd'+str(i))
            
                M12DOC.objects.create(shopsec=shopsec,staff_no=staff_no,in1=str(in1),out=str(out),month=str(month),total_time=str(total_time),date=str(date),idle_time=str(idle_time),reasons_for_idle_time=str(reasons_for_idle_time),cat=str(cat),time_hrs=str(time_hrs))
              
                wo_no=Batch.objects.all().values('bo_no').distinct()
    return render(request,"m12view.html",context)

def m12save(request):
    if request.method == 'GET' and request.is_ajax():
        shopsec= request.GET.get('shopsec')
        staff_no = request.GET.get('staff_no')
        ename= request.GET.get('ename')
        scat=request.GET.get('scat')
        in_date = request.GET.get('in_date')   
        out_date = request.GET.get('out_date')
        shift = request.GET.get('shift')
        month = request.GET.get('month')
        in1 = request.GET.get('in1')
        out = request.GET.get('out')
        total_time = request.GET.get('total_time')
        idle_time = request.GET.get('idle_time')
        detail_no = request.GET.get('detail_no')
        amt = request.GET.get('amt')
        sender_email_id = 'crisdlwproject@gmail.com'
        sender_email_id_password = 'cris@1234'

        if  month and in1 and out and idle_time and detail_no and total_time:
            M12DOC.objects.create(shopsec=shopsec,staff_no=staff_no,name=str(ename),in1=str(in1),out=str(out),month=str(month),total_time=str(total_time),in_date=str(in_date),out_date=str(out_date),idle_time=str(idle_time),reasons_for_idle_time=str(detail_no),cat=str(scat),amt=str(amt),shift=str(shift))
            
            emp_det=list(emp_details.objects.filter(shopsec=str(shopsec),card_details='M12').values('mobileno','email_id'))
            for x in range(len(emp_det)):

                sms(emp_det[x]['mobileno'],"Machine idle card for Emp number "+ staff_no +" Name "+ ename +" Soap "+ shopsec +" has been generated for the Date "+ in_date +" Total idle time "+idle_time+" ")

                email1(sender_email_id,sender_email_id_password,emp_det[x]['email_id'],'Subject: MACHINE IDLE TIME CARD \n\n   Dear Sir,   Machine idle card for Emp number '+ staff_no +' Name '+ ename +' Soap '+ shopsec +' has been generated for the Date '+ in_date +' Total idle time '+idle_time+' ')
            obj1=list(M12DOC.objects.filter(staff_no=staff_no,shopsec=shopsec,month=month).values('id','month','in1','out','in_date','out_date','shift','total_time','reasons_for_idle_time','idle_time').order_by('in_date'))

            context={
            'obj1':obj1,
                }   
            return JsonResponse({'data':context}, safe = False)
        
    return JsonResponse({"success":False}, status = 400)
def m12indateCheck(request):
    if request.method == 'GET' and request.is_ajax():  
        in_date= request.GET.get('in_date')
        staff_no= request.GET.get('staff_no')
        shop_sec= request.GET.get('shop_sec')
        data_list =list(M12DOC.objects.filter(shopsec=shop_sec,staff_no=staff_no,in_date=in_date).values('in1','in_date','out','out_date','total_time').distinct())
        if(len(data_list)>0):
            return JsonResponse(data_list,safe = False)                         
    return JsonResponse({"success":False},status=400)

def m12editdata(request):
    if request.method == "GET" and request.is_ajax():
        sno = request.GET.get('id')
        obj1=list(M12DOC.objects.filter(id=sno).values('id','month','in1','out','in_date','out_date','shift','total_time','reasons_for_idle_time','idle_time').distinct())
        
        context={
            'obj1':obj1,             
        }         
        return JsonResponse({'data':context}, safe = False)
    return JsonResponse({"success":False}, status=400)

def m12updatedata(request):
    if request.method == "GET" and request.is_ajax():
        id = request.GET.get('id') 
        shopsec = request.GET.get('shopsec')
        scat=request.GET.get('scat')
        ename= request.GET.get('ename')
        staff_no = request.GET.get('staff_no')
        month = request.GET.get('month')
        shift = request.GET.get('shift')
        in_date = request.GET.get('in_date')         
        in1 = request.GET.get('in1')                      
        out_date = request.GET.get('out_date')               
        out = request.GET.get('out')
        total_time = request.GET.get('total_time')
        detail_no = request.GET.get('detail_no') 
        idle_time = request.GET.get('idle_time')
        M12DOC.objects.filter(id=id).update(shopsec=shopsec,staff_no=staff_no,in1=str(in1),out=str(out),name=str(ename),cat=scat,month=str(month),total_time=str(total_time),in_date=str(in_date),out_date=str(out_date),shift=str(shift),reasons_for_idle_time=str(detail_no),idle_time=str(idle_time))
         
        obj1=list(M12DOC.objects.filter(staff_no=staff_no,shopsec=shopsec,month=month).values('id','month','in1','out','in_date','out_date','shift','total_time','reasons_for_idle_time','idle_time').order_by('in_date'))

              
        context={
            'obj1':obj1,
            
        }        
        return JsonResponse({'data':context}, safe = False)
    return JsonResponse({"success":False}, status=400)
def m12indatelink(request):
    if request.method == 'GET' and request.is_ajax():  
        date= request.GET.get('in_date')
        staff_no= request.GET.get('staff_no')
        shop_sec= request.GET.get('shop_sec')
        data_list =list(M21DOCNEW1.objects.filter(shop_sec=shop_sec,staff_no=staff_no,date=date).values('in1','date','out','outdate','total_time').distinct())
        if(len(data_list)>0):
            return JsonResponse(data_list,safe = False)                         
    return JsonResponse({"success":False},status=400)
                   
def m12getwono(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        w1=Oprn.objects.filter(shop_sec=shop_sec).values('part_no').distinct()
        w2=Batch.objects.filter(status='R').values('bo_no').exclude(bo_no__isnull=True).distinct()

        wono = list(w2)
        
        return JsonResponse(wono, safe = False)
    return JsonResponse({"success":False}, status=400)



def m12getstaff_no(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        staff_no = list(M12DOC.objects.filter(shopsec=shop_sec).values('staff_no').distinct())
        
        return JsonResponse(staff_no, safe = False)
    return JsonResponse({"success":False}, status=400)


def m12getempname(request):
   if request.method == "GET" and request.is_ajax():  
        examcode= request.GET.get('two')
        ex = M5SHEMP.objects.filter(staff_no= examcode).all()  
        exam ={
            "exam_type":ex[0].name,
        }
        return JsonResponse({"exam":exam}, safe = False)
        return JsonResponse({"success":False}, status=400)

@login_required
@role_required(urlpass='/m12report/')
def m12report(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_no = empmast.objects.none()
    if "Superuser" in rolelist:
        tm=shop_section.objects.all()
        tmp=[]
        for on in tm:
            tmp.append(on.section_code)
        context={
            'sub':0,
            'len' :2,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles':tmp
        }
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):
            w1 = Oprn.objects.filter(shop_sec=rolelist[i]).values('part_no').distinct()
            req = Batch.objects.filter(part_no__in=w1).values('bo_no').distinct()
            wo_no =wo_no | req
        context = {
            'sub':0,
            'len' :len(rolelist),
            'wo_no':wo_no,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles' :rolelist,
            'lent':0,
        }
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'len' :len(rolelist),
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles' :rolelist,
            'lent':0,
        }
    if request.method == "POST":
        submitvalue = request.POST.get('proceed')
        if submitvalue=='Proceed':
            from decimal import Decimal
            shop_sec = request.POST.get('shop_sec')
            staff_no = request.POST.get('staff_no')
            month = request.POST.get('month')
            wo_no = request.POST.get('wo_no')
            tempcat=Shemp.objects.filter(staff_no=staff_no).values('cat','name').distinct()
            empname=tempcat[0]['name']
            tcat=tempcat[0]['cat']
            obj1 = M12DOC.objects.filter(shopsec=shop_sec,staff_no=staff_no,month=month).values('id','cat','time_hrs','in_date','out_date','shift','in1','out','reasons_for_idle_time','total_time','idle_time','month').distinct() 
            obj2='None'
            obj3='None'
            leng=0
            leng1=0
            rr='None'
            amt=0
            patotal=0
            a=0
            b=0
            if len(obj1):
                t=obj1[0]['cat']
                if t != 'None':
                    obj2 = Rates.objects.filter(cat=t).values('avg_rate').distinct()
                    obj3 = M12DOC.objects.filter(shopsec=shop_sec,staff_no=staff_no,month=month).values('month','cat')[0]
                   
           
                for op in range(len(obj1)):
                    patotal=obj1[op]['total_time']
                    p=patotal.split(':')
                    a=a+Decimal(p[0])
                    b=b+Decimal(p[1])
                    if (b>=60):
                        a=a+1
                        b=b%60
                          
                    rr=str(a)+':'+str(b)     
                tmhr=rr
                if len(obj2):    
                    avgrt=obj2[0]['avg_rate']
                    if tmhr == 'None': 
                        tmhr=0
                        avgrt=0
                    else:
                        tmhr1=tmhr.split(':')
                        tmhr=Decimal(tmhr1[0])+(Decimal(tmhr1[1])/60)
                                
                        
                    amt=tmhr*avgrt
                    amt=Decimal(amt).quantize(Decimal('1.00'))
                leng = obj1.count()
                leng1 = obj2.count()
            if "Superuser" in rolelist:
                tm=shop_section.objects.all()
                tmp=[]
                for on in tm:
                    tmp.append(on.section_code)
                context={
                    'len' :2,
                    'nav':nav,
                    'subnav':subnav,
                    'ip':get_client_ip(request),
                    'roles':tmp,
                    'obj1': obj1,
                    'obj2':obj2,
                    'obj3':obj3,
                    'lent': leng,
                    'lent2': leng1,
                    'amt1': amt,
                    'shop_sec': shop_sec,
                    'wo_no': wo_no,
                    'staff_no':staff_no, 
                    'r1':rr,
                    'month': month,
                    'sub':1,
                    'tcat':tcat,'empname':empname,
                }
            elif(len(rolelist)==1):
                for i in range(0,len(rolelist)):
                    w1 = Oprn.objects.filter(shop_sec=rolelist[i]).values('part_no').distinct()
                    req = Batch.objects.filter(part_no__in=w1).values('bo_no').distinct()
                    wo_no =wo_no | req
                context = {
                    'len' :len(rolelist),
                    'wo_no':wo_no,
                    'nav':nav,
                    'subnav':subnav,
                    'ip':get_client_ip(request),
                    'roles' :rolelist,
                    'obj1': obj1,
                    'obj2':obj2,
                    'obj3':obj3,
                    'lent': leng,
                    'lent2': leng1,
                    'amt1': amt,
                    'shop_sec': shop_sec,
                    'wo_no': wo_no,
                    'staff_no':staff_no, 
                    'r1':rr,
                    'month': month,
                    'sub':1,
                    'tcat':tcat,'empname':empname,
                }
            elif(len(rolelist)>1):
                context = {
                    'len' :len(rolelist),
                    'nav':nav,
                    'subnav':subnav,
                    'ip':get_client_ip(request),
                    'roles' :rolelist,
                    'obj1': obj1,
                    'obj2':obj2,
                    'obj3':obj3,
                    'lent': leng,
                    'lent2': leng1,
                    'amt1': amt,
                    'shop_sec': shop_sec,
                    'wo_no': wo_no,
                    'staff_no':staff_no, 
                    'r1':rr,
                    'month': month,
                    'sub':1,
                    'tcat':tcat,'empname':empname,
                }

        if submitvalue=='submit':
            leng=request.POST.get('len')
            shopsec= request.POST.get('shopsec')
            staff_no = request.POST.get('staff_no')
            month = request.POST.get('month')
            inoutnum=request.POST.get("inoutnum")
            amt = request.POST.get('amt')
            for i in range(1, int(leng)+1):
                in1 = request.POST.get('in1'+str(i))
                out = request.POST.get('out'+str(i))
                date = request.POST.get('date'+str(i))
                month = request.POST.get('month'+str(i))
               
                total_time = request.POST.get('total_time'+str(i))
                time_hrs = request.POST.get('total_time'+str(i))
                idle_time = request.POST.get('idle_time'+str(i))
                reasons_for_idle_time = request.POST.get('reasons_for_idle_time'+str(i))
                M12DOC.objects.filter(shopsec=shopsec,staff_no=staff_no,date=date,month=month).update(date=str(date),in1=str(in1),out=str(out),month=str(month),total_time=str(total_time),idle_time=str(idle_time),reasons_for_idle_time=str(reasons_for_idle_time),time_hrs=str(time_hrs),amt=str(amt))
               

            for i in range(1, int(inoutnum)+1):
                in1 = request.POST.get('in1add'+str(i))
                out = request.POST.get('outadd'+str(i))
                month = request.POST.get('month_add'+str(i))
                total_time = request.POST.get('total_time_add'+str(i))
                date = request.POST.get('dateadd'+str(i))
                cat = request.POST.get('catadd'+str(i))
                time_hrs = request.POST.get('total_time_add'+str(i))
                idle_time = request.POST.get('idle_time_add'+str(i))
                reasons_for_idle_time = request.POST.get('reasons_for_idle_timeadd'+str(i))
               
              
                M12DOC.objects.create(shopsec=shopsec,staff_no=staff_no,in1=str(in1),out=str(out),month=str(month),total_time=str(total_time),date=str(date),idle_time=str(idle_time),reasons_for_idle_time=str(reasons_for_idle_time),cat=str(cat),time_hrs=str(time_hrs))
             
                
                

                wo_no=Batch.objects.all().values('bo_no').distinct()

        if submitvalue=='PrintPDF':
            from decimal import Decimal
            shop_sec = request.POST.get('shopsec')
            staff_no = request.POST.get('staff_no')
            month = request.POST.get('month')
            wo_no = request.POST.get('wo_no')
            tempcat=Shemp.objects.filter(staff_no=staff_no).values('cat','name').distinct()
            empname=tempcat[0]['name']
            tcat=tempcat[0]['cat']
            obj1 = M12DOC.objects.filter(shopsec=shop_sec,staff_no=staff_no,month=month).values('id','cat','time_hrs','in_date','out_date','shift','in1','out','reasons_for_idle_time','total_time','idle_time','month').distinct() 
            rr='None'
            amt=0
            patotal=0
            a=0
            b=0
            if len(obj1):
                t=obj1[0]['cat']
                if t != 'None':
                    obj2 = Rates.objects.filter(cat=t).values('avg_rate').distinct()
                    obj3 = M12DOC.objects.filter(shopsec=shop_sec,staff_no=staff_no,month=month).values('month','cat')[0]
                   
           
                for op in range(len(obj1)):
                    patotal=obj1[op]['total_time']
                    p=patotal.split(':')
                    a=a+Decimal(p[0])
                    b=b+Decimal(p[1])
                    if (b>=60):
                        a=a+1
                        b=b%60
                          
                    rr=str(a)+':'+str(b)     
                tmhr=rr
                if len(obj2):    
                    avgrt=obj2[0]['avg_rate']
                    if tmhr == 'None': 
                        tmhr=0
                        avgrt=0
                    else:
                        tmhr1=tmhr.split(':')
                        tmhr=Decimal(tmhr1[0])+(Decimal(tmhr1[1])/60)
                                
                        
                    amt=tmhr*avgrt
                    amt=round(amt,2)
                    context = {
                        
                        'obj1': obj1,
                        'shop_sec': shop_sec,
                        'staff_no':staff_no,
                        'wo_no': wo_no,
                        'r1':rr,
                        'amt1': amt,
                        'month': month,'tcat':tcat,'empname':empname,
                }  
                
            pdf = render_to_pdf('M12pdfc.html',context)
            return HttpResponse(pdf, content_type='application/pdf')

    return render(request,"m12report.html",context)
    
@login_required
@role_required(urlpass='/machining_of_air_box/')
def insert_machining_of_air_box(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    obj2=MachiningAirBox.objects.all().filter(dispatch_status=False).order_by('sno')
    mybo=Batch.objects.all().values('bo_no')
    mysno=MachiningAirBox.objects.filter(dispatch_status=False).values('sno')
    my_context={
       'object':obj2,
       'nav':nav,
       'subnav':subnav,
       'usermaster':usermaster,
       'ip':get_client_ip(request),
       'mybo':mybo,
       'mysno':mysno,
       }
    if request.method=="POST":
        
        once=request.POST.get('once')
    
        submit=request.POST.get('submit')
        if submit=='Save':
        
            bo_no=request.POST.get('bo_no')
            bo_date=request.POST.get('bo_date')
            pt_no=request.POST.get('pt_no')
            bo_qty=request.POST.get('bo_qty')
            date=request.POST.get('date')
            loco_type=request.POST.get('locos')
            airbox_sno=request.POST.get('airbox_sno')
            airbox_make=request.POST.get('airbox_make')
            in_qty=request.POST.get('in_qty')
            out_qty=request.POST.get('out_qty')
            if bo_no and bo_date and pt_no and bo_qty and date and loco_type and airbox_sno and airbox_make and in_qty and out_qty:
               obj=MachiningAirBox.objects.create()
               obj.bo_no=bo_no
               obj.bo_date=bo_date
               obj.bo_qty=bo_qty
               obj.pt_no=pt_no
               obj.date=date
               obj.loco_type=loco_type
               obj.airbox_sno=airbox_sno
               obj.airbox_make=airbox_make
               obj.in_qty=in_qty
               obj.out_qty=out_qty
               obj.save()
               messages.success(request, 'Successfully Added!')
            else:
                messages.error(request,"Please Enter All Records!")

            obj2=MachiningAirBox.objects.all().order_by('sno')
            my_context={
            'object':obj2,
            }

        if submit=='save':
    
            sno=int(request.POST.get('editsno'))
            bo_no=request.POST.get('editbo_no')
            bo_date=request.POST.get('editbo_date')
            pt_no=request.POST.get('editpt_no')
            bo_qty=request.POST.get('editbo_qty')
            date=request.POST.get('editdate')
            loco_type=request.POST.get('editlocos')
            airbox_sno=request.POST.get('editairbox_sno')
            airbox_make=request.POST.get('editairbox_make')
            in_qty=request.POST.get('editin_qty')
            out_qty=request.POST.get('editout_qty')
            if bo_no and bo_date and pt_no and bo_qty and date and loco_type and airbox_sno and airbox_make and in_qty and out_qty:
               MachiningAirBox.objects.filter(sno=sno).update(bo_no=bo_no,bo_date=bo_date,pt_no=pt_no,bo_qty=bo_qty,date=date,loco_type=loco_type,airbox_sno=airbox_sno,airbox_make=airbox_make,in_qty=in_qty,out_qty=out_qty)
               messages.success(request, 'Successfully Edited!')
            else:
               messages.error(request,"Please Enter S.No.!")

        if submit=="Dispatch":
            
            sno=int(request.POST.get('dissno'))
            dispatch_date=request.POST.get('dispatch_date')
            dislocos=request.POST.get('dislocos')
            if sno and dispatch_date and dislocos:
                MachiningAirBox.objects.filter(sno=sno).update(dispatch_date=dispatch_date,dispatch_to=dislocos,dispatch_status=True)
                messages.success(request, 'Successfully Dispatched!')
            else:
                messages.error(request,"Please Enter S.No.!")
        
        if submit=='Delete':

            first=int(request.POST.get('delsno'))
            if first:
                MachiningAirBox.objects.filter(sno=first).delete()
                messages.success(request, 'Successfully Deleted!')
            else:
                messages.error(request,"Please Enter S.No.!")
        
        return HttpResponseRedirect("/machining_of_air_box/")

    return render(request,"machining_of_air_box.html",my_context)


def airbox_addbo(request):
    if request.method=="GET" and request.is_ajax():
        mybo = request.GET.get('selbo_no')
        myval = list(Batch.objects.filter(bo_no=mybo).values('ep_type','rel_date','part_no','batch_qty'))
        return JsonResponse(myval, safe = False)
    return JsonResponse({"success":False}, status=400)










@login_required
@role_required(urlpass='/miscellaneous_section/')
def miscellaneous_section(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    obj2=MiscellSection.objects.all().filter(dispatch_status=False).order_by('sno')
    mybo=Batch.objects.all().values('bo_no')
    mysno=MiscellSection.objects.filter(dispatch_status=False).values('sno')
    my_context={
       'object':obj2,
       'nav':nav,
       'subnav':subnav,
        'usermaster':usermaster,
        'ip':get_client_ip(request),
        'mybo':mybo,
        'mysno':mysno,
       }
    if request.method=="POST":
        
        once=request.POST.get('once')
        submit=request.POST.get('submit')
        if submit=='Save':
        
            first=request.POST.get('bo_no')
            second=request.POST.get('bo_date')
            pt_no=request.POST.get('pt_no')
            bo_qty=request.POST.get('bo_qty')
            third=request.POST.get('date')
            fourth=request.POST.get('locos')
            fifth=request.POST.get('shaft_m')
            sixth=request.POST.get('in_qty')
            seventh=request.POST.get('out_qty')
            if first and second and pt_no and bo_qty and third and fourth and fifth and sixth and seventh:
                obj=MiscellSection.objects.create()
                obj.bo_no=first
                obj.bo_date=second
                obj.bo_qty=bo_qty
                obj.pt_no=pt_no
                obj.date=third
                obj.loco_type=fourth
                obj.shaft_m=fifth
                obj.in_qty=sixth
                obj.out_qty=seventh
                obj.save()
                messages.success(request, 'Successfully Added!')
            else:
                messages.error(request,"Please Enter All Records!")

            obj2=MiscellSection.objects.all().order_by('sno')
            my_context={
            'object':obj2,
            }

        if submit=='save':
        
            sno=int(request.POST.get('editsno'))
            bo_no=request.POST.get('editbo_no')
            bo_date=request.POST.get('editbo_date')
            pt_no=request.POST.get('editpt_no')
            bo_qty=request.POST.get('editbo_qty')
            date=request.POST.get('editdate')
            loco_type=request.POST.get('editlocos')
            shaft_m=request.POST.get('editshaft_m')
            in_qty=request.POST.get('editin_qty')
            out_qty=request.POST.get('editout_qty')
            if sno and bo_no and pt_no and bo_qty and bo_date and date and loco_type and shaft_m and in_qty and out_qty:
                MiscellSection.objects.filter(sno=sno).update(bo_no=bo_no,bo_date=bo_date,date=date,loco_type=loco_type,shaft_m=shaft_m,in_qty=in_qty,out_qty=out_qty)
                messages.success(request, 'Successfully Edited!')
            else:
               messages.error(request,"Please Enter S.No.!")
        
        if submit=="Dispatch":
            
            first=int(request.POST.get('dissno'))
            second=request.POST.get('dislocos')
            dispatch_date=request.POST.get('dispatch_date')
            if first and dispatch_date and second:
               MiscellSection.objects.filter(sno=first).update(dispatch_date=dispatch_date,dispatch_to=second,dispatch_status=True)
               messages.success(request, 'Successfully Dispatched!')
            else:
               messages.error(request,"Please Enter S.No.!")
        
        if submit=='Delete':

            first=int(request.POST.get('delsno'))
            if first:
                MiscellSection.objects.filter(sno=first).delete()
                messages.success(request, 'Successfully Deleted!')
            else:
                messages.error(request,"Please Enter S.No.!")
        
        return HttpResponseRedirect("/miscellaneous_section/")

    return render(request,"miscellaneous_section.html",my_context)



def miscell_addbo(request):
    if request.method=="GET" and request.is_ajax():
        mybo = request.GET.get('selbo_no')
        myval = list(Batch.objects.filter(bo_no=mybo).values('ep_type','rel_date','part_no','batch_qty'))
        return JsonResponse(myval, safe = False)
    return JsonResponse({"success":False}, status=400)

def miscell_editsno(request):
    if request.method=="GET" and request.is_ajax():
        mysno=request.GET.get('sels_no')
        myval=list(MiscellSection.objects.filter(sno=mysno).values('bo_no','bo_date','pt_no','bo_qty','shaft_m','in_qty','out_qty','date','loco_type'))
        return JsonResponse(myval, safe=False)
    return JsonResponse({"success":False}, status=400) 

@login_required
@role_required(urlpass='/m3view/')
def m3view(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    if "Superuser" in rolelist:
        tm=list(shop_section.objects.all())
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles':tm,
            
        }
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):
            req = M2Docnew1.objects.all().filter(f_shopsec=rolelist[i]).values('batch_no').distinct()
            wo_nop =wo_nop | req
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'wo_nop':wo_nop,
            'roles' :rolelist,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
        }
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'roles' :rolelist,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
        }
    if request.method == "POST":
        
        submitvalue = request.POST.get('proceed')
        if submitvalue=='Proceed':             
            shop_sec = request.POST.get('shop_sec')            
            part_no = request.POST.get('part_nop')             
            wo_no = request.POST.get('wo_no')
            brn_no = request.POST.get('br_no')
            assembly_no = request.POST.get('assm_no')
            doc_no = request.POST.get('doc_no')
            
            obj = Part.objects.filter(partno=part_no).values('drgno','des')
            objj = list(M2Docnew1.objects.filter(m2sln=doc_no,f_shopsec=shop_sec,part_no=part_no).values('qty','rm_partno','m4_no','scl_cl','rm_qty','m2prtdt','rc_st_wk','cut_shear').distinct())
            obj1 = empmast.objects.filter(role=shop_sec).values('empname','dept_desc')
            
            prod = list(Proddem.objects.filter(part_no=part_no).values('l_fr','l_to').distinct())             
            rm_partno=objj[0]['rm_partno']
            obj3= list(Part.objects.filter(partno=rm_partno).values('des','shop_ut').distinct())            
            cuntdia=list(Cutdia.objects.filter(ep_part=part_no,rm_part=rm_partno).values('cutdia_no').distinct())    
            date = M2Docnew1.objects.filter(m2sln=doc_no).values('m2prtdt').distinct()
            shop_ut=  obj3[0]['shop_ut']
            unit_code=list(Code.objects.filter(cd_type='51',code=shop_ut).values('alpha_1').distinct()) 
            order_type=list(Batch.objects.filter(bo_no=wo_no,brn_no=brn_no,part_no=assembly_no).values('batch_type','loco_fr','loco_to'))
            assembly_desc= list(Part.objects.filter(partno=assembly_no).values('des').distinct()) 
            
            leng = obj.count()
            leng1 = obj1.count()
            
            leng2 = len(objj)

            objj[0].update({'assembly_no':assembly_no})
            objj[0].update({'part_no':part_no})
            objj[0].update({'doc_no':doc_no})

            if len(assembly_desc)==0:
                objj[0].update({'assembly_desc':''})
            else:
                objj[0].update({'assembly_desc':assembly_desc[0]['des'] })
                

            if len(order_type)==0:
                objj[0].update({'order_type':'','l_fr':'','l_to':''})
            else:
                objj[0].update({'order_type':order_type[0]['batch_type'],'l_fr':order_type[0]['loco_fr'],'l_to':order_type[0]['loco_to'] })
                
            if len(unit_code)==0:
                objj[0].update({'unit':''})
            else:
                objj[0].update({'unit':unit_code[0]['alpha_1'] })
                
            if len(obj)==0:
                objj[0].update({'drgno':'','part_des':''})
            else:
                objj[0].update({'drgno':obj[0]['drgno'],'part_des':obj[0]['des']})
                
            if len(obj3)==0:
                objj[0].update({'rm_des':'','shop_ut':''})
            else:
                objj[0].update({'rm_des':obj3[0]['des'],'shop_ut':obj3[0]['shop_ut']})
                
            if len(cuntdia)==0:
                objj[0].update({'cutdia_no':''}) 
            else:
                objj[0].update([{'cutdia_no':cuntdia[0]['cutdia_no'] }])

            if "Superuser" in rolelist:
                tm=list(shop_section.objects.all())              
                context={
                    'lenm' :2,
                    'nav':nav,
                    'subnav':subnav,
                    'ip':get_client_ip(request),
                    'roles':tm,
                    'obj': obj,
                    'objj': objj,
                    'obj1': obj1,
                    'len': leng,
                    'len1':leng1,
                    'len2':leng2,
                    'date': date,
                    'shop_sec': shop_sec,
                    'part_no': part_no,
                    'wo_no': wo_no,
                    'brn_no': brn_no,
                    'assembly_no': assembly_no,
                    'doc_no': doc_no,
                    'sub':1,
                     
                }
            elif(len(rolelist)==1):
                for i in range(0,len(rolelist)):
                    req = M2Docnew1.objects.all().filter(f_shopsec=rolelist[i]).values('batch_no').distinct()
                    wo_nop =wo_nop | req
                context = {
                    'lenm' :len(rolelist),
                    'wo_nop':wo_nop,
                    'roles' :rolelist,
                    'nav':nav,
                    'subnav':subnav,
                    'ip':get_client_ip(request),
                    'obj': obj,
                    'objj': objj,
                    'obj1': obj1,
                    'len': leng,
                    'len1':leng1,
                    'len2':leng2,
                    'date': date,
                    'shop_sec': shop_sec,
                    'part_no': part_no,
                    'wo_no': wo_no,
                    'brn_no': brn_no,
                    'assembly_no': assembly_no,
                    'doc_no': doc_no,
                    'sub':1,
                }
            elif(len(rolelist)>1):
                context = {
                    'lenm' :len(rolelist),
                    'roles' :rolelist,
                    'nav':nav,
                    'subnav':subnav,
                    'ip':get_client_ip(request),
                    'obj': obj,
                    'objj': objj,
                    'obj1': obj1,
                    'len': leng,
                    'len1':leng1,
                    'len2':leng2,
                    'date': date,
                    'shop_sec': shop_sec,
                    'part_no': part_no,
                    'wo_no': wo_no,
                    'brn_no': brn_no,
                    'assembly_no': assembly_no,
                    'doc_no': doc_no,
                    'sub':1,
                }
    return render(request,"m3view.html",context)


def m3getwono(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        wo_no = list(M2Docnew1.objects.filter(f_shopsec = shop_sec).values('batch_no').distinct())     
        return JsonResponse(wo_no, safe = False)
    return JsonResponse({"success":False}, status=400)


def m3getbr(request):
    if request.method == "GET" and request.is_ajax():
        wo_no = request.GET.get('wo_no')
        br_no = list(M2Docnew1.objects.filter(batch_no =wo_no).values('brn_no').distinct())
        return JsonResponse(br_no, safe = False)
    return JsonResponse({"success":False}, status=400)

def m3shopsec(request):
    if request.method == "GET" and request.is_ajax():
        wo_no = request.GET.get('wo_no')
        br_no = request.GET.get('brn_no')
        shop_sec = list(M2Docnew1.objects.filter(batch_no =wo_no,brn_no=br_no).values('f_shopsec').distinct())
        return JsonResponse(shop_sec, safe = False)
    return JsonResponse({"success":False}, status=400)

def m3getassly(request):
    if request.method == "GET" and request.is_ajax():
        wo_no = request.GET.get('wo_no')
        br_no = request.GET.get('brn_no')
        shop_sec = request.GET.get('shop_sec')
        assembly_no = list(M2Docnew1.objects.filter(batch_no =wo_no,brn_no=br_no,f_shopsec=shop_sec).values('assly_no').distinct())
        return JsonResponse(assembly_no, safe = False)
    return JsonResponse({"success":False}, status=400)

def m3getpart_no(request):
    if request.method == "GET" and request.is_ajax():
        wo_no = request.GET.get('wo_no')
        br_no = request.GET.get('brn_no')
        shop_sec = request.GET.get('shop_sec')
        assembly_no = request.GET.get('assm_no')
        part_no = list(M2Docnew1.objects.filter(batch_no =wo_no,brn_no=br_no,f_shopsec=shop_sec,assly_no=assembly_no).values('part_no').distinct())
        return JsonResponse(part_no, safe = False)
    return JsonResponse({"success":False}, status=400)

def m3getdoc_no(request):
    if request.method == "GET" and request.is_ajax():
        wo_no = request.GET.get('wo_no')
        br_no = request.GET.get('brn_no')
        shop_sec = request.GET.get('shop_sec')
        assembly_no = request.GET.get('assm_no')
        part_no = request.GET.get('part_no')
        doc_no = list(M2Docnew1.objects.filter(batch_no =wo_no,brn_no=br_no,f_shopsec=shop_sec,assly_no=assembly_no,part_no=part_no).values('m2sln').distinct())
        return JsonResponse(doc_no, safe = False)
    return JsonResponse({"success":False}, status=400)


def m3sub(request):
    if request.method == "POST":
        shop_sec = request.POST.get('shop_sec')
        part_no = request.POST.get('part_nop')
        wo_no = request.POST.get('wo_no')
        brn_no = request.POST.get('br_no')
        assembly_no = request.POST.get('assm_no')
        doc_no = request.POST.get('doc_no')
        obj = Part.objects.filter(partno=part_no).values('drgno','des') 
        objj = M2Docnew1.objects.filter(m2sln=doc_no,f_shopsec=shop_sec,partno=part_no).values('qty','m4_no','scl_cl','rm_partno')
        obj1 = empmast.objects.filter(role=shop_sec).values('empname','dept_desc')
        date = M2Docnew1.objects.filter(m2sln=doc_no).values('m2prtdt').distinct()
        leng = obj.count()
        leng1 = obj1.count()
        leng2 = objj.count()
         
        context = {
                    'obj': obj,
                    'objj': objj,
                    'obj1': obj1,
                    'len': leng,
                    'len1':leng1,
                    'len2':leng2,
                    'date': date,
                    'shop_sec': shop_sec,
                    'part_no': part_no,
                    'wo_no': wo_no,
                    'brn_no': brn_no,
                    'assembly_no': assembly_no,
                    'doc_no': doc_no,
    }

    return render(request, "m3view.html", context)





@login_required
@role_required(urlpass='/m7view/')
def m7view(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    if "Superuser" in rolelist:
        tm=shop_section.objects.all()
        tmp=[]
        for on in tm:
            tmp.append(on.section_code)
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles':tmp,
        }
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):
            w1 = Oprn.objects.filter(shop_sec=rolelist[i]).values('part_no').distinct()
            req = Batch.objects.filter(part_no__in=w1).values('bo_no').distinct()
            wo_nop =wo_nop | req
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'wo_nop':wo_nop,
            'nav':nav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist,
            'subnav':subnav,
        }
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'nav':nav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist,
            'subnav':subnav,
            
        }
    if request.method == "POST":
        
        submitvalue = request.POST.get('proceed')
        if submitvalue=='Proceed':
            shop_sec = request.POST.get('shop_sec')
            mon = request.POST.get('mon')
            wo_no = request.POST.get('wo_no')
            staff_no = request.POST.get('staff_no')
            part_no = request.POST.get('part_no')
            obj1 = M7.objects.filter(staff_no=staff_no).values('month','date','in1','out')
            obj2 = Shemp.objects.filter(shopsec=shop_sec,staff_no=staff_no).values('name','cat').distinct()
            leng = obj1.count()
            leng2 = obj2.count()
            if "Superuser" in rolelist:
                tm=shop_section.objects.all()
                tmp=[]
                for on in tm:
                    tmp.append(on.section_code)
                context={
                    'sub':0,
                    'lenm' :2,
                    'nav':nav,
                    'subnav':subnav,
                    'ip':get_client_ip(request),
                    'roles':tmp,
                    'obj1': obj1,
                    'obj2': obj2,
                    'ran':range(1,2),
                    'len': 31,
                    'len2': leng2,
                    'shop_sec': shop_sec,
                    'wo_no': wo_no,
                    'staff_no': staff_no,
                    'part_no': part_no, 
                    'mon': mon,
                    'sub':1,
                    'nav':nav,
                    'ip':get_client_ip(request),  
                    'subnav':subnav, 
                }
            elif(len(rolelist)==1):
                for i in range(0,len(rolelist)):
                    w1 = Oprn.objects.filter(shop_sec=rolelist[i]).values('part_no').distinct()
                    req = Batch.objects.filter(part_no__in=w1).values('bo_no').distinct()
                    wo_nop =wo_nop | req
                context = {
                    'sub':0,
                    'lenm' :len(rolelist),
                    'wo_nop':wo_nop,
                    'nav':nav,
                    'ip':get_client_ip(request),
                    'usermaster':usermaster,
                    'roles' :rolelist,
                    'subnav':subnav,
                    'obj1': obj1,
                    'obj2': obj2,
                    'ran':range(1,2),
                    'len': 31,
                    'len2': leng2,
                    'shop_sec': shop_sec,
                    'wo_no': wo_no,
                    'staff_no': staff_no,
                    'part_no': part_no, 
                    'mon': mon,
                    'sub':1,
                    'nav':nav,
                    'ip':get_client_ip(request),  
                    'subnav':subnav, 
                }
            elif(len(rolelist)>1):
                context = {
                    'sub':0,
                    'lenm' :len(rolelist),
                    'nav':nav,
                    'ip':get_client_ip(request),
                    'usermaster':usermaster,
                    'roles' :rolelist,
                    'subnav':subnav,
                    'obj1': obj1,
                    'obj2': obj2,
                    'ran':range(1,2),
                    'len': 31,
                    'len2': leng2,
                    'shop_sec': shop_sec,
                    'wo_no': wo_no,
                    'staff_no': staff_no,
                    'part_no': part_no, 
                    'mon': mon,
                    'sub':1,
                    'nav':nav,
                    'ip':get_client_ip(request),  
                    'subnav':subnav, 
                }

        if submitvalue =='Submit':
                leng=request.POST.get('len')
                shop_sec= request.POST.get('shopsec')
                staff_no = request.POST.get('staffno')
                wo_no = request.POST.get('wono')
                part_no = request.POST.get('partno')
                inoutnum=request.POST.get("inoutnum")
                m7obj = M7.objects.filter(shop_sec=shop_sec,staff_no=staff_no,part_no=part_no).distinct()
                if((m7obj)):
                    m7obj.delete()
                
                for i in range(1, int(leng)+1):
                    in1 = request.POST.get('in1'+str(i))
                    out = request.POST.get('out'+str(i))
                    date = request.POST.get('date'+str(i))
                    mon = request.POST.get('mon'+str(i))
                
                    if in1 and out and date and mon :
                        objjj=M7.objects.create()
                        objjj.shop_sec=shop_sec
                        objjj.staff_no=staff_no
                        objjj.part_no=part_no
                        objjj.in1=in1
                        objjj.out=out
                        objjj.mon=mon
                        objjj.date=date
                        objjj.save()

                for i in range(1, int(inoutnum)+1):
                    in1 = request.POST.get('in1add'+str(i))
                    out = request.POST.get('outadd'+str(i))
                    month = request.POST.get('month_add'+str(i))
                    date = request.POST.get('dateadd'+str(i))

                    if in1 and out and date and mon :
                        obj5=M7.objects.create()
                        obj5.shop_sec=shop_sec
                        obj5.staff_no=staff_no
                        obj5.part_no=part_no
                        obj5.in1=in1
                        obj5.out=out
                        obj5.mon=mon
                        obj5.date=date
                        obj5.save()

                    
                wo_nop=Batch.objects.all().values('bo_no').distinct()
 
    return render(request,"m7view.html",context)
                        
def m7getwono(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        w1=Oprn.objects.filter(shop_sec=shop_sec).values('part_no').distinct()
        w2=Batch.objects.filter(part_no__in=w1).values('bo_no').distinct()
        wono = list(w2)
        return JsonResponse(wono, safe = False)
    return JsonResponse({"success":False}, status=400)


def m7getempno(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        wo_no = request.GET.get('wo_no')
        staff_no=list(Shemp.objects.filter(shopsec=shop_sec).values('staff_no').distinct())
        return JsonResponse(staff_no, safe = False)
    return JsonResponse({"success":False}, status=400)


def m7getpart_no(request):
    if request.method == "GET" and request.is_ajax():
        
        wo_no = request.GET.get('wo_no')
        
        part_no = list(Batch.objects.filter(bo_no=wo_no).values('part_no').distinct())
        return JsonResponse(part_no, safe = False)
    return JsonResponse({"success":False}, status=400)







@login_required
@role_required(urlpass='/PinionPress/')
def pinionpressing_section(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    obj2=PinionPressing.objects.all().order_by('sno')
    mybo=Batch.objects.all().values('bo_no')
    mysno=PinionPressing.objects.all().values('sno')
    axleno=AxleMachining.objects.filter(axlefitting_status=True).values('axle_no')
    my_context={
       'object':obj2,
       'nav':nav,
       'usermaster':usermaster,
       'ip':get_client_ip(request),
       'mybo':mybo,
       'mysno':mysno,
       'subnav':subnav,
       'axleno':axleno,
        }
    
    
    if request.method=="POST":
        once=request.POST.get('once')
        submit=request.POST.get('submit')
        
        if submit=='Save':
            first=request.POST.get('bo_no')
            second=request.POST.get('bo_date')
            third=request.POST.get('date')
            fourth=request.POST.get('tm_make')
            fifth=request.POST.get('tm_no')
            sixth=request.POST.get('locos')
            pt_no=request.POST.get('pt_no')
            bo_qty=request.POST.get('bo_qty')
            indate=request.POST.get('in_qty')
            outdate=request.POST.get('out_qty')
            axle_no=request.POST.get('axle_no')
            if first and second and third and fourth and fifth and sixth and pt_no and bo_qty and indate and outdate and axle_no:
                obj=PinionPressing.objects.create()
                obj.bo_no=first
                obj.bo_date=second
                obj.pt_no=pt_no
                obj.bo_qty=bo_qty
                obj.date=third
                obj.tm_make=fourth
                obj.tm_no=fifth
                obj.loco_type=sixth
                obj.inspection_status=False
                obj.in_qty=indate
                obj.out_qty=outdate
                obj.axle_no=axle_no
                obj.save()
                messages.success(request,'Successfully Added!')
            else:
                messages.error(request,"Please Enter All Records!")    
        
        obj2=PinionPressing.objects.all().order_by('sno') 
        my_context={
            'object':obj2,
            }   

        if submit=='Edit':
            temp=request.POST.get('sno')
            if temp is not None:
                sno=int(temp)
            else:
                sno=None
            bo_no=request.POST.get('editbo_no')
            bo_date=request.POST.get('editbo_date')
            date=request.POST.get('editdate')
            tm_make=request.POST.get('edittm_make')
            tm_no=request.POST.get('edittm_no')
            bo_qty=request.POST.get('editbo_qty')
            pt_no=request.POST.get('editpt_no')
            indate=request.POST.get('editin_qty')
            outdate=request.POST.get('editout_qty')
            if sno and bo_no and bo_date and date and tm_make and tm_no and pt_no and bo_qty and indate and outdate:
                PinionPressing.objects.filter(sno=sno).update(bo_no=bo_no,bo_date=bo_date,date=date,tm_make=tm_make,tm_no=tm_no,pt_no=pt_no,bo_qty=bo_qty,in_qty=indate,out_qty=outdate)
                messages.success(request, 'Successfully Edited!')
            else:
                messages.error(request,"Please Enter S.No.!")        



        if submit=='Inspect':
            sno=int(request.POST.get('snowheel'))
            pinion_no=request.POST.get('pinion_no')
            pinion_make=request.POST.get('pinion_make')
            pinion_travel=request.POST.get('pinion_travel')
            pinion_pressure=request.POST.get('pinion_pressure')
            blue_match=request.POST.get('blue_match')
            inspect_date=request.POST.get('inspect_date')
            if pinion_no and pinion_make and pinion_travel and pinion_pressure and blue_match and inspect_date :
                PinionPressing.objects.filter(sno=sno).update(pinion_no=pinion_no,pinion_make=pinion_make,pinion_travel=pinion_travel,pinion_pressure=pinion_pressure,blue_match=blue_match,inspect_date=inspect_date,inspection_status=True,dispatch_to="Inspected") 
                messages.success(request,'Successfully Inspected!')
            else:
                messages.error(request,"Please Enter All Records!")

        
        if submit=="Dispatch":
            
            sno=int(request.POST.get('dissno'))
            dislocos=request.POST.get('dislocos')
            disdate=request.POST.get('dispatch_date')
            if sno and dislocos and disdate:
                PinionPressing.objects.filter(sno=sno).update(dispatch_date=disdate)
                messages.success(request, 'Successfully Dispatched!')
            else:
                messages.error(request,"Please Enter S.No.!")
        
        if submit=='Delete':

            sno=int(request.POST.get('delsno'))
            if sno:
                PinionPressing.objects.filter(sno=sno).delete()
                messages.success(request, 'Successfully Deleted!')
            else:
                messages.error(request,"Please Enter S.No.!")

        return HttpResponseRedirect("/PinionPress/")
    return render(request,"PinionPress.html",my_context)

def pinion_addbo(request):
    if request.method=="GET" and request.is_ajax():
        mybo = request.GET.get('selbo_no')
        myval = list(Batch.objects.filter(bo_no=mybo).values('ep_type','rel_date','batch_qty','part_no'))
        return JsonResponse(myval, safe = False)
    return JsonResponse({"success":False}, status=400)
        
def pinion_editsno(request):
    if request.method=="GET" and request.is_ajax():
        mysno=request.GET.get('sels_no')
        myval=list(PinionPressing.objects.filter(sno=mysno).values('bo_no','bo_date','loco_type','date','tm_make','tm_no','pt_no','bo_qty','in_qty','out_qty'))
        return JsonResponse(myval, safe=False)
    return JsonResponse({"success":False}, status=400)  

def airbox_editsno(request):
    if request.method=="GET" and request.is_ajax():
        mysno=request.GET.get('sels_no')
        myval=list(MachiningAirBox.objects.filter(sno=mysno).values('bo_no','bo_date','airbox_sno','airbox_make','in_qty','out_qty','date','loco_type','pt_no','bo_qty'))
        return JsonResponse(myval, safe=False)
    return JsonResponse({"success":False}, status=400) 


def axlepress_editsno(request):
    if request.method=="GET" and request.is_ajax():
        mysno=request.GET.get('sels_no')
        myval=list(AxleWheelPressing.objects.filter(sno=mysno).values('bo_no','bo_date','loco_type','date','axle_no','wheelno_de','wheelno_nde','bullgear_no','bullgear_make','pt_no','bo_qty','in_qty','out_qty'))
        AxleMachining.objects.filter(axle_no=myval[0]['axle_no']).update(axlefitting_status=False)
        WheelMachining.objects.filter(wheel_no=myval[0]['wheelno_de']).update(wheelfitting_status=False)
        return JsonResponse(myval, safe=False)
    return JsonResponse({"success":False}, status=400)  

def wheelnde(request):
    if request.method=="GET" and request.is_ajax():
        mybo = request.GET.get('wheel_no')
        myval = list(WheelMachining.objects.filter(wheelfitting_status=False,wheelinspection_status=True).values('wheel_no').exclude(wheel_no=mybo))
        return JsonResponse(myval, safe = False)
    return JsonResponse({"success":False}, status=400)

@login_required
@role_required(urlpass='/M20view/')
def M20view(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)

    wo_nop = empmast.objects.none()
    dictemper={}
    totindb=0
    cyear = datetime.date.today().year
    if "Superuser" in rolelist:
        tm=shop_section.objects.all()
        tmp=[]
        for on in tm:
            tmp.append(on.section_code)
        hd1=list(holidaylist.objects.filter(holiday_year=cyear))
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles':tmp,
            'hd':hd1,
            'lvdate':"dd-mm-yyyy",          
        }
        
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):
            w1 = empmast.objects.filter(shop_sec=rolelist[i]).values('empno').distinct()
            req = M2Doc.objects.filter(part_no__in=w1).values('batch_no').distinct()
            wo_nop = wo_nop | req

        context = {
            'sub':0,
            'subnav':subnav,
            'lenm' :len(rolelist),
            'wo_nop':wo_nop,
            'nav':nav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist,
            'lvdate':"dd-mm-yyyy", 
        }
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist,
            'lvdate':"dd-mm-yyyy", 
        }

    if request.method == "POST":
        submitvalue = request.POST.get('proceed')

        if submitvalue=="Print pdf":
            shop_sec = request.POST.get('shop_sec')
            lvdate=request.POST.get('lv_date')  
            m2=list(M20new.objects.filter(shop_sec=shop_sec,lv_date=datetime.datetime.strptime(lvdate,"%d-%m-%Y").date()))
            data={
                'm2':m2,
                'shop_sec':shop_sec,
                'lvdate':lvdate,
            }
            
            pdf = render_to_pdf('M20pdf.html',data)
            return HttpResponse(pdf, content_type='application/pdf')
           

        if submitvalue=='Add':
            rolelist=usermaster.role.split(", ")
            wo_nop = empmast.objects.none()
            shop_sec = request.POST.get('shop_sec')
            
            lvdate=request.POST.get('lv_date')
            
            
            m2=M20new.objects.filter(shop_sec=shop_sec,lv_date=datetime.datetime.strptime(lvdate,"%d-%m-%Y").date())
            if m2 is not None and len(m2):
                for mm in range(len(m2)):
                    temper = {str(mm):{"name":m2[mm].name,
                                               "ticketno":m2[mm].ticketno,
                                               "date":m2[mm].alt_date,
                                               "shift":m2[mm].shift,
                                               
                                               }}


                    totindb=totindb+1

                    dictemper.update(copy.deepcopy(temper))

            w1=M5SHEMP.objects.filter(shopsec=shop_sec).order_by('name').values('name').distinct() 
           
            wono=[]
            for w in range(len(w1)):
                wono.append(w1[w]['name'])
            
            alt_date="dd-mm-yy"
            
            if "Superuser" in rolelist:
                tm=shop_section.objects.all()
                tmp=[]
                for on in tm:
                    tmp.append(on.section_code)
                context={
                    'sub':1,
                    'lenm' :2,
                    'nav':nav,
                    'subnav':subnav,
                    'ip':get_client_ip(request),
                    'roles':tmp,
                    'shopsec':shop_sec,
                    'lvdate':lvdate,
                    'names':wono,
                    'dictemper':dictemper,
                    'totindb':totindb,
                    'alt_date':alt_date,
                }
            elif(len(rolelist)==1):
                for i in range(0,len(rolelist)):
                    w1 = empmast.objects.filter(shop_sec=rolelist[i]).values('empno').distinct()
                    req = M2Doc.objects.filter(part_no__in=w1).values('batch_no').distinct()
                    wo_nop = wo_nop | req

                context = {
                    'sub':1,
                    'subnav':subnav,
                    'lenm' :len(rolelist),
                    'wo_nop':wo_nop,
                    'nav':nav,
                    'ip':get_client_ip(request),
                    'usermaster':usermaster,
                    'roles' :rolelist,
                    'shopsec':shop_sec,
                    'lvdate':lvdate,
                    'empname':wono[0]['name'],
                }
            elif(len(rolelist)>1):
                context = {
                    'sub':1,
                    'lenm' :len(rolelist),
                    'nav':nav,
                    'subnav':subnav,
                    'ip':get_client_ip(request),
                    'usermaster':usermaster,
                    'roles' :rolelist,
                    'shopsec':shop_sec,
                    'lvdate':lvdate,
                    'empname':wono[0]['name'],
                }
        
        if submitvalue=='Save':
            shop_sec= request.POST.get('shop_sec')
            lv_date= request.POST.get('lv_date')
            tot=0
            tot=request.POST.get('totmebs')
            totindb=request.POST.get('totindb')
            for tb in range(1,int(totindb)+1):
                namedb=request.POST.get('namedb'+str(tb))
                ticketnodb=request.POST.get('ticketnodb'+str(tb))
                datedb=request.POST.get('datedb'+str(tb))
                shift=request.POST.get('shift'+str(tb))
                M20new.objects.filter(shop_sec=str(shop_sec),staff_no=str(ticketnodb), lv_date=datetime.datetime.strptime(lv_date,"%d-%m-%Y").date()).update(alt_date=str(datedb))
                

            for t in range(1,int(tot)+1):
                name=request.POST.get('name'+str(t))
                ticketno=request.POST.get('ticket'+str(t))
                date=request.POST.get('date'+str(t))
                shift=request.POST.get('shift'+str(t))

                M20new.objects.create(shop_sec=str(shop_sec),staff_no=str(ticketno), lv_date=datetime.datetime.strptime(lv_date,"%d-%m-%Y"), name=str(name), ticketno=str(ticketno), alt_date=str(date), shift=str(shift))

                try:
                    emp_detail= emp_details.objects.filter(shopsec=shop_sec, empno=ticketno).values('email_id','mobileno')
                    sms(emp_detail[0]['mobileno'],"Sunday/Holiday ("+lv_date +" ) alloted for working.")
                    email('crisdlwproject@gmail.com', 'cris@1234', emp_detail[0]['email_id']," Sunday/Holiday ("+lv_date +" ) alloted for working.")             
                except:
                    print("sending mail and SMS problem")
            messages.success(request, 'Successfully Saved !!!, Select new values to update')
    return render(request, "M20view.html", context)


def sms(phoneno,message):
    url = "http://enterprise.smsgupshup.com/GatewayAPI/rest?method=SendMessage&send_to=91"+str(phoneno)+"&msg="+message+" &msg_type=TEXT&userid=2000184632&auth_scheme=plain&password=pWK3H5&v=1.1&format=text"
    
    response = requests.request("POST", url)

def m20getstaffName(request):
    if request.method == "GET" and request.is_ajax():  
        from.models import Batch     
        shop_sec = request.GET.get('shop_sec')
        staff_no = request.GET.get('staff_no')
        w1=M5SHEMP.objects.filter(staff_no=staff_no).values('staff_no','name').distinct()
        wono = list(w1)
        return JsonResponse(wono, safe = False)
    return JsonResponse({"success":False}, status=400)


@login_required
@role_required(urlpass='/MG33view/')
def MG33view(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    empname = empmast.objects.filter(role__isnull=True,dept_desc='MECHANICAL').all()
    dictemper={}
    totindb=0
    examcode = []
    ex = exam_master.objects.all().values('exam_code',)
    for i in ex:
       examcode.append(i['exam_code']) 

    if "Superuser" in rolelist:
        tm=shop_section.objects.all()
        tmp=[]
        for on in tm:
            tmp.append(on.section_code)
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles':tmp,
            'lvdate':"dd-mm-yy",
            'examcode': examcode,
            'empname':empname,
        }
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):
            w1 = empmast.objects.filter(shop_sec=rolelist[i]).values('empno').distinct()
            req = M2Doc.objects.filter(part_no__in=w1).values('batch_no').distinct()
            wo_nop = wo_nop | req

        context = {
            'sub':0,
            'subnav':subnav,
            'lenm' :len(rolelist),
            'wo_nop':wo_nop,
            'nav':nav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist,
            'lvdate':"dd-mm-yy",
        }
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist,
            'lvdate':"dd-mm-yy",
        }
    if request.method == "POST":
        submitvalue = request.POST.get('proceed')
        if submitvalue=='Add':
            rolelist=usermaster.role.split(", ")
            wo_nop = empmast.objects.none()
            shop_sec = request.POST.get('shop_sec')
            lvdate=request.POST.get('updt_date')
            examcode = []
            ex = exam_master.objects.all().values('exam_code')
            for i in ex:
                examcode.append(i['exam_code']) 
           
           
            w1=Shemp.objects.filter(shopsec=shop_sec).values('name').distinct()
            wono=[]
            for w in range(len(w1)):
                wono.append(w1[w]['name'])
            w2 = empmast.objects.filter(role__isnull=True,dept_desc='MECHANICAL').values('empname')
            names=[]
            for w in range(len(w2)):
                names.append(w2[w]['empname'])
            
            alt_date="yyyy-mm-dd"
           
           
            if "Superuser" in rolelist:
                tm=shop_section.objects.all()
                tmp=[]
                for on in tm:
                    tmp.append(on.section_code)
                context={
                    'sub':1,
                    'lenm' :2,
                    'nav':nav,
                    'subnav':subnav,
                    'ip':get_client_ip(request),
                    'roles':tmp,
                    'shopsec':shop_sec,
                    'lvdate':lvdate,
                    'empname':names,
                    'names':wono,
                  
                     'totindb':0,
                    'alt_date':alt_date,
                    'examcode': examcode
                }
            elif(len(rolelist)==1):
                for i in range(0,len(rolelist)):
                    w1 = empmast.objects.filter(role__isnull=True,dept_desc='MECHANICAL').values('empname').distinct

                  
                context = {
                    'sub':1,
                    'subnav':subnav,
                    'lenm' :len(rolelist),
                    'wo_nop':wo_nop,
                    'nav':nav,
                    'ip':get_client_ip(request),
                    'usermaster':usermaster,
                    'roles' :rolelist,
                    'shopsec':shop_sec,
                    'lvdate':lvdate,
                    'empname':names,
                    'names':wono,
                    'examcode': examcode
                   
                }
            elif(len(rolelist)>1):
                context = {
                    'sub':1,
                    'lenm' :len(rolelist),
                    'nav':nav,
                    'subnav':subnav,
                    'ip':get_client_ip(request),
                    'usermaster':usermaster,
                    'roles' :rolelist,
                    'shopsec':shop_sec,
                    'lvdate':lvdate,
                    'empname':names,
                    'names':wono,
                    'examcode': examcode
                }
        
        if submitvalue=='Save':
            tot=request.POST.get('totmebs')
             
            place_exam = request.POST.get('place')
            prac_desc = request.POST.get('pracdesc')
            oral_desc = request.POST.get('oraldescr')
            sec_sup = request.POST.get('sec_sup')
            trade_test_officer= request.POST.get('trade_test_officer')
            foreman = request.POST.get('foreman')
            trade_test_admin = request.POST.get('trade_test_admin')
            examdate = request.POST.get('exam_date')
            shop_sec = request.POST.get('shop_sec')
            examcode = request.POST.get('exam_code')
            exam_sno=request.POST.get('exam_sno')
            orscore=request.POST.get('orscore')
            pscore=request.POST.get('prac')
            skills=request.POST.get('skillname')
            epname=request.POST.get('nameoname')
            stfno=request.POST.get('ticketfname')               
            pramedakno=request.POST.get('pramedakno')
            attachment=request.FILES['attachment']
            join_date=request.POST.get('updt_date')
            designation=request.POST.get('designation')
            department=request.POST.get('department')
            temp=float(orscore)+float(pscore)
            if temp >55:
              result='PASS'
            else:
              result='FAIL' 
            newdoc= MG33new(
                exam_sno=str(exam_sno),
                exam_date=str(examdate),
                updt_date =str(datetime.datetime.now().strftime ("%d-%m-%Y")),
                join_date =str(join_date),
                result=str(result),
                exam_code=str(examcode),
                shop_sec = str(shop_sec),
                name=str(epname), 
                skill=str(skills),
                staff_no=str(stfno),                 
                prac_score= str(pscore),
                oral_score= str(orscore),
                prac_desc= str(prac_desc),
                oral_desc= str(oral_desc),
                total_marks = str(temp), 
                sec_sup= str(sec_sup), 
                trade_test_officer = str(trade_test_officer),
                foreman= str(foreman),
                trade_test_admin= str(trade_test_admin), 
                place_of_exam=str(place_exam),
                pramedak_no=str(pramedakno),
                department=str(department),
                designation=str(designation),
                attachment=attachment,
                )
            newdoc.save()

            messages.success(request, 'Successfully Saved !!!, Select new values to update')
    return render(request, "MG33view.html", context)


def mg33getstaffno(request):
    if request.method == "GET" and request.is_ajax():  
        from.models import Batch      
        shop_sec = request.GET.get('shop_sec')
        name=request.GET.get('name')
        desgn=request.GET.get('desgn')
        w1=Shemp.objects.filter(shopsec=shop_sec,name=name, ).values('staff_no','desgn').distinct()

        wono = w1[0]['staff_no']
        cont ={
            "wono":wono,
        }
        return JsonResponse({"cont":cont}, safe = False)

    return JsonResponse({"success":False}, status=400)

def mg33getstaffdetails(request):
    if request.method == "GET" and request.is_ajax():  
        from.models import Batch      
        shop_sec = request.GET.get('shop_sec')        
        shop=list(Shemp.objects.filter(shopsec=shop_sec).values('updt_date','staff_no','name').distinct()) 
         
        return JsonResponse({'data':shop}, safe = False)

    return JsonResponse({"success":False}, status=400)


def mg33getexamdata(request):
    if request.method == "GET" and request.is_ajax():  
       
        id= request.GET.get('id')
        ex = MG33new.objects.filter(staff_no=id).all()
        officer= ex[0].trade_test_officer
        admin= ex[0].trade_test_admin
        foreman= ex[0].foreman
        sec_sup= ex[0].sec_sup
        
        empsec_supdet= empmast.objects.filter(empno=sec_sup,dept_desc='MECHANICAL').all()        
        empadmindet= empmast.objects.filter(empno=admin,dept_desc='MECHANICAL').all()       
        empforemandet=empmast.objects.filter(empno=foreman,dept_desc='MECHANICAL').all()  
        empofficerdet=empmast.objects.filter(empno=officer,dept_desc='MECHANICAL').all()
         
        data ={
        "sno":ex[0].exam_sno,
        "updt_date":ex[0].updt_date,
        "join_date":ex[0].join_date,
        "shop_sec":ex[0].shop_sec,
        "name":ex[0].name,
        "staff_no":ex[0].staff_no,
        "skill":ex[0].skill,
        "exam_code":ex[0].exam_code,
        "exam_date":ex[0].exam_date,
        "prac_desc":ex[0].prac_desc,
        "prac_score":ex[0].prac_score,
        "oral_desc":ex[0].oral_desc,
        "oral_score":ex[0].oral_score,
        "total_marks":ex[0].total_marks,
        "result":ex[0].result,
        "place_of_exam":ex[0].place_of_exam, 
        "sec_sup_no":empsec_supdet[0].empno,
        "sec_sup_name":empsec_supdet[0].empname,
        "sec_sup_design":empsec_supdet[0].desig_longdesc,
        
        "foreman_no":empforemandet[0].empno,
        "foreman_name":empforemandet[0].empname,
        "foreman_design":empforemandet[0].desig_longdesc,
        "officer_no":empofficerdet[0].empno,
        "officer_name":empofficerdet[0].empname,
        "officer_design":empofficerdet[0].desig_longdesc,
        "admin_no":empadmindet[0].empno,
        "admin_name":empadmindet[0].empname,
        "admin_design":empadmindet[0].desig_longdesc,          
        "department":ex[0].department,
        "designation":ex[0].designation,
        "pramedak_no":ex[0].pramedak_no,
        
        }
        
        return JsonResponse({"data":data}, safe = False)

    return JsonResponse({"success":False}, status=400)  


def mg33getexam(request):
    if request.method == "GET" and request.is_ajax():  
        examcode= request.GET.get('two')
        
        ex = exam_master.objects.filter(exam_code= examcode).all()    
     
        exam ={

            "exam_type":ex[0].exam_type,
            "exam_date":ex[0].exam_date,
            "department":ex[0].department,
            "designation":ex[0].designation,
        }
        
        return JsonResponse({"exam":exam}, safe = False)

    return JsonResponse({"success":False}, status=400)
	

@login_required
@role_required(urlpass='/m26view/')
def m26view(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    if "Superuser" in rolelist:
        tm=shop_section.objects.all()
        tmp=[]
        for on in tm:
            tmp.append(on.section_code)
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'ip':get_client_ip(request),
            'roles':tmp,
            'subnav':subnav,
        }
    return render(request,'m26view.html',context)

@login_required
@role_required(urlpass='/m27view/')
def m27view(request):
    pa_no = empmast.objects.none()
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    mon="dd-mm-yyyy"
    stfrate="staff rate"
    stfname="staff name"
    stfdesg="staff designation"
    if "Superuser" in rolelist: 
        shop_sec_temp = request.POST.get('shop_sec')
        stfno_temp = request.POST.get('staffNo')
        getDateList = list(M21DOCNEW1.objects.filter(shop_sec=shop_sec_temp,staff_no=stfno_temp).values('date').exclude(date__isnull=True)) 
        tm=shop_section.objects.all()
        tmp=[]
        for on in tm:
            tmp.append(on.section_code)
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'ip':get_client_ip(request),
            'roles':tmp,
            'subnav':subnav,
            'stfname': stfname,
            'stfdesg': stfdesg,
            'stfrate': stfrate,
            'getDateList':getDateList,
        }
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):
            req = Oprn.objects.all().filter(shop_sec=rolelist[i]).values('part_no').distinct()
            pa_no =pa_no | req
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'pa_no':pa_no,
            'roles' :rolelist,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'getDateList':getDateList,
        }
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'ip':get_client_ip(request),
            'roles' :rolelist,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'getDateList':getDateList,
        }
    if request.method == "POST":
        submitvalue = request.POST.get('proceed')
        if submitvalue=='Proceed':
            mon=request.POST.get('date1')
            shop_sec = request.POST.get('shop_sec')
            stfno = request.POST.get('staffNo')
            stfname = request.POST.get('staffName')
            stfdesg = request.POST.get('staffDesg')
            stfrate = request.POST.get('staffRate')
            wono=[]
            ex=list(Batch.objects.all().values('bo_no').exclude(bo_no__isnull=True).distinct())
            for i in ex:
                wono.append(i['bo_no'])
            if "Superuser" in rolelist:
                  tm=shop_section.objects.all()
                  tmp=[]
                  for on in tm:
                      tmp.append(on.section_code)
                  context = {
                        'roles':tmp,
                        'lenm' :2,
                        'nav':nav,
                        'ip':get_client_ip(request),
                        'sub': 1,
                        'mon':mon,
                        'stfno':stfno,
                        'shopsec': shop_sec,
                        'stfname': stfname,
                        'stfdesg': stfdesg,
                        'stfrate': stfrate,
                        'subnav':subnav,
                        'totindb':0,
                        'batch_no':wono,
                        'getDateList':getDateList,
                  }
            elif(len(rolelist)==1):
                  for i in range(0,len(rolelist)):

                        w1 = Oprn.objects.filter(shop_sec=rolelist[i]).values('part_no').distinct()
                        req = M2Doc.objects.filter(part_no__in=w1).values('batch_no').distinct()
                        wo_nop = wo_nop | req
                  context = {
                        'wo_nop':wo_nop,
                        'roles' :rolelist,
                        'usermaster':usermaster,
                        'lenm' :len(rolelist),
                        'nav': nav,
                        'ip': get_client_ip(request),
                        'sub': 1,
                        'mon':mon,
                        'stfno':stfno,
                        'shopsec': shop_sec,
                        'stfname': stfname,
                        'stfdesg': stfdesg,
                        'subnav':subnav,
                        'getDateList':getDateList,
                  }
            elif(len(rolelist)>1):
                  context = {
                        'lenm' :len(rolelist),
                        'nav':nav,
                        'ip':get_client_ip(request),
                        'usermaster':usermaster,
                        'roles' :rolelist,
                        'sub': 1,
                        'mon':mon,
                        'stfno':stfno,
                        'shopsec': shop_sec,
                        'stfname': stfname,
                        'stfdesg': stfdesg,
                        'subnav':subnav,
                        'getDateList':getDateList,
                  }

        if submitvalue=='Save':
            date1=request.POST.get('date1')
            shop_sec=request.POST.get('shopsec')
            staffNo=request.POST.get('stfno')
            staffName=request.POST.get('stfname')
            staffDesg =request.POST.get('stfdesg')
            staffRate=request.POST.get('staffRate')
            tot = request.POST.get('total')
            tot=int(tot)+1
            for i in range(1,int(tot)):    
                wono = request.POST.get("wono"+str(i))
                wodate = request.POST.get("wodate"+str(i))
                ofcdate = request.POST.get("ofcdate"+str(i))
                tothrs = request.POST.get("tothrs"+str(i))
                M27TimeSheet.objects.create(shop_sec=shop_sec, staff_no=staffNo, rate=staffRate, month=date1, tot_hrs=tothrs, ofc_date=ofcdate, wo_date=wodate, wo_no=wono, desg=staffDesg, name=staffName)

            emp_detail= emp_details.objects.filter(card_details='M27').values('email_id','mobileno')   
            mob_temp=[]            
            for i in emp_detail: 
                mob_temp.append(i['mobileno'])
            for j in range(len(mob_temp)):
                smsM18(mob_temp[j],"Dear Employee TimeSheet of indirect labour(M27) card has been generated.")          
            messages.success(request, 'Successfully Saved !')     
    return render(request,'m27view1.html',context) 
   




def m27getStaffNo(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        date = request.GET.get('date')
        staff_no = list(M5SHEMP.objects.filter(shopsec = shop_sec).values('staff_no').distinct())
        return JsonResponse(staff_no, safe = False)
    return JsonResponse({"success":False}, status=400)

def m27getDetails(request):
    if request.method == "GET" and request.is_ajax():
        staffNo = request.GET.get('staffNo')        
        getdetail = list(M5SHEMP.objects.filter(staff_no = staffNo).values('name','desgn').exclude(name__isnull=True).distinct())
        return JsonResponse(getdetail, safe = False)
    return JsonResponse({"success":False}, status=400)


def m27getDesignation(request): 
    if request.method == "GET" and request.is_ajax():
        staffNo = request.GET.get('staffNo')    
        staffName = request.GET.get('staffName')      
        getdetaildesgn = list(M5SHEMP.objects.filter(staff_no = staffNo, name = staffName).values('desgn').exclude(staff_no__isnull=True).distinct())
        return JsonResponse(getdetaildesgn, safe = False)
    return JsonResponse({"success":False}, status=400)

def m27getWorkOrder(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        wono = list(M5DOCnew.objects.filter(shop_sec = shop_sec).values('batch_no').distinct())
        return JsonResponse(wono, safe = False)
    return JsonResponse({"success":False}, status=400)

def m27getWorkOrderDate(request):
    if request.method == "GET" and request.is_ajax():
        wono = request.GET.get('wo')
        wono1 = list(Batch.objects.filter(bo_no = wono).values('b_expl_dt').exclude(bo_no__isnull=True).exclude(b_expl_dt__isnull=True).distinct())
        return JsonResponse(wono1, safe = False)
    return JsonResponse({"success":False}, status=400)



@login_required
@role_required(urlpass='/m18view/')
def m18view(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    if "Superuser" in rolelist:
        tm=M5SHEMP.objects.all().values('shopsec').distinct()
        tmp=[]
        for on in tm:
            tmp.append(on['shopsec'])
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'ip':get_client_ip(request),
            'roles':tmp,
            'subnav':subnav,
        }
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):
            req = M5DOCnew.objects.all().filter(shop_sec=rolelist[i]).values('batch_no').distinct()
            wo_nop =wo_nop | req
        context = {
            'sub':0,
            'subnav':subnav,
            'lenm' :len(rolelist),
            'wo_nop':wo_nop,
            'nav':nav,
            'ip':get_client_ip(request),
            'roles' :rolelist
        }
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles' :rolelist
        }
    if request.method == "POST":
        submitvalue = request.POST.get('proceed')
        if submitvalue=='Print/Save':
            shopIncharge    = request.POST.get('shopIncharge')
            shop_sec        = request.POST.get('shop_sec')
            wo_no           = request.POST.get('wo_no')
            part_nop        = request.POST.get('part_nop')
            refNo           = request.POST.get('refNo')
            extraTimePartNo = request.POST.get('extraTimePartNo')
            reasonSpecialAllowance = request.POST.get('reasonSpecialAllowance')
            forSpecialAllowance    = request.POST.get('forSpecialAllowance')
            totalExtraTime        = request.POST.get('totalExtraTime')
            opno            = request.POST.get('opno')
            opdesc          = request.POST.get('opdesc')
            discription     = request.POST.get('discription')
            quantity        = request.POST.get('quantity')
            setExtraTime    = request.POST.get('setExtraTime')    
            setno           = request.POST.get('setno')  
            proReason           = request.POST.get('proReason')  

            m18.objects.create(shopIncharge=str(shopIncharge),shop_sec=str(shop_sec),wo_no=str(wo_no),part_nop=str(part_nop), refNo=str(refNo), extraTimePartNo=str(extraTimePartNo), reasonSpecialAllowance=str(reasonSpecialAllowance), forSpecialAllowance=str(forSpecialAllowance), totalExtraTime=str(totalExtraTime),opno=str(opno),opdesc=str(opdesc), discription=str(discription), quantity=str(quantity), setExtraTime=str(setExtraTime), setno=str(setno), proReason=str(proReason))
           
            emp_detail= emp_details.objects.filter(card_details='M26').values('email_id','mobileno')
            mob_temp=[]            
            for i in emp_detail:
                mob_temp.append(i['mobileno'])
            for j in range(len(mob_temp)):
                smsM18(mob_temp[j],"Dear Employee Extra Time Card(M18) has been created. Your Ref No.- "+refNo+".")                

            messages.success(request, 'Successfully Saved ! Your ref No is :'+refNo)
    return render(request,"m18view.html",context)


def m26getwono(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        wono = list(M5DOCnew.objects.all().filter(shop_sec=shop_sec).values('batch_no').distinct())
        return JsonResponse(wono, safe = False)
    return JsonResponse({"success":False}, status=400)

def m26getStaffCatWorkHrs(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        w_no     = request.GET.get('wno')
        date     = request.GET.get('date')
        up_dt=[]       
        update_date = M5SHEMP.objects.filter(shopsec=shop_sec, date__isnull=False, updt_date__isnull=False).values('updt_date').order_by('-updt_date')
        for i in update_date:
            up_dt.append(i['updt_date'])    
        if shop_sec and w_no and date:  
            wono = list(M5SHEMP.objects.filter(shopsec=shop_sec,date__contains=date, updt_date__contains=up_dt[0], staff_no__isnull=False, total_time_taken__isnull=False,date__isnull=False).values('staff_no','cat','total_time_taken').distinct())            
            emp_detail= emp_details.objects.filter(card_details='M26').values('email_id','mobileno')   
            mob_temp=[]            
            for i in emp_detail: 
                mob_temp.append(i['mobileno'])
            for j in range(len(mob_temp)):
                smsM18(mob_temp[j],"Dear Employee TimeSheet of indirect labour(M26) card has been generated.")     
        else:
            wono = "NO"
        return JsonResponse(wono, safe = False)
    return JsonResponse({"success":False}, status=400)


@login_required
@role_required(urlpass='/m22view/')
def m22view(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()

    if "Superuser" in rolelist:
        tm=shop_section.objects.all().order_by('section_code')
        tmp=[]
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles':tm
        }
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):
            w1 = Oprn.objects.filter(shop_sec=rolelist[i]).values('part_no').distinct()
            req = Batch.objects.filter(part_no__in=w1).values('bo_no').distinct()
            wo_nop = wo_nop | req

        context = {
            'sub':0,
            'subnav':subnav,
            'lenm' :len(rolelist),
            'wo_nop':wo_nop,
            'nav':nav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist
        }
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist
        }
    if request.method == "POST":
        submitvalue = request.POST.get('proceed')
        if submitvalue=='Proceed':
            rolelist=usermaster.role.split(", ")
            wo_nop = empmast.objects.none()
            shop_sec = request.POST.get('shop_sec')
            wo_no = request.POST.get('wo_no')
            wo_no1 = request.POST.get('wo_no1')
            staff_no = request.POST.get('staff_no')
            mon = request.POST.get('mon')
            mm=int(mon)
            month=calendar.month_name[mm]
            cy=int(date.today().year)
            cm=int(date.today().month)
            mtt = monthrange(cy, mm)[1]
            mt=int(mtt)
            obj=Shemp.objects.filter(shopsec=shop_sec, staff_no=staff_no).values('name').distinct()
            obj1=M22.objects.filter(shop_sec=shop_sec, staff_no=staff_no, month=month, wo_no=wo_no, wo_no1=wo_no1).values('datelw', 'datecc', 'daterw', 'briefdd').distinct()
            datel=len(obj)
            if len(obj1) == 0:
                obj1=range(0, 1)
            obj2=M22.objects.filter(shop_sec=shop_sec, staff_no=staff_no, month=month, wo_no=wo_no, wo_no1=wo_no1).values('no_hrs')[:mt+1]

            obj3=[]
            if len(obj2) == 0:
                for i in range(1, mt+1):
                    obj3.append(0)
            else:
                    obj3=M22.objects.filter(shop_sec=shop_sec, staff_no=staff_no, month=month, wo_no=wo_no, wo_no1=wo_no1).values('no_hrs')[:mt+1]
                  
            if "Superuser" in rolelist:
                  tm=shop_section.objects.all()
                  tmp=[]
                  for on in tm:
                      tmp.append(on.section_code)
                  context = {
                        'roles': tmp,
                        'lenm': 2,
                        'nav': nav,
                        'ip': get_client_ip(request),
                        'mt': range(1, mt+1),
                        'mtt': range(1, mt + 1),
                        'mt1': mt,
                        'sub': 1,
                        'wo_no': wo_no,
                        'wo_no1': wo_no1,
                        'shop_sec':shop_sec,
                        'staff_no':staff_no,
                        'obj': obj,
                        'obj1': obj1,
                        'obj3':obj3,
                        'month': month,
                        'datel': datel,
                        'subnav':subnav
                  }
            elif(len(rolelist)==1):
                  for i in range(0,len(rolelist)):
                        
                        w1 = Oprn.objects.filter(shop_sec=rolelist[i]).values('part_no').distinct()
                        req = Batch.objects.filter(part_no__in=w1).values('bo_no').distinct()
                        wo_nop = wo_nop | req
                  context = {
                        'wo_nop':wo_nop,
                        'roles' :rolelist,
                        'usermaster':usermaster,
                        'lenm' :len(rolelist),
                        'nav': nav,
                        'ip': get_client_ip(request),
                        'mt': range(1, mt+1),
                        'mtt': range(1, mt + 1),
                        'mt1': mt,
                        'sub': 1,
                        'wo_no': wo_no,
                        'wo_no1': wo_no1,
                        'shop_sec': shop_sec,
                        'staff_no': staff_no,
                        'obj': obj,
                        'obj1': obj1,
                        'obj3': obj3,
                        'month': month,
                        'datel': datel,
                        'subnav':subnav
                  }
            elif(len(rolelist)>1):
                  context = {
                        'lenm' :len(rolelist),
                        'nav':nav,
                        'ip':get_client_ip(request),
                        'usermaster':usermaster,
                        'roles' :rolelist,
                        'mt': range(1, mt+1),
                        'mtt': range(1, mt + 1),
                        'mt1': mt,
                        'sub': 1,
                        'wo_no': wo_no,
                        'wo_no1': wo_no1,
                        'shop_sec': shop_sec,
                        'staff_no': staff_no,
                        'obj': obj,
                        'obj1': obj1,
                        'obj3': obj3,
                        'datel': datel,
                        'month': month,
                        'subnav':subnav
                  }
        if submitvalue=='Save':             
     
            obj = M22(
             update=request.POST.get('update_date'),
             letter_no=request.POST.get('letterno'),
             subject=request.POST.get('subject'),
             shop_sec=request.POST.get('shop_sec'),
             staff_no= request.POST.get('staff_no'), 
             month=request.POST.get('mon'), 
             wo_no=request.POST.get('wo_no'),
             wo_no1=request.POST.get('wo_no1'),
             datelw = request.POST.get('datelw'),
             datecc = request.POST.get('datecc'),
             daterw = request.POST.get('daterw'),
             briefdd = request.POST.get('briefdd'), 
             hd1 = request.POST.get('hd1'),
             hd2 = request.POST.get('hd2'),
             hd3 = request.POST.get('hd3'),            
             hd4 = request.POST.get('hd4'),
             hd5 = request.POST.get('hd5'),
             hd6 = request.POST.get('hd6'),
             hd7 = request.POST.get('hd7'),
             hd8 = request.POST.get('hd8'),
             hd9 = request.POST.get('hd9'),
             hd10 = request.POST.get('hd10'),
             hd11 = request.POST.get('hd11'),
             hd12 = request.POST.get('hd12'),
             hd13 = request.POST.get('hd13'),
             hd14 = request.POST.get('hd14'),
             hd15 = request.POST.get('hd15'),
             hd16 = request.POST.get('hd16'),
             hd17 = request.POST.get('hd17'),
             hd18 = request.POST.get('hd18'),
             hd19 = request.POST.get('hd19'),
             hd20 = request.POST.get('hd20'),
             hd21 = request.POST.get('hd21'),
             hd22 = request.POST.get('hd22'),
             hd23 = request.POST.get('hd23'),
             hd24 = request.POST.get('hd24'),
             hd25 = request.POST.get('hd25'),
             hd26 = request.POST.get('hd26'),
             hd27 = request.POST.get('hd27'),
             hd28 = request.POST.get('hd28'),
             hd29 = request.POST.get('hd29'),
             hd30 = request.POST.get('hd30'),
             hd31 = request.POST.get('hd31'),             
             )
            obj.save()
            
            messages.success(request, 'Successfully Updated!, Select new values to update')
    return render(request, "m22view.html", context)


def m22getwono(request):
    if request.method == "GET" and request.is_ajax():
        from.models import Batch

        shop_sec = request.GET.get('shop_sec')
        w1 = Oprn.objects.filter(shop_sec=shop_sec).values('part_no').distinct()
        w2 = Batch.objects.filter(status='R').values('bo_no').exclude(bo_no__isnull=True).order_by('bo_no').distinct('bo_no')
        wono = list(w2)
        return JsonResponse(wono, safe = False)
    return JsonResponse({"success":False}, status=400)

def m22getstaff(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        staff_no = list(Shemp.objects.filter(shopsec=shop_sec).values('staff_no','name', 'desgn').order_by('staff_no').distinct())

        return JsonResponse({'data':staff_no}, safe = False)
    return JsonResponse({"success":False}, status=400)

def m22getdata(request):
    if request.method == "GET" and request.is_ajax():
        id = request.GET.get('id')
        m22list = M22.objects.filter(id=id).all()
        staff_no=m22list[0].staff_no
        staff_details = list(Shemp.objects.filter(staff_no=staff_no).values('staff_no','name', 'desgn').distinct())
        
        data={
        "update":m22list[0].update,
        "letter_no":m22list[0].letter_no,
        "subject":m22list[0].subject,
        "datelw":m22list[0].datelw,
        "datecc":m22list[0].datecc,
        "daterw":m22list[0].daterw,
        "briefdd":m22list[0].briefdd,
        "no_hrs":m22list[0].no_hrs,
        "wo_no":m22list[0].wo_no,
        "wo_no1":m22list[0].wo_no1,
        "shop_sec":m22list[0].shop_sec,
        "staff_no":m22list[0].staff_no,
        "month":m22list[0].month,
        "name":staff_details[0]['name'],
        "design":staff_details[0]['desgn'],
        "hd1":m22list[0].hd1,
        "hd2":m22list[0].hd2,
        "hd3":m22list[0].hd3,
        "hd4":m22list[0].hd4,
        "hd5":m22list[0].hd5,
        "hd6":m22list[0].hd6,
        "hd7":m22list[0].hd7,
        "hd8":m22list[0].hd8,
        "hd9":m22list[0].hd9,
        "hd10":m22list[0].hd10,
        "hd11":m22list[0].hd11,
        "hd12":m22list[0].hd12,
        "hd13":m22list[0].hd13,
        "hd14":m22list[0].hd14,
        "hd15":m22list[0].hd15,
        "hd16":m22list[0].hd16,
        "hd17":m22list[0].hd17,
        "hd18":m22list[0].hd18,
        "hd19":m22list[0].hd19,
        "hd20":m22list[0].hd20,
        "hd21":m22list[0].hd21,
        "hd22":m22list[0].hd22,
        "hd23":m22list[0].hd23,
        "hd24":m22list[0].hd24,
        "hd25":m22list[0].hd25,
        "hd26":m22list[0].hd26,
        "hd27":m22list[0].hd27,
        "hd28":m22list[0].hd28,
        "hd29":m22list[0].hd29,
        "hd30":m22list[0].hd30,
        "hd31":m22list[0].hd31,
        }
        return JsonResponse({'data':data}, safe = False)
    return JsonResponse({"success":False},status=400)

@login_required
@role_required(urlpass='/m22view/')
def m22viewlist(request):
    cuser=request.user
    usermaster=user_master.objects.filter(emp_id=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    ex=M22.objects.all().order_by('-id')
    context={
            'totindb':0,
            'nav':nav,
            'ip':get_client_ip(request),
            'subnav':subnav,
            'obj':ex,
        }
         
    return render(request,"m22viewlist.html",context)



@login_required
@role_required(urlpass='/m15view/')
def m15view(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    if "Superuser" in rolelist:
        tm=shop_section.objects.all()
        tmp=[]
        for on in tm:
            tmp.append(on.section_code)
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles':tmp
        }
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):
            req = M13.objects.all().filter(shop=rolelist[i]).values('wo').distinct()
            wo_nop =wo_nop | req
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'wo_nop':wo_nop,
            'nav':nav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist,
            'subnav':subnav,
        }
        
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'nav':nav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist,
            'subnav':subnav,
        }
    if request.method == "POST":
        
        submitvalue = request.POST.get('proceed')
        if submitvalue=='Proceed':
            shop_sec = request.POST.get('shop_sec')
            wo_no = request.POST.get('wo_no')
            part_no = request.POST.get('part_no')
            obj = M13.objects.filter(shop=shop_sec,part_no=part_no,wo=wo_no).values('m13_no','rate','allocation').distinct()
            obj1 = Part.objects.filter(partno=part_no).values('des')
            obj2 = M15.objects.filter(shop=shop_sec,wo=wo_no,part_no=part_no).values('doc_no','c_d_no','unit','metric_ton_returned','qty_ret','metric_ton_received','qty_rec_inward','rupees','paise','allocation','rate','mat_ret_date','mat_rec_date','posted_date')
            noprint=0
            leng = obj.count()
            leng1 = obj1.count()
            leng2 = obj2.count()
            if len(obj2) == 0:
                noprint=1

            context = {
                        'obj': obj,
                        'obj1': obj1,
                        'obj2': obj2,
                        'len': leng,
                        'len1':leng1,
                        'len2':leng2,
                        'shop_sec': shop_sec,
                        'wo_no': wo_no,
                        'part_no': part_no,
                        'noprint':noprint,
                        'sub' : 1,
                        'nav':nav,
                        'ip':get_client_ip(request),  
                        'subnav':subnav,
            }
            if "Superuser" in rolelist:
                tm=shop_section.objects.all()
                tmp=[]
                for on in tm:
                    tmp.append(on.section_code)
                context={
                    'sub':0,
                    'lenm' :2,
                    'nav':nav,
                    'subnav':subnav,
                    'ip':get_client_ip(request),
                    'roles':tmp,
                    'obj': obj,
                    'obj1': obj1,
                    'obj2': obj2,
                    'len': leng,
                    'len1':leng1,
                    'len2':leng2,
                    'shop_sec': shop_sec,
                    'wo_no': wo_no,
                    'part_no': part_no,
                    'noprint':noprint,
                    'sub' : 1,
                    'nav':nav,
                    'ip':get_client_ip(request),  
                    'subnav':subnav,
                }
            elif(len(rolelist)==1):
                for i in range(0,len(rolelist)):
                    req = M13.objects.all().filter(shop=rolelist[i]).values('wo').distinct()
                    wo_nop =wo_nop | req
                context = {
                    'sub':0,
                    'lenm' :len(rolelist),
                    'wo_nop':wo_nop,
                    'nav':nav,
                    'ip':get_client_ip(request),
                    'usermaster':usermaster,
                    'roles' :rolelist,
                    'subnav':subnav,
                    'obj': obj,
                    'obj1': obj1,
                    'obj2': obj2,
                    'len': leng,
                    'len1':leng1,
                    'len2':leng2,
                    'shop_sec': shop_sec,
                    'wo_no': wo_no,
                    'part_no': part_no,
                    'noprint':noprint,
                    'sub' : 1,
                    'nav':nav,
                    'ip':get_client_ip(request),  
                    'subnav':subnav,
                }
        
            elif(len(rolelist)>1):
                context = {
                    'sub':0,
                    'lenm' :len(rolelist),
                    'nav':nav,
                    'ip':get_client_ip(request),
                    'usermaster':usermaster,
                    'roles' :rolelist,
                    'subnav':subnav,
                    'obj': obj,
                    'obj1': obj1,
                    'obj2': obj2,
                    'len': leng,
                    'len1':leng1,
                    'len2':leng2,
                    'shop_sec': shop_sec,
                    'wo_no': wo_no,
                    'part_no': part_no,
                    'noprint':noprint,
                    'sub' : 1,
                    'nav':nav,
                    'ip':get_client_ip(request),  
                    'subnav':subnav,
                }
        if submitvalue =='Submit':
                leng=request.POST.get('len')
                shop_sec= request.POST.get('shop_sec')
                wo_no = request.POST.get('wo_no')
                part_no = request.POST.get('part_no')
                unit = request.POST.get('unit')
                allocation = request.POST.get('allocation')
                rate = request.POST.get('rate')
                rupees = request.POST.get('rupees')
                paise = request.POST.get('paise')
                mat_ret_date = request.POST.get('mat_ret_date')
                mat_rec_date = request.POST.get('mat_rec_date')
                m13_no = request.POST.get('m13_no')
                des = request.POST.get('des')
                posted_date = request.POST.get('posted_date')
                doc_no = request.POST.get('doc_no')
                c_d_no = request.POST.get('c_d_no')
                qty_ret = request.POST.get('qty_ret')
                qty_rec_inward = request.POST.get('qty_rec_inward')
                metric_ton_returned = request.POST.get('metric_ton_returned')
                metric_ton_received = request.POST.get('metric_ton_received')
                now = datetime.datetime.now()

                m15obj = M15.objects.filter(shop=shop_sec,wo=wo_no).distinct()
                if len(m15obj) == 0:
                    
                    M15.objects.create(login_id=request.user,shop=str(shop_sec),wo=str(wo_no),part_no=str(part_no),last_modified=str(now),unit=str(unit),allocation=str(allocation),rate=str(rate),rupees=str(rupees),paise=str(paise),mat_ret_date=str(mat_ret_date),
                    mat_rec_date=str(mat_rec_date),m13_no=str(m13_no),metric_ton_returned=str(metric_ton_returned),metric_ton_received=str(metric_ton_received),des=str(des),posted_date=str(posted_date),doc_no=str(doc_no),c_d_no=str(c_d_no),qty_ret=str(qty_ret),qty_rec_inward=str(qty_rec_inward))
                    
                

                else:
                    M15.objects.filter(shop=shop_sec,wo=wo_no,part_no=str(part_no)).update(unit=str(unit),allocation=str(allocation),rate=str(rate),rupees=str(rupees),paise=str(paise),mat_ret_date=str(mat_ret_date),
                    mat_rec_date=str(mat_rec_date),last_modified=str(now),login_id=request.user.username,posted_date=str(posted_date),metric_ton_returned=str(metric_ton_returned),metric_ton_received=str(metric_ton_received),m13_no=str(m13_no),des=str(des),doc_no=str(doc_no),c_d_no=str(c_d_no),qty_ret=str(qty_ret),qty_rec_inward=str(qty_rec_inward))
            
                wo_nop=M13.objects.all().values('wo').distinct()

    
 
    
    return render(request,"m15view.html",context)

def m15getwono(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        wo_no = list(M13.objects.filter(shop = shop_sec).values('wo').distinct())
        return JsonResponse(wo_no, safe = False)
    return JsonResponse({"success":False}, status=400)

def m15getpart_no(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        wo_no = request.GET.get('wo_no')
        part_no = list(M13.objects.filter(shop = shop_sec,wo=wo_no).values('part_no').distinct())
        return JsonResponse(part_no, safe = False)
    return JsonResponse({"success":False}, status=400)



def m18getwono(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        wono = list(M5DOCnew.objects.filter(shop_sec = shop_sec).values('batch_no').distinct())
        return JsonResponse(wono, safe = False)
    return JsonResponse({"success":False}, status=400)    

def m18getpart_no(request):
    if request.method == "GET" and request.is_ajax():
        wo_no = request.GET.get('wo_no')
        shop_sec = request.GET.get('shop_sec')
        part_no = list(M5DOCnew.objects.filter(batch_no =wo_no,shop_sec=shop_sec).values('part_no').exclude(part_no__isnull=True).distinct())
        return JsonResponse(part_no, safe = False)
    return JsonResponse({"success":False}, status=400)    

def m18getoperation_no(request):
    if request.method == "GET" and request.is_ajax():
        part_nop = request.GET.get('part_nop')
        shop_sec = request.GET.get('shop_sec')
        opnno = list(Oprn.objects.filter(part_no =part_nop,shop_sec=shop_sec).values('opn').exclude(part_no__isnull=True).distinct())
        return JsonResponse(opnno, safe = False)
    return JsonResponse({"success":False}, status=400) 

def m18getoperation_desc(request):
    if request.method == "GET" and request.is_ajax():
        part_nop = request.GET.get('part_nop')
        shop_sec = request.GET.get('shop_sec')
        opno = request.GET.get('opno')
        opndesc = list(Oprn.objects.filter(part_no=part_nop,shop_sec=shop_sec,opn=opno).values('des').exclude(part_no__isnull=True).distinct())
        return JsonResponse(opndesc, safe = False)
    return JsonResponse({"success":False}, status=400) 

def m18getRef_no(request):
    if request.method == "GET" and request.is_ajax():
        wo_no = request.GET.get('wo_no')
        shop_sec = request.GET.get('shop_sec')
        part_nop = request.GET.get('part_nop')
        refno = list(M5DOCnew.objects.filter(batch_no =wo_no,shop_sec=shop_sec,part_no =part_nop).values('m5glsn').exclude(part_no__isnull=True).distinct())
        return JsonResponse(refno, safe = False)
    return JsonResponse({"success":False}, status=400) 







@login_required
@role_required(urlpass='/m13view/')
def m13view(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    if "Superuser" in rolelist:
        tm=shop_section.objects.all()
        tmp=[]
        for on in tm:
            tmp.append(on.section_code)
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles':tmp
        }
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):
            req = M13.objects.all().filter(shop=rolelist[i]).values('wo').distinct()
            wo_nop =wo_nop | req
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'wo_nop':wo_nop,
            'nav':nav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist,
            'subnav':subnav,
        }
        
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'nav':nav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist,
            'subnav':subnav,
        }
    if request.method == "POST":
        
        submitvalue = request.POST.get('proceed')
        if submitvalue=='Proceed':
            
            shop_sec = request.POST.get('shop_sec')
            wo_no = request.POST.get('wo_no')
            part_no = request.POST.get('part_nop')
            m13_no=request.POST.get('m13_no')
            slno=request.POST.get('slno')
            obj = list(M13.objects.filter(shop=shop_sec,part_no=part_no,wo=wo_no,m13_no=m13_no,slno=slno).values('m13_no','m13_date','qty_tot','qty_ins','qty_pas','qty_rej','opn','vendor_cd','fault_cd','staff_no','reason','slno','m13_sn','wo_rep','m15_no','epc','rej_cat','job_no').distinct())
            obj1 = Part.objects.filter(partno=part_no).values('des','drgno').distinct()
            
            leng = len(obj)
            leng1 = len(obj1)
            if "Superuser" in rolelist:
                tm=shop_section.objects.all()
                tmp=[]
                for on in tm:
                    tmp.append(on.section_code)
                context={
                    'sub':1,
                    'lenm' :2,
                    'nav':nav,
                    'subnav':subnav,
                    'ip':get_client_ip(request),
                    'roles':tmp,
                    'obj': obj,
                    'obj1': obj1,
                    'len': leng,
                    'len1':leng1,
                    'shop_sec': shop_sec,
                    'wo_no': wo_no,
                    'part_no': part_no,
                    'slno' : slno,
                }
            elif(len(rolelist)==1):
                for i in range(0,len(rolelist)):
                    req = M13.objects.all().filter(shop=rolelist[i]).values('wo').distinct()
                    wo_nop =wo_nop | req
                context = {
                    'sub':1,
                    'lenm' :len(rolelist),
                    'wo_nop':wo_nop,
                    'nav':nav,
                    'ip':get_client_ip(request),
                    'usermaster':usermaster,
                    'roles' :rolelist,
                    'subnav':subnav,
                    'obj': obj,
                    'obj1': obj1,
                    'len': leng,
                    'len1':leng1,
                    'shop_sec': shop_sec,
                    'wo_no': wo_no,
                    'part_no': part_no,
                }
                
            elif(len(rolelist)>1):
                context = {
                    'sub': 1,
                    'lenm' :len(rolelist),
                    'nav':nav,
                    'ip':get_client_ip(request),
                    'usermaster':usermaster,
                    'roles' :rolelist,
                    'subnav':subnav,
                    'obj': obj,
                    'obj1': obj1,
                    'len': leng,
                    'len1':leng1,
                    'shop_sec': shop_sec,
                    'wo_no': wo_no,
                    'part_no': part_no,
                }

        if submitvalue=='Save':
                slno= request.POST.get('slno')
                m13_sn = request.POST.get('m13_sn')
                epc = request.POST.get('epc')
                qty_tot = request.POST.get('qty_tot')
                qty_ins = request.POST.get('qty_ins')
                qty_pas = request.POST.get('qty_pas')
                qty_rej = request.POST.get('qty_rej')
                vendor_cd = request.POST.get('vendor_cd')
                opn = request.POST.get('opn')
                job_no = request.POST.get('job_no')
                fault_cd = request.POST.get('fault_cd')
                emp_id = request.POST.get('emp_id')
                wo_rep = request.POST.get('wo_rep')
                m13no = request.POST.get('m13no')
                m15_no = request.POST.get('m15_no')
                rej_cat = request.POST.get('rej_cat')
                reason = request.POST.get('reason')
                if m13_sn and qty_tot and qty_ins and qty_pas and qty_rej and vendor_cd and opn and job_no and fault_cd and wo_rep and m15_no and rej_cat and reason and m13no and slno and epc:
                    M13.objects.filter(m13_no=m13no).update(slno=slno,staff_no=emp_id,m13_sn=m13_sn,epc=epc,qty_tot=qty_tot,qty_ins=qty_ins,qty_pas=qty_pas,qty_rej=qty_rej,vendor_cd=vendor_cd,opn=opn,job_no=job_no,fault_cd=fault_cd,wo_rep=wo_rep,m13_no=m13no,m15_no=m15_no,rej_cat=rej_cat,reason=reason)
                    messages.success(request,'Successfully Updated')
                else:
                    messages.success(request,'Please enter all fields!')
    return render(request,"m13view.html",context)

def m13viewgetwono(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        wo_no = list(M13.objects.filter(shop = shop_sec).values('wo').distinct())
        return JsonResponse(wo_no, safe = False)
    return JsonResponse({"success":False}, status=400)

def m13viewgetpano(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        wo_no = request.GET.get('wo_no')
        part_no = list(M13.objects.filter(shop = shop_sec,wo=wo_no).values('part_no').distinct())
        return JsonResponse(part_no, safe = False)
    return JsonResponse({"success":False}, status=400)

def m13getno(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        wo_no = request.GET.get('wo_no')
        part_no = request.GET.get('part_nop')
        pp = list(M13.objects.filter(shop=shop_sec,part_no=part_no,wo=wo_no).values('m13_no').distinct())
        return JsonResponse(pp, safe = False)
    return JsonResponse({"success":False}, status=400)

def m13getslno(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        wo_no = request.GET.get('wo_no')
        part_no = request.GET.get('part_nop')
        m13_no = request.GET.get('m13_no')
        sl = list(M13.objects.filter(shop=shop_sec,part_no=part_no,wo=wo_no,m13_no=m13_no).values('slno').distinct())
        return JsonResponse(sl, safe = False)
    return JsonResponse({"success":False}, status=400)

def m13getdata(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        wo_no = request.GET.get('wo_no')
        part_no = request.GET.get('part_nop')
        m13_no = request.GET.get('m13_no')
        slno = request.GET.get('slno')
        obj = list(M13.objects.filter(shop=str(shop_sec),part_no=str(part_no),wo=str(wo_no),m13_no=str(m13_no),slno=str(slno)).values('m13_no','m13_date','qty_tot','qty_ins','qty_pas','qty_rej','opn','vendor_cd','fault_cd','staff_no','reason','slno','m13_sn','wo_rep','m15_no','epc','rej_cat','job_no').distinct())
        obj1 = list(Part.objects.filter(partno=part_no).values('des','drgno').distinct())
        obj.append(obj1)
        return JsonResponse(obj, safe = False)
    return JsonResponse({"success":False}, status=400)

def Childnode(request,part,res,code):
    arr1=[part]
    for i in Nstr.objects.raw('WITH RECURSIVE temp AS (SELECT id_pk,"CP_PART" FROM public."NSTR" WHERE "PP_PART"=%s and "CP_PART" is not null and "PTC"=%s and "L_TO"=%s UNION SELECT e.id_pk,e."CP_PART" FROM public."NSTR" e INNER JOIN temp t ON t."CP_PART" = e."PP_PART" where e."CP_PART" is not null and e."PTC"=%s and e."L_TO"=%s ) select * from temp;',[part,code,'9999',code,'9999']):
        if i.cp_part not in arr1:
            arr1.append(i.cp_part)
    return arr1

from django.db.models import Avg, Max, Min, Sum
from django.db.models import FloatField
from django.db.models.functions import Cast
from django.db import connection
@login_required
@role_required(urlpass='/CardGeneration/')
def CardGeneration(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    assmno = Batch.objects.all().values('part_no').exclude(part_no__isnull=True).distinct().order_by('part_no')
    context = {
        'ip':get_client_ip(request),
        'nav':nav,
        'subnav':subnav,
    }
    if request.method=="POST":
        batch = request.POST.get('batchno')
        bval=request.POST.get('cardbutton')
        asmno=request.POST.get('asslyno')
        card = 'X'
        et = request.POST.get('ep_type')
        et=et.upper()
        lofr=request.POST.get('loco_fr')
        loto=request.POST.get('loco_to')
        bpe = request.POST.get('b_type')
        bpe=bpe.upper()
        bty=request.POST.get('b_qty')
        wkf1 = request.POST.get('wkf')
        alt = request.POST.get('ralt')
        bno1 = request.POST.get('brn_no')
        prtdt=datetime.datetime.now().strftime ("%Y-%m-%d")
        Batch1=Batch.objects.filter(part_no=asmno,bo_no=batch,brn_no=bno1).values('bo_no')
        if len(Batch1)==0:
            Batch.objects.create(bo_no=batch,part_no =asmno,ep_type =et,loco_fr =lofr,loco_to =loto,batch_qty =int(bty),batch_type =bpe,uot_wk_f =int(wkf1),brn_no =int(bno1),b_expl_dt=prtdt )
        ades=list(Part.objects.filter(partno = asmno).values('des').distinct()) 
        if len(ades)!=0:
            ades=ades[0]['des']
        bat=Batch.objects.filter(part_no=asmno,bo_no=batch,brn_no=bno1).values('ep_type','brn_no','loco_to','loco_fr','batch_type','batch_qty','seq','uot_wk_f','version')
        if len(bat)!=0:
            epc=bat[0]['ep_type']
            version=bat[0]['version']
            brn=bno1
            l_to=bat[0]['loco_to']
            l_fr=bat[0]['loco_fr']
            seq=bat[0]['seq']
            bqty=bat[0]['batch_qty']
            btype=bat[0]['batch_type']
            DUE_WK=bat[0]['uot_wk_f']
        else:
            epc=''
            brn=bno1
            l_to=''
            l_fr=''
            seq=''
            bqty=''
            btype=''
            DUE_WK=''
            version=''
        ep=''
        for i in Code.objects.raw('select id,substr("NUM_1" :: text, 1,8) as num_1 from public."CODE" where "CD_TYPE"=%s and "CODE"=%s order by "CD_TYPE","CODE";',['11',epc]):
            ep=i.num_1
            break
        if ep=='':
            msg="No Such End Product"
        EP_PART= ep
        if ep ==asmno:
            NASSLY='1'
        else:
            NASSLY = str(CPQm14(asmno, epc, ep, l_to))
        u=0
        if DUE_WK != '':
            u=DUE_WK
        if u>3000:
            OUT_WK=(int(u/100)*52)+(u%100)
        else:
            OUT_WK=(int((u/100) + 100)*52)+(u%100)
        dt=[]
        DTS=batchExplode(request,asmno,'1',dt,epc,l_fr,l_to,'')
        #DTS=list(Tempm14expl.objects.all().order_by('part_no'))
        if (btype == "R"):
            Tempm14expl.objects.filter(rm_partno__isnull=True).delete()
            DTS=list(Tempm14expl.objects.all())
        nom14 = 0
        check=M2Docnew1.objects.filter(batch_no=batch,assly_no=asmno,brn_no=brn).values('brn_no')
        print(check)
        if check.count()>0:
            M2Docnew1.objects.filter(batch_no=batch,assly_no=asmno,brn_no=brn).delete()
            M5Docnew1.objects.filter(batch_no=batch,assly_no=asmno,brn_no=brn).delete()
            M14M4new1.objects.filter(bo_no=batch,assly_no=asmno,brn_no=brn).delete()
        if batch and bval and asmno:
        ##################### m2 ###########################
            cursor = connection.cursor()
            DTM2=DTS
            SCH='M'
            sch=''
            n=[]
            if (btype == "O" and alt == "F" and sch == "M"):
                return true
            if btype=="O":
                for i in range(len(DTM2)):
                    if DTM2[i]['ptc']  not in ['M','Z','C']:
                        n.append(i)
                    else:
                        DTM2[i].update({'del_fl':'','f_shopsec':'','rc_st_wk':'','scl_cl':'','cut_sher':'','m2sln':'','brn_no':'','m4_no':'',})                
            else:
                for i in range(len(DTM2)):
                    if DTM2[i]['ptc']  not in ['M','Z']:
                        n.append(i)
                    else:
                        DTM2[i].update({'del_fl':'','f_shopsec':'','rc_st_wk':'','scl_cl':'','cut_sher':'','m2sln':'','brn_no':'','m4_no':'',})                
            n.sort(reverse=True)
            for j in n:
                del DTM2[j]
            count = 1
            a=''
            b=''
            st=''
            for i in range(len(DTM2)):
                if alt == "F":
                    tm=list(M2Docnew1.objects.filter(~Q(scl_cl='T'),part_no=DTM2[i]["part_no"],brn_no=brn).values('scl_cl'))
                    if len(tm) > 0 :
                        DTM2[i]["del_fl"] = "Y"
                tm=list(Oprn.objects.filter(part_no=DTM2[i]["part_no"],del_fl__isnull=True).values('shop_sec').order_by('part_no','opn'))
                if len(tm)!=0:
                    tm=tm[0]['shop_sec']
                else:
                    tm=''
                if DTM2[i]["del_fl"] =="":
                    DTM2[i]["f_shopsec"] = tm
                if DTM2[i]["f_shopsec"] == "":
                    DTM2[i]["del_fl"] = "Y"
                r = 0
                o = 0
                s = 0
                if OUT_WK != '':
                    o = int(OUT_WK)
                sh=list(Shop.objects.filter(shop=DTM2[i]["f_shopsec"]).values('shop_ldt').order_by('shop'))
                if len(sh) != 0:
                    s=int(sh[0]['shop_ldt'])
                if DTM2[i]["del_fl"] == "":
                    d=int((o-s)/52)
                    r=((d % 100) * 100 + ((o - s) % 52))
                    DTM2[i]["rc_st_wk"] =r
                    DTM2[i]["scl_cl"] = scl_cl(s,alt,epc)
                if btype == "O" and alt == "F":
                    if (DTM2[i]["scl_cl"]!= ""):
                        if len(SCH) > 1:
                            st = SCH
                        else:
                            st = SCH
                        a= DTM2[i]["scl_cl"]
                        b= st
                        if a > b:
                            if DTM2[i]["del_fl"] == "":
                                DTM2[i]["del_fl"]="Y"
                        if DTM2[i]["scl_cl"] == "" and DTM2[i]["del_fl"] != "":
                            DTM2[i]["del_fl"] = "Y"
                        if DTM2[i]["rm_ptc"] == "R" and DTM2[i]["del_fl"] == "":
                            cuts=Cutpart.objects.filter(partno=DTM2[i]["part_no"],epc=epc).values('cut_dia').order_by('cut_dia','partno')
                            if len(cuts)>0:
                                DTM2[i]["cut_sher"] ==cuts[0]['cut_dia']
                            else:
                                DTM2[i]["cut_sher"] =''
                if DTM2[i]["del_fl"] == "":
                    DTM2[i]["m2sln"] = i+1
                    DTM2[i]["del_fl"] = "B"
            #################### m4 ###########################
            import copy
            start_with=0
            DTM4 = copy.deepcopy(DTM2)
            _sn = 0
            sch='X'############
            if (btype == "O" and alt == "F" and sch == "M"):
                return True
            # for k in range(len(DTM2)):
            #     if DTM2[k]['rm_partno']!='' and DTM2[k]['m2sln']>0:
            #         DTM4.append(DTM2[k])
            DTM4=list(filter(lambda x: (x['rm_partno'] !='' and x['m2sln']!=''),DTM4))
            #=list(filter(lambda x: if(x['rm_partno']!='' and x['m2sln']>0),DTM2))
            if (alt == "T"):
                for i in range(len(DTM4)):
                    DTM4[i].update({'pm_no':XXALT,'assly_no':EP_PART})                
            else:
                for d in DTM4:
                    d['pm_no'] = d.pop('f_shopsec')
                for i in range(len(DTM4)):
                    DTM4[i].update({'assly_no':asmno})  
            Tempm14M4new.objects.all().delete()
            r = 0
            for i in range(len(DTM4)):
                if (DTM4[i]["cut_sher"] != ""):
                    continue
                InsrtQry = ""
                if DTM4[i]["ptc"]!="C":
                    rmpart=DTM4[i]["rm_partno"]
                else:
                    rmpart=DTM4[i]["m2sln"]

                if DTM4[i]["ptc"]=="C":
                    qt=DTM4[i]["rm_qty"]
                    doci="C"
                else:
                    qt=float(DTM4[i]["rm_qty"])*float(DTM4[i]["qty"])*float(bqty)
                    doci=DTM4[i]["rm_ptc"]
                Tempm14M4new.objects.create(doc_code='88',rm_part =rmpart ,pm_no = DTM4[i]["pm_no"],part_no = DTM4[i]["rm_partno"],qty = qt,l_fr =l_fr ,l_to = l_to,bo_no = batch,assly_no = DTM4[i]["assly_no"],seq =seq ,due_wk = DTM4[i]["rc_st_wk"],brn_no = brn,doc_ind =doci ,epc = epc)
                r = r + 1
            if (r > 0):
                if (btype != "O"):
                    cursor.execute('''select count(*) from (select t.*, p."SHOP_UT" unit from  (select max("DOC_CODE") doc_code, "PM_NO", "RM_PART",max("RM_PART") part_no,sum("QTY"),max("L_FR") l_fr,max( "L_TO") l_to, 
                    max("BO_NO") bo_no,max("ASSLY_NO") assly_no,max("SEQ") seq,min("DUE_WK") due_wk,max("BRN_NO") brn_no,max("EPC") epc,max("DOC_IND") doc_ind 
                    from public.dlw_tempm14m4new where trim("DOC_IND")<>'C' group by "PM_NO", "RM_PART" order by "PM_NO", "RM_PART") t,public."PART" p where trim(p."PARTNO")=trim(t.part_no)) foo ;''')
                    SrchQry=list(cursor.fetchall())
                else:
                    cursor.execute('''select count(*) from (select t.*, p."SHOP_UT" unit from  (select max("DOC_CODE") doc_code, "PM_NO", "RM_PART",max("RM_PART") part_no,sum("QTY"),max("L_FR") l_fr,max( "L_TO") l_to, 
                    max("BO_NO") bo_no,max("ASSLY_NO") assly_no,max("SEQ") seq,min("DUE_WK") due_wk,max("BRN_NO") brn_no,max("EPC") epc,max("DOC_IND") doc_ind 
                    from public.dlw_tempm14m4new group by "PM_NO", "RM_PART" order by "PM_NO", "RM_PART") t,public."PART" p where trim(p."PARTNO")=trim(t.part_no)) foo ;''')
                    SrchQry=list(cursor.fetchall())
                snm4 = "0"
                snm4 = len(SrchQry)
                nm4 = snm4
                _sn = updtcodem14(nm4+nom14, "21", "M14","m4")
                if (_sn != 0):
                    if (nm4 > 0):
                        m4fr= _sn + 1+nom14
                        m4to= _sn + nm4+nom14
                # else
                #     return False
                snm = _sn +nom14
                start_with = snm + 2
                cursor.execute('''ALTER SEQUENCE M4SEQ RESTART WITH %s''',[start_with])
                #cursor.execute('''CREATE SEQUENCE M4SEQ MINVALUE 1 START WITH %s INCREMENT BY 1 CACHE 20''',[start_with])
                if btype == "O":
                    cursor.execute('''insert into public."M14M4NEW1" select nextval('id'),doc_code,nextval('M4SEQ') doc_no,"PM_NO",part_no,qty,l_fr,l_to,bo_no,assly_no,
                    seq,due_wk,CURRENT_DATE as prd_dt,brn_no,doc_ind,unit,epc ,null as version,null as stage,null as wrd_no,null as finyear ,
                    null as vr_no,null as kit_ind,null as station,null as stg,null as sub_kit,null as opn_no, 0 as kit_no,
                    null as status,0 as sub_docno,null as lieu_part,null as drawn_by,null as mark,null as del_fl,0 as doc_no_old,
                    null as epc_old,NULL AS "RECEIVED_MAT",NULL AS "ISSUED_QTY",NULL AS "RECEIVED_QTY", NULL AS "REMARKS",NULL AS "LINE", 
                    NULL AS "CLOSING_BAL",0 AS "LASER_PST",0 AS "POSTED_DATE",0 AS "WARDKP_DATE",0 AS "SHOPSUP_DATE",0 AS "POSTED1_DATE", 
                    NULL AS "RECEIVED_MAT14",NULL AS "ISSUED_QTY14",NULL AS "RECEIVED_QTY14",NULL AS "REMARKS14",NULL AS "LINE14",NULL AS "CLOSING_BAL14",
                    0 AS "LASER_PST14",0 AS "POSTED_DATE14",0 AS "WARDKP_DATE14",0 AS "SHOPSUP_DATE14",0 AS "POSTED1_DATE14"
                    from  (select t.*, p."SHOP_UT" unit from  (select max("DOC_CODE") doc_code, "PM_NO", "RM_PART",max("RM_PART") part_no,sum("QTY") qty,max("L_FR") l_fr,max( "L_TO") l_to, 
                    max("BO_NO") bo_no,max("ASSLY_NO") assly_no,max("SEQ") seq,min("DUE_WK") due_wk,max("BRN_NO") brn_no,max("EPC") epc,max("DOC_IND") doc_ind 
                    from public.dlw_tempm14M4new group by "PM_NO", "RM_PART" order by "PM_NO", "RM_PART") t,public."PART" p where trim(p."PARTNO")=trim(t.PART_NO) order by t."PM_NO", t."RM_PART")o;''')
                        
                else:
                    cursor.execute('''insert into public."M14M4NEW1" select nextval('id'),doc_code,nextval('M4SEQ') doc_no,"PM_NO",part_no,qty,l_fr,l_to,bo_no,assly_no,
                        seq,due_wk,CURRENT_DATE as prd_dt,brn_no,doc_ind,unit,epc ,null as version,null as stage,null as wrd_no,null as finyear ,
                        null as vr_no,null as kit_ind,null as station,null as stg,null as sub_kit,null as opn_no, 0 as kit_no,
                        null as status,0 as sub_docno,null as lieu_part,null as drawn_by,null as mark,null as del_fl,0 as doc_no_old,
                        null as epc_old,NULL AS "RECEIVED_MAT",NULL AS "ISSUED_QTY",NULL AS "RECEIVED_QTY", NULL AS "REMARKS",NULL AS "LINE", 
                        NULL AS "CLOSING_BAL",0 AS "LASER_PST",0 AS "POSTED_DATE",0 AS "WARDKP_DATE",0 AS "SHOPSUP_DATE",0 AS "POSTED1_DATE", 
                        NULL AS "RECEIVED_MAT14",NULL AS "ISSUED_QTY14",NULL AS "RECEIVED_QTY14",NULL AS "REMARKS14",NULL AS "LINE14",NULL AS "CLOSING_BAL14",
                        0 AS "LASER_PST14",0 AS "POSTED_DATE14",0 AS "WARDKP_DATE14",0 AS "SHOPSUP_DATE14",0 AS "POSTED1_DATE14"
                        from  (select t.*, p."SHOP_UT" unit from  (select max("DOC_CODE") doc_code, "PM_NO", "RM_PART",max("RM_PART") part_no,sum("QTY") qty,max("L_FR") l_fr,max( "L_TO") l_to, 
                        max("BO_NO") bo_no,max("ASSLY_NO") assly_no,max("SEQ") seq,min("DUE_WK") due_wk,max("BRN_NO") brn_no,max("EPC") epc,max("DOC_IND") doc_ind 
                        from public.dlw_tempm14M4new where trim("DOC_IND")<>'C' group by "PM_NO", "RM_PART" order by "PM_NO", "RM_PART") t,public."PART" p where trim(p."PARTNO")=trim(t.PART_NO) order by t."PM_NO", t."RM_PART")o;''')
                    # QRY_LST=InsrtQry
                    # tableexist.isseqnssixt("M4_1SEQ");
                    #cursor.execute('''CREATE SEQUENCE M4_1SEQ MINVALUE 1 START WITH %s INCREMENT BY 1 CACHE 20;''',[start_with])
                    # if (!tableexist.createseqns(InsrtQry))
                    # {
                    #     GenFunCls.Msg_alert(this, "err in temp table M4_1SEQ sequence creation");
                    #     return false;
                    # }
                    # if (Txtbatch_type == "O"):
                    # {
                    #     InsrtQry = "create table tempM14_m4 as  select doc_code,M4_1SEQ.nextval doc_no,rm_part,pm_no,part_no,qty,l_fr,l_to,bo_no,assly_no, "
                    #             + " seq,due_wk,brn_no,doc_ind,unit,epc   "
                    #             + " from  (select  t.*, p.shop_ut unit from  (select max(doc_code) doc_code,pm_no,   rm_part,max(rm_part) part_no,sum(qty) qty,max(l_fr) "
                    #             + " l_fr,max(l_to) l_to,   max(bo_no) bo_no,max(assly_no)   assly_no,max(seq) seq,min(due_wk) due_wk,max(brn_no) brn_no,max(epc) "
                    #             + " epc,max(doc_ind) doc_ind  from temp_m14m4  group by pm_no, rm_part order by pm_no, rm_part) t,part p  "
                    #             + " where trim(p.partno)=trim(t.part_no)  order by t.pm_no,t.rm_part)  o";
                        
                    # }
                    # else
                    # {
                    #     InsrtQry = "create table tempM14_m4 as  select doc_code,M4_1SEQ.nextval doc_no,rm_part,pm_no,part_no,qty,l_fr,l_to,bo_no,assly_no, "
                    #             + " seq,due_wk,brn_no,doc_ind,unit,epc   "
                    #             + " from  (select  t.*, p.shop_ut unit from  (select max(doc_code) doc_code,pm_no,   rm_part,max(rm_part) part_no,sum(qty) qty,max(l_fr) "
                    #             + " l_fr,max(l_to) l_to,   max(bo_no) bo_no,max(assly_no)   assly_no,max(seq) seq,min(due_wk) due_wk,max(brn_no) brn_no,max(epc) "
                    #             + " epc,max(doc_ind) doc_ind  from temp_m14m4 where trim(doc_ind)<>'C'  group by pm_no, rm_part order by pm_no, rm_part) t,part p  "
                    #             + " where trim(p.partno)=trim(t.part_no)  order by t.pm_no,t.rm_part)  o";
                    # }
                    # tableexist.istblesixt("tempM14_m4");
                    # if (!tableexist.createtable(InsrtQry))
                    # {
                    #     GenFunCls.Msg_alert(this, "err in temp table creation");
                    #     return false;
                    # }                 
                    for i in range(len(DTM2)):
                        m2s = 0
                        if DTM2[i]["m2sln"] != "":
                            m2s = int(DTM2[i]["m2sln"])
                        m4n=""
                        if alt == "T" and DTM2[i]["ptc"] != "C" and DTM2[i]["cut_sher"]== "" and m2s> 0:
                            a=list(Tempm14M4new.objects.filter(pm_no='XXALT',rm_part=DTM2[i]["rm_partno"]).values('doc_no').order_by('pm_no','rm_part'))
                            if len(a)>0:
                                m4n=a[0]['doc_no']
                        if alt == "F" and DTM2[i]["ptc"] != "C" and DTM2[i]["cut_sher"] == "" and m2s > 0:
                            a=list(Tempm14M4new.objects.filter(pm_no=DTM2[i]["f_shopsec"],rm_part=DTM2[i]["rm_partno"]).values('doc_no').order_by('pm_no','rm_part'))
                            if len(a)>0:
                                m4n=a[0]['doc_no']
                        if alt == "T" and DTM2[i]["ptc"] == "C" and DTM2[i]["cut_sher"] == "" and m2s > 0:
                            a=list(Tempm14M4new.objects.filter(pm_no=DTM2[i]["f_shopsec"],rm_part=DTM2[i]["m2sln"]).values('doc_no').order_by('pm_no','rm_part'))
                            if len(a)>0:
                                m4n=a[0]['doc_no']
                        if alt == "F" and DTM2[i]["ptc"] == "C" and DTM2[i]["cut_sher"] == "" and m2s > 0:
                            a=list(Tempm14M4new.objects.filter(pm_no='XXALT',rm_part=DTM2[i]["rm_partno"]).values('doc_no').order_by('pm_no','rm_part'))
                            if len(a)>0:
                                m4n=a[0]['doc_no']
                        if m4n != "":
                            DTM2[i]["m4_no"] = m4n
                        else:
                            DTM2[i]["m4_no"] = "999999"
            if (alt == "T"):
                cla = EP_PART
            else:
                cla = asmno
            for i in range(len(DTM4)):
                    DTM4[i].update({'assly_no':cla}) 
            dvm=list(filter(lambda x:(x['del_fl']=='B'),DTM2))
            d = dvm
            snm2 = 0
            snm2 = len(d)
            #//snm2 =DTM2.Rows.Count ;
            nm2 = snm2
            _sn = 0
            _sn = updtcodem14(nm2, "21", "M2", "m2")
            nom2 = _sn
            if (_sn != 0):
                if (nm2 > 0):
                    m2fr = int (_sn) + 1
                    m2to = int(_sn )+ nm2
            snm2 = len(DTM2)
            # DTM2=sorted(DTM2, key = lambda i: i['m4_no'])
            #DTM2.DefaultView.Sort = "m4_no,scl_cl,f_shopsec,part_no asc"
            ####################### m5 ####################################
            TempM5Docnew.objects.all().delete()
            c = 0
            ds=[]
            pn = ""
            pn_r = ""
            pr_shopsec = ""
            rm_unit=""
            pt_shop=""
            b_type=""
            prt_batch=""
            total_qty=0
            locoqty=0
            docqty = 0
            cardqty = 0
            n_shopsec=""
            lfri = ""
            pa = "00.00"
            sch = ""
            if len(SCH) > 0:
                sch = SCH[0:1]
            sch='K'
            if (btype == "O" and alt == "F" and sch == "M"):
                return true
            DTM5 = copy.deepcopy(DTM2)
            m2assly = ""
            if (alt == "T"):
                m2assly = EP_PART
            else:
                m2assly = asmno
            #//M5 Card Generation for Loop
            for i in range(len(DTM5)):
                pn = DTM5[i]["part_no"]
                obj=Oprn.objects.filter(part_no=pn,del_fl__isnull=True).values('shop_sec')	
                if (DTM5[i]["del_fl"] != "B" or len(obj)==0):
                    continue
                pn_r = DTM5[i]["rm_partno"]
                pr_shopsec = ""
                obj=Part.objects.filter(partno=pn_r).values('shop_ut').order_by('partno')
                pt_shop=''
                if len(obj)>0:
                    pt_shop=obj[0]['shop_ut']
                if(DTM5[i]["rm_partno"]=="" or pt_shop==""):
                    rm_unit=""
                else:
                    rm_unit=pt_shop
            
                cursor.execute('''select "SHOP_SEC", "PART_NO",trim("M5_CD"),to_char(coalesce("PA",0),'00.00') pa ,to_char(coalesce("AT",0),'000.00')as at,"LC_NO","OPN" ,
                substr(trim("DES"),1,30) des,substr("LOT"::text,1,2) lot from public."OPRN" where trim("PART_NO")=%s and coalesce("NCP_JBS",'#')='#'  
                and coalesce("DEL_FL",'#')='#' order by "PART_NO","OPN";''',[pn])
                #SrchQry = "select shop_sec,part_no,m5_cd,to_char(nvl(pa,0),'00.00') pa ,to_char(nvl(at,0),'000.00') at,lc_no,opn ,substr(trim(des),1,30) des,substr(lot,1,2) lot from oprn where trim(part_no)='" + pn + "' and nvl(ncp_jbs,'#')='#'  and nvl(del_fl,'#')='#' order by part_no,opn";
                ds=list(cursor.fetchall())
                for  j in range(len( ds)):
                    if (btype=="R"):
                        obj=Batch.objects.filter(bo_no=batch).values('batch_type').order_by('brn_no')
                        if len(obj)>0:
                            b_type=obj[0]['batch_type']
                    #b_type = GlobalCls.OracleExecuteScaler("select trim(batch_type) batch_type  from batch where trim(bo_no)='" + Txtbo_no.Text.Trim() + "' order by brn_no");
                    else:
                        obj=Batch.objects.filter(bo_no=DTM5[i]["brn_no"]).values('batch_type').order_by('brn_no')
                        if len(obj)>0:
                            b_type=obj[0]['batch_type']
                    # b_type=GlobalCls.OracleExecuteScaler("select trim(batch_type) batch_type  from batch where trim(bo_no)='" + DTM5.Rows[i]["brn_no"].ToString().Trim() + "' order by brn_no");
                    #//prt_batch=""; //default null came from m2 fn _expl.m2 tbl not added row in m2 table there
                    prt_batch = batch
                    if(DTM5[i]["ptc"])!="C":
                        total_qty=float(DTM5[i]["qty"])* float(bqty)
                    else:
                        total_qty=DTM5[i]["qty"]

                    opn = ds[j][6]
                    cursor.execute('''select  "SHOP_SEC","PART_NO","M5_CD",to_char(coalesce("PA",0),'00.00') pa ,to_char(coalesce("AT",0),'000.00')as at,
                    "LC_NO","OPN" ,substr(trim("DES"),1,30) des,substr("LOT" :: text,1,2) lot from public."OPRN" where trim("PART_NO")=%s and "OPN" :: int>%s 
                    and coalesce("DEL_FL",'#')='#' order by "PART_NO", "OPN";''',[pn,opn])
                    dso=list(cursor.fetchall())
                    n_shopsec=nextshop(dso,j,pn)
                    if (ds[j][2]== "5"):
                        ii = 0
                        locoqty = float(DTM5[i]["qty"]) * float(NASSLY)
                        if (total_qty > locoqty):
                            cardqty = max(math.ceil(total_qty / 5), locoqty )
                        else:
                            cardqty = total_qty
                        lfri =l_fr.zfill(4) if btype == "O" else ""
                        while (total_qty > 0):
                            docqty = total_qty if total_qty < cardqty else cardqty
                            pa = "00.00"
                            if (b_type == "R"):
                                if (docqty > locoqty * 2):
                                    pa = ds[j][3]
                            p=pa if btype =="R" else ds[j][3]
                            cursor.execute('''INSERT INTO public.dlw_tempm5docnew(
                            "SCL_CL", "BATCH_NO", "ASSLY_NO", "PART_NO", "M2SLNO", "RM_PARTNO", "RM_UT", "CUT_SHEAR", "RM_QTY", "SHOP_SEC", "LC_NO", "OPN",
                            "OPN_DESC", "PA", "AT", "NO_OFF", "M5_CD", "PR_SHOPSEC", "N_SHOPSEC", "QTY_ORD", "TOT_RM_QTY", "L_FR", "L_TO", "M5GLSN",
                            "M5PRTDT", "SEQ", "BRN_NO", "MARK", "DEL_FL", "STATUS")
                            VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,CURRENT_DATE,%s,%s,%s,%s,%s);''',[DTM5[i]["scl_cl"], prt_batch , m2assly , ds[j][1],None,DTM5[i]["rm_partno"],rm_unit,DTM5[i]["cut_sher"],
                            DTM5[i]["rm_qty"],ds[j][0],ds[j][5], ds[j][6],ds[j][7], p ,ds[j][4],ds[j][8], 
                            ds[j][2],pr_shopsec ,n_shopsec,docqty,docqty * float(DTM5[i]["rm_qty"]),lfri,lfri,000000, seq, brn,'','',''])
                            #InsrtQry = "insert into temp_m5doc(SCL_CL,BATCH_NO,ASSLY_NO,PART_NO,M2SLNO,RM_PARTNO,RM_UT,CUT_SHEAR, "
                            #+" RM_QTY,SHOP_SEC,LC_NO,OPN,OPN_DESC,PA,AT,NO_OFF,M5_CD,PR_SHOPSEC,N_SHOPSEC,QTY_ORD,TOT_RM_QTY,L_FR,L_TO, "
                            #+ " M5GLSN,M5PRTDT,SEQ,BRN_NO,MARK,DEL_FL,STATUS) values('" + DTM5.Rows[i]["scl_cl"].ToString().Trim() + "','" + prt_batch + "','" + m2assly + "','" + ds.Tables["OP"].Rows[j]["part_no"].ToString().Trim() + "',null,'" + DTM5.Rows[i]["rm_partno"].ToString().Trim() + "' "
                            #+" ,'"+rm_unit+"','"+DTM5.Rows[i]["cut_sher"].ToString().Trim()+"','"+DTM5.Rows[i]["rm_qty"].ToString().Trim()+"','"+ds.Tables["OP"].Rows[j]["shop_sec"].ToString().Trim()+"' "
                            #+ ",'" + ds.Tables["OP"].Rows[j]["lc_no"].ToString().Trim() + "','" + ds.Tables["OP"].Rows[j]["opn"].ToString().Trim() + "','" + ds.Tables["OP"].Rows[j]["des"].ToString().Trim().Replace("'", " ").Replace(",", " ") + "','" + p + "','" + ds.Tables["OP"].Rows[j]["at"].ToString().Trim() + "','" + ds.Tables["OP"].Rows[j]["lot"].ToString().Trim() + "', "
                            #+ " '" + ds.Tables["OP"].Rows[j]["m5_cd"].ToString().Trim() + "','" + pr_shopsec + "','" + n_shopsec + "','" + docqty + "','" + docqty * Convert.ToDecimal(DTM5.Rows[i]["rm_qty"].ToString().Trim()) + "','" + lfri + "','" + lfri + "',000000,sysdate,'" + Txtseq.Text.Trim() + "','" + Txtbrn_no.Text.Trim() + "','','','') ";
                            #if (GlobalCls.OracleExecuteNonQuery(InsrtQry) <= 0)
                            #{
                                #GenFunCls.Msg_alert(this, "err in temp table insertion in m5 fn");
                                #return false;
                            #}
                            c = c + 1
                            total_qty = total_qty - cardqty
                            ii = ii + 1
                            if (btype == "O" and ii < 5):
                                lfri =str (int(l_fr) + ii).zfill(4)
                            else:
                                lfri = ""
                        #//pr_shopsec = ds.Tables["OP"].Rows[j]["shop_sec"].ToString();
                    else:
                        pa = "00.00"
                        locoqty = float(DTM5[i]["qty"]) * float(NASSLY)
                        if (b_type == "R"):
                            if (total_qty > locoqty * 2):
                                pa = ds[j][3]
                        lt = ""
                        lf = ""
                        if (btype == "O"):
                            lf = l_fr
                            lt = l_to
                        p =pa if btype == "R" else ds[j][3]
                        cursor.execute('''INSERT INTO public.dlw_tempm5docnew(
                        "SCL_CL", "BATCH_NO", "ASSLY_NO", "PART_NO", "M2SLNO", "RM_PARTNO", "RM_UT", "CUT_SHEAR", "RM_QTY", "SHOP_SEC", "LC_NO", "OPN",
                        "OPN_DESC", "PA", "AT", "NO_OFF", "M5_CD", "PR_SHOPSEC", "N_SHOPSEC", "QTY_ORD", "TOT_RM_QTY", "L_FR", "L_TO", "M5GLSN",
                        "M5PRTDT", "SEQ", "BRN_NO", "MARK", "DEL_FL", "STATUS")
                        VALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,CURRENT_DATE,%s,%s,%s,%s,%s);''',[DTM5[i]["scl_cl"], prt_batch , m2assly ,
                        ds[j][1],None,DTM5[i]["rm_partno"],rm_unit,DTM5[i]["cut_sher"],
                        DTM5[i]["rm_qty"],ds[j][0],ds[j][5], ds[j][6],ds[j][7], p ,ds[j][4],ds[j][8], 
                        ds[j][2],pr_shopsec ,n_shopsec,total_qty,total_qty * float(DTM5[i]["rm_qty"]),lf,lt,000000, seq, brn,'','',''])
                        #InsrtQry = "insert into temp_m5doc(SCL_CL,BATCH_NO,ASSLY_NO,PART_NO,M2SLNO,RM_PARTNO,RM_UT,CUT_SHEAR, "
                            #+ " RM_QTY,SHOP_SEC,LC_NO,OPN,OPN_DESC,PA,AT,NO_OFF,M5_CD,PR_SHOPSEC,N_SHOPSEC,QTY_ORD,TOT_RM_QTY,L_FR,L_TO, "
                            #+ " M5GLSN,M5PRTDT,SEQ,BRN_NO,MARK,DEL_FL,STATUS) values('" + DTM5.Rows[i]["scl_cl"].ToString().Trim() + "','" + prt_batch + "','" + m2assly + "','" + ds.Tables["OP"].Rows[j]["part_no"].ToString().Trim() + "',null,'" + DTM5.Rows[i]["rm_partno"].ToString().Trim() + "' "
                            #+ " ,'" + rm_unit + "','" + DTM5.Rows[i]["cut_sher"].ToString().Trim() + "','" + DTM5.Rows[i]["rm_qty"].ToString().Trim() + "','" + ds.Tables["OP"].Rows[j]["shop_sec"].ToString().Trim() + "' "
                            #+ ",'" + ds.Tables["OP"].Rows[j]["lc_no"].ToString().Trim() + "','" + ds.Tables["OP"].Rows[j]["opn"].ToString().Trim() + "','" + ds.Tables["OP"].Rows[j]["des"].ToString().Trim().Replace("'", " ").Replace(",", " ") + "','" + p + "','" + ds.Tables["OP"].Rows[j]["at"].ToString().Trim() + "','" + ds.Tables["OP"].Rows[j]["lot"].ToString().Trim() + "', "
                            #+ " '" + ds.Tables["OP"].Rows[j]["m5_cd"].ToString().Trim() + "','" + pr_shopsec + "','" + n_shopsec + "','" + total_qty + "','" + total_qty * Convert.ToDecimal(DTM5.Rows[i]["rm_qty"].ToString().Trim()) + "','" + lf + "','" + lt + "',000000,sysdate,'" + Txtseq.Text.Trim() + "','" + Txtbrn_no.Text.Trim() + "','','','') ";
                        #if (GlobalCls.OracleExecuteNonQuery(InsrtQry) <= 0)
                        #{
                            # GenFunCls.Msg_alert(this, "err in temp table insertion m5 fn");
                                #return false;
                        #}
                        c= c + 1
                    pr_shopsec = ds[j][0]
            DTM2S = copy.deepcopy(DTM2)
            start_with -=1
            for d in range(len(DTM2S)):
                m4s = ""
                #squery=M14M4new1.objects.filter(doc_code='88',assly_no=asmno,bo_no=batch,brn_no=brn).values('part_no','doc_no')
                if (DTM2S[d]["rm_partno"]!= ""):#//previously done 9999 forcefully for order by in table
                    m4s = start_with+1
                    start_with +=1
                m2n = nextsn(int(nom2) + d)
                if (DTM2S[d]["ptc"] != "C"):
                    DTM2S[d]["qty"] =float(DTM2S[d]["qty"]) * float(bqty)
                if (DTM2S[d]["del_fl"] == "B"):
                    #InsrtQry = "";
                    cursor.execute('''insert into public."M2DOCNEW1"("SCL_CL","BATCH_NO","ASSLY_NO","F_SHOPSEC","PART_NO","PTC","QTY","RM_PARTNO","RM_QTY","RC_ST_WK","RM_PTC","CUT_SHEAR","M2SLN",
                    "M2PRTDT","SEQ","BRN_NO","M4_NO","EPC","VERSION")values(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,CURRENT_DATE,%s,%s,%s,%s,%s);''',[DTM2S[d]["scl_cl"], batch,m2assly,DTM2S[d]["f_shopsec"],DTM2S[d]["part_no"],DTM2S[d]["ptc"], DTM2S[d]["qty"]
                    , DTM2S[d]["rm_partno"],DTM2S[d]["rm_qty"],DTM2S[d]["rc_st_wk"],DTM2S[d]["rm_ptc"],DTM2S[d]["cut_sher"], m2n ,
                    seq,brn, m4s ,epc,version])
                    #InsrtQry = "insert into m2doc(SCL_CL,BATCH_NO,ASSLY_NO,F_SHOPSEC,PART_NO,PTC,QTY,RM_PARTNO,RM_QTY,RC_ST_WK,RM_PTC,CUT_SHEAR,M2SLN,M2PRTDT,SEQ,BRN_NO,M4_NO,EPC,VERSION) "
                            #+ " values('" + DTM2S.Rows[d]["scl_cl"].ToString().Trim() + "','" + Txtbo_no.Text.Trim() + "','" + m2assly + "' "
                            #+ " ,'" + DTM2S.Rows[d]["F_SHOPSEC"].ToString().Trim() + "','" + DTM2S.Rows[d]["part_no"].ToString().Trim() + "','" + DTM2S.Rows[d]["ptc"].ToString().Trim() + "', "
                            #+ " '" + DTM2S.Rows[d]["qty"].ToString().Trim() + "','" + DTM2S.Rows[d]["rm_partno"].ToString().Trim() + "','" + DTM2S.Rows[d]["rm_qty"].ToString().Trim() + "', '" + DTM2S.Rows[d]["RC_ST_WK"].ToString().Trim() + "', " 
                            #+ " '" + DTM2S.Rows[d]["rm_ptc"].ToString().Trim() + "','" + DTM2S.Rows[d]["cut_sher"].ToString().Trim() + "','" + m2n + "',sysdate,'" + Txtseq.Text.Trim() + "','" + Txtbrn_no.Text.Trim() + "','" + m4s + "','" + Txtepc.Text.Trim() + "','" + Txtversion.Text.Trim() + "')";
                    #QRY_LST.Add(InsrtQry);
                    #//GlobalCls.OracleExecuteNonQuery(InsrtQry);
                
            nm5 = c
            _sn = updtcodem14(nm5, "21", "M5", "m5")
            if (_sn != 0):
                if (nm5 > 0):
                    m5fr= (_sn + 1)
                    m5to = (_sn + nm5)
            else:
                return false
            cnt = 0
            #if (QRY_LST.Count > 0)
            #{
            # cnt = GlobalCls.OracleExecuteNonQuery(QRY_LST);
                #if (cnt < 0)
                #  GenFunCls.Msg_alert(Page, "Err in M5 QRY_LST(Insert/Update)");
            #}
            #QRY_LST.Clear();
            temp=list(TempM5Docnew.objects.values('id').order_by('scl_cl','shop_sec','part_no','opn','l_fr'))
            #temp = "select rowid from temp_m5doc order by scl_cl,shop_sec,part_no,opn,l_fr";
            ds = temp
            temp = m5fr
            for k in range(len(ds)):
                TempM5Docnew.objects.filter(id=ds[k]['id']).update(m5glsn=temp)
                #InsrtQry = "update temp_m5doc set m5glsn='" + temp + "' where rowid='" + ds.Tables["t"].Rows[k][0].ToString() + "'";
                #//QRY_LST.Add(InsrtQry);
                #GlobalCls.OracleExecuteNonQuery(InsrtQry);
                temp = int(temp) + 1
            selQry=M2Docnew1.objects.filter(brn_no=brn).values('batch_no','assly_no','part_no','m2sln').order_by('scl_cl','batch_no','assly_no','part_no')
            #string selQry = "select * from m2doc where brn_no='"+Txtbrn_no.Text.Trim()+"' order by scl_cl,batch_no,assly_no,part_no";
            dsU = list(selQry)
            
            for i in range(len(dsU)):
                TempM5Docnew.objects.filter(batch_no=dsU[i]["batch_no"],assly_no=dsU[i]["assly_no"],part_no=dsU[i]["part_no"]).update(m2slno=dsU[i]["m2sln"])
                #UpdtQry = "update temp_m5doc set m2slno='" + dsU.Tables["m2"].Rows[i]["M2SLN"].ToString() + "' where BATCH_NO='" + dsU.Tables["m2"].Rows[i]["BATCH_NO"].ToString() + "' and ASSLY_NO='" + dsU.Tables["m2"].Rows[i]["ASSLY_NO"].ToString() + "' and PART_NO='" + dsU.Tables["m2"].Rows[i]["PART_NO"].ToString() + "'";
                #QRY_LST.Add(UpdtQry);

            #if (QRY_LST.Count > 0)
            #{
                #cnt = GlobalCls.OracleExecuteNonQuery(QRY_LST);
            # if (cnt < 0)
                    #GenFunCls.Msg_alert(Page, "Err in M2SLNO QRY_LST(Update)");
            #}
            #QRY_LST.Clear();
            cursor.execute('''insert into public."M5DOCNEW1"("SCL_CL", "BATCH_NO", "ASSLY_NO", "PART_NO", "M2SLNO", "RM_PARTNO", "RM_UT", "CUT_SHEAR", "RM_QTY", "SHOP_SEC", "LC_NO", "OPN", "OPN_DESC", "PA", "AT", "NO_OFF", "M5_CD", "PR_SHOPSEC", "N_SHOPSEC", "QTY_ORD", "TOT_RM_QTY", "L_FR", "L_TO", "M5GLSN", "M5PRTDT", "SEQ", "BRN_NO", "MARK", "DEL_FL", "STATUS") select "SCL_CL", "BATCH_NO", "ASSLY_NO", "PART_NO", "M2SLNO", "RM_PARTNO", "RM_UT", "CUT_SHEAR", "RM_QTY", "SHOP_SEC", "LC_NO", "OPN", "OPN_DESC", "PA", "AT", "NO_OFF", "M5_CD", "PR_SHOPSEC", "N_SHOPSEC", "QTY_ORD", "TOT_RM_QTY", "L_FR", "L_TO", "M5GLSN", "M5PRTDT", "SEQ", "BRN_NO", "MARK", "DEL_FL", "STATUS" from public.dlw_tempm5docnew;''')
            #InsrtQry = "insert into m5doc select * from temp_m5doc";
            #cnt= GlobalCls.OracleExecuteNonQuery(InsrtQry);
            #if (cnt < 0)
                #GenFunCls.Msg_alert(this.Page, "Err -> Insert temp_m5doc");
            #else
            noM5Rej = m5fr+cnt
            
            #return true
            ################   m14  ##############
            dtm=[]
            dt=[]
            res = []
            makesetm14(epc)
            cursor.execute('select t.*,p."M14SPLT_CD",COALESCE(p."ALLOW_PERC",0) as allow_perc,COALESCE(p."SHOP_UT", %s) as shop_ut from public.dlw_tempm14expl t,public."PART" p where (t."PTC"= %s or t."PTC"= %s or t."PTC"= %s) and t."PART_NO"= p."PARTNO" and t."QTY" >0;',['0','P','L','B'])
            row = cursor.fetchall()
            dts = pd.DataFrame(list(row))
            sch = card[:1]
            if alt=='F' and sch=='M' and btype=='O':
                messages.error(request,'M14 is not generated as alternate is "False" and batch type is "O"')
                return render(request,'CardGeneration.html')
            for i in range(len(dts)):
                allowqty=0
                if alt=='F' and len(M14M4new1.objects.filter(~Q(pm_no='XXALT'),part_no=dts[1][i],brn_no=brn,l_fr=l_fr).values('pm_no'))!=0:
                    continue
                pn = dts[1][i]
                totqty = float(dts[2][i]) * float(bqty)
                locoqty = float(dts[2][i]) * float(NASSLY)
                ptsplt = ""
                ptsp_ut = ""
                pt_alp = 0
                ptsplt = dts[7][i]
                ptsp_ut = dts[9][i]
                pt_alp = dts[8][i]
                if ptsplt == "5":
                    tosplit = True
                else:
                    tosplit = False
                docind = dts[3][i]
                cursor.execute('select coalesce("AUTH_QTY",0),"PM_NO" from public."PROGPART" where "PARTNO"=%s and "EPC"=%s and coalesce("DEL_FL",%s) !=%s order by "PARTNO", "EPC", "PM_NO";',[pn,epc,'@','Y'])
                row = cursor.fetchall()
                ds= pd.DataFrame(list(row))
                j = 0
                while totqty > 0 and j < len(ds) and alt == "F":
                    pmno = ""
                    if btype== "O":
                        if ds[0][j] <= totqty:
                            pmqty = ds[0][j] 
                        else:
                            pmqty = totqty
                        pmno = ds[1][j]
                    else:
                        pmqty = totqty
                        pmno = m14btdesc(btype)
                    import numpy as np
                    if float(ptsp_ut) < 10:
                        allowqty = round(float(pmqty) * float(pt_alp) / 100, 0)
                    else:
                        allowqty =round(float(pmqty) * float(pt_alp) / 100, 3)
                    if tosplit is False:
                        if btype=='O':
                            l=l_fr.zfill(4)
                            t=l_to.zfill(4)
                        else:
                            l=''
                            t=''
                        dtm=write_row_expl_m14(pmno, pn, (float(pmqty) + float(allowqty)), l, t, docind, ptsp_ut, dtm)
                        totqty = float(totqty) - float(pmqty)
                    else:
                        ii = 0
                        lfri=''
                        vLfri = l_fr.zfill(4)
                        if btype=='O':
                            lfri=l_fr.zfill(4)
                        while float(pmqty) > float(locoqty):
                            dtm=write_row_expl_m14(pmno, pn, locoqty, lfri, lfri, docind, ptsp_ut, dtm)
                            pmqty = float(pmqty) - float(locoqty)
                            totqty = float(totqty) - float(locoqty)
                            ii = ii + 1
                            if btype=='O' and ii < 5:
                                lfri=(str(int(vLfri)+1)).zfill(4)
                                lfri=lfri.zfill(4)
                            else:
                                lfri=''
                            vLfri = lfri.zfill(4)
                        vLfri = l_fr.zfill(4)
                        if float(pmqty) > 0:
                            dtm=write_row_expl_m14(pmno, pn, float(pmqty) + float(allowqty), lfri, lfri, docind, ptsp_ut, dtm)
                            totqty = float(totqty) - float(pmqty)
                    j = j + 1
                if float(totqty) > 0:
                    lfri = ""
                    if alt=='F':
                        if int(ptsp_ut) < 10:
                            allowqty = round(float(totqty) *float(pt_alp) / 100, 0)
                        else:
                            allowqty = round(float(totqty) * float(pt_alp) / 100, 3)
                        abc=float(totqty) + float(allowqty)
                        abc="{0:.4f}".format(abc)
                        dtm=write_row_expl_m14("XX999", pn, abc, l_fr, l_to, docind, ptsp_ut, dtm)
                    else:
                        lfri = l_fr.zfill(4)
                        while tosplit is True and float(totqty) > float(locoqty) and int(lfri) <= int(l_to.zfill(4)):
                            if float(ptsp_ut) < 10:
                                allowqty = round(float(locoqty) * float(pt_alp) / 100, 0)
                            else:
                                allowqty = round(float(locoqty) * float(pt_alp) / 100, 3)
                            dtm=write_row_expl_m14("XXALT", pn, float(locoqty) + float(allowqty), lfri, lfri, docind, ptsp_ut, dtm)
                            totqty = float(totqty) - float(locoqty)
                            lfri = (str(int(lfri) + 1)).zfill(4)
                        if (float(totqty) > 0 and int(lfri) <= int(l_to.zfill(4))):
                            if float(ptsp_ut) < 10:
                                allowqty = round(float(totqty) * float(pt_alp )/ 100, 0)
                            else:
                                allowqty = round(float(totqty) * float(pt_alp )/ 100, 3)
                            dtm=write_row_expl_m14("XXALT", pn, float(totqty) + float(allowqty), lfri, l_to.zfill(4), docind, ptsp_ut, dtm)

                    # for i in range(len(row)):
                    #     res.append({'part_no':row[i][1],'qty':row[i][2],'ptc':row[i][3],'rm_partno':row[i][4],'rm_qty':row[i][5],'rm_ptc':row[i][6],'m14splt_cd':row[i][7],'allow_perc':row[i][8],'shop_ut':row[i][9]})

                    # for i in Tempm14expl.objects.raw('select t.id,t.*,p.id,p."M14SPLT_CD",COALESCE(p."ALLOW_PERC",0) as allow_perc,COALESCE(p."SHOP_UT", %s) as shop_ut from public.dlw_tempm14expl t,public."PART" p where (t."PTC"= %s or t."PTC"= %s or t."PTC"= %s) and t."PART_NO"= p."PARTNO" and t."QTY" >0;',['0','P','L','B']):
                    #     res.append({'part_no':i.part_no,'qty':i.qty,'ptc':i.ptc,'rm_partno':i.rm_partno,'rm_qty':i.rm_qty,'rm_ptc':i.rm_qty,'m14splt_cd':i.Part.m14splt_cd,'allow_perc':i.Part.allow_perc,'shop_ut':i.Part.shop_ut})
                    # print(dtm,len(dtm))
                    # sl=M14M4new1.objects.values('doc_no').order_by('-doc_no')
                    # if len(sl)!=0:
                    #     no=int(sl[0]['doc_no'])+1
                    # else:
                    #     no=1
            dtm=sorted(dtm, key = lambda i: i['part_no'])
            nm14 = len(dtm)
            nom14 = nm14
            _sn=updtcodem14(nm14,"21","M14","m14")
            if _sn != 0:
                sn = _sn
                for q in range(len(dtm)):
                        sn = sn + 1
                        if alt=='T':
                            ash=EP_PART
                        else:
                            ash=asmno
                        M14M4new1.objects.create(doc_code='89',doc_no=sn,pm_no=dtm[q]['pm_no'],part_no=dtm[q]['part_no'],qty=dtm[q]['qty'],l_fr=dtm[q]['l_fr'],l_to=dtm[q]['l_to'],bo_no=batch,assly_no=ash,seq=seq,due_wk=DUE_WK,brn_no=brn,doc_ind=dtm[q]['doc_ind'],unit=dtm[q]['unit'],epc=epc,prtdt=datetime.datetime.now().strftime ("%d-%m-%Y"))

                # # for i in range(len(dtm)):
                # #     M14M4new1.objects.create(doc_code='88',doc_no=no,pm_no=dat1[k]['pm_no'],part_no=i[4:],qty=format(quantity,'.3f'),l_fr=l_fr,l_to=l_to,bo_no=batch,assly_no=asmno,seq=seq,due_wk=dat1[k]['rm'],prtdt=prtdt,brn_no=brn,doc_ind=di,unit=unit['shop_ut'],epc=epc)



            # if bval=="Generate Cards":
            #     res = []
            #     res = Childnode(request,asmno,res,'M')
            #     # ades=list(Part.objects.filter(partno = asmno).values('des').distinct()) 
            #     # ades=ades[0]['des']
            #     res.sort()
            #     a=Batch.objects.filter(part_no=asmno,bo_no=batch).values('uot_wk_f').order_by('-bo_no','part_no')
            #     bat=Batch.objects.filter(part_no=asmno,bo_no=batch).values('ep_type','brn_no')
            #     del1=M2Docnew1.objects.filter(batch_no=batch,assly_no=asmno).values('batch_no')
            #     if len(del1)!=0:
            #         M2Docnew1.objects.filter(batch_no=batch,assly_no=asmno).delete()
               
            #     prtdt=datetime.datetime.now().strftime ("%d-%m-%Y")
            #     if len(bat)!=0:
            #         epc=bat[0]['ep_type']
            #         brn=bno1
            #     else:
            #         epc=''
            #         brn=bno1

            #     m4_no=''
            #     seq=0
            #     version=''
            #     status=''
            #     mark=''
            #     epc_old=''
            #     del_fl=''
            #     u=0
            #     x=0
            #     if len(a) !=0:
            #          if a[0]['uot_wk_f'] is not None:
            #             u=int(a[0]['uot_wk_f'])
                   
            #     if u>3000:
            #             x=(int(u/100)*52)+(u%100)
            #     else:
            #             x=(int((u/100) + 100)*52)+(u%100)
            #     j=0
            #     dat=[]
            #     sl=M2Docnew1.objects.values('m2sln').order_by('-m2sln')
            #     if len(sl)!=0:
            #         m2sln=int(sl[0]['m2sln'])+1
            #     else:
            #         m2sln=1
            #     for i in res:
            #         z=[]
            #         r=0
            #         o=0
            #         s=0
            #         shop=''
            #         r_qty=0
            #         r_ptc=''
            #         r_part=''
            #         qty=0
            #         scl=''
            #         for k in Oprn.objects.raw('SELECT id, "SHOP_SEC", "OPN" :: int FROM public."OPRN" WHERE "PART_NO"=%s order by "OPN" :: int ',[i]):
            #             shop=k.shop_sec
            #             break
            #         if len(shop)!= 4:
            #             continue
            #         z=Shop.objects.filter(shop=shop).values('shop_ldt').order_by('shop')
                   
            #         if x != 0:
            #             o=x
            #         if len(z)!=0:
            #             s=int(z[0]['shop_ldt'])
            #         d=int((o-s)/52)
            #         r=((d % 100) * 100 + ((o - s) % 52))
            #         r_cqp=Nstr.objects.filter(pp_part=i).aggregate(a=Max('qty'),b=Max('ptc'))
            #         r_part1=Nstr.objects.filter(pp_part=i,l_to='9999').values('cp_part').order_by('cp_part').distinct()
            #         if r_cqp['b']=='R' or r_cqp['b']=='Q':
            #             r_qty=r_cqp['a']
            #             r_ptc=r_cqp['b']
            #             if len(r_part1) !=0:
            #                 r_part=r_part1[0]['cp_part']
            #         cut=Cutpart.objects.filter(partno=i,epc=epc).values('cut_dia').order_by('cut_dia',)
            #         if len(cut)>0:
            #             cut_Shear=cut[0]['cut_dia']
            #         else:
            #             cut_Shear=''
            #         lst=["01","02","05","1A","1C","1F"]
            #         if epc in lst:
            #             if s >35:
            #                 scl='A'
            #             elif s>25:
            #                 scl='B'
            #             else:
            #                 scl='C'
            #         else:  
            #             if s >25:
            #                 scl='A'
            #             elif s>15:
            #                 scl='B'
            #             else:
            #                 scl='C'
            #         qty1=M2Doc.objects.filter(part_no=i,batch_no=batch,assly_no=asmno).values('qty').distinct()
            #         if len(qty1)!=0:
            #             qty=qty1[0]['qty']
                    
            #         M2Docnew1.objects.create(scl_cl=scl,batch_no=batch,assly_no=asmno,f_shopsec=shop,part_no=i,ptc='M',qty=qty,rc_st_wk=r,rm_partno=r_part,rm_qty=r_qty,rm_ptc=r_ptc,cut_shear=cut_Shear,m2sln=m2sln,m2prtdt=prtdt,seq=seq,brn_no=brn,m4_no=m4_no,epc=epc,version=version,status=status,mark=mark,del_fl=del_fl,epc_old=epc_old)
            #         m2sln=m2sln+1
            #     # messages.success(request, 'Card generated Successfully!')  
                
               
            # if bval=="Generate Cards":
            #     code='M'
            #     r_qty=0
            #     r_ptc=''
            #     r_part=''
            #     r_part2=[]
            #     arr1=[asmno]
            #     dat1=[]
            #     dat=[]
            #     # ades=list(Part.objects.filter(partno = asmno).values('des').distinct())
            #     # if len(ades)!=0: 
            #     #     ades=ades[0]['des']
            #     # else:
            #     #     ades=''
            #     a=Batch.objects.filter(part_no=asmno,bo_no=batch).values('uot_wk_f').order_by('-bo_no','part_no')
            #     bat=Batch.objects.filter(part_no=asmno,bo_no=batch).values('ep_type','brn_no','loco_to','loco_fr','batch_type','batch_qty','seq')
            #     del1=M14M4new1.objects.filter(bo_no=batch,assly_no=asmno,doc_code='88').values('assly_no')
            #     if len(del1)!=0:
            #         M14M4new1.objects.filter(bo_no=batch,assly_no=asmno,doc_code='88').delete()
            #     prtdt=datetime.datetime.now().strftime ("%d-%m-%Y")
            #     if len(bat)!=0:
            #         epc=bat[0]['ep_type']
            #         brn=bno1
            #         l_to=bat[0]['loco_to']
            #         l_fr=bat[0]['loco_fr']
            #         seq=bat[0]['seq']
            #         bqty=bat[0]['batch_qty']
            #         btype=bat[0]['batch_type']
            #     else:
            #         epc=''
            #         brn=bno1
            #         l_to=''
            #         l_fr=''
            #         seq=''
            #         bqty=''
            #         btype=''
            #     sl=M14M4new1.objects.values('doc_no').order_by('-doc_no')
            #     if len(sl)!=0:
            #         no=int(sl[0]['doc_no'])+1
            #     else:
            #         no=1
            #     m4_no=''
            #     seq=0
            #     version=''
            #     status=''
            #     mark=''
            #     epc_old=''
            #     del_fl=''
            #     u=0
            #     x=0
            #     if len(a) !=0:
            #          if a[0]['uot_wk_f'] is not None:
            #             u=int(a[0]['uot_wk_f'])
                   
            #     if u>3000:
            #             x=(int(u/100)*52)+(u%100)
            #     else:
            #             x=(int((u/100) + 100)*52)+(u%100)
            #     j=0
            #     dat=[]
            #     for i in Nstr.objects.raw('WITH RECURSIVE temp AS (SELECT id_pk,"CP_PART" FROM public."NSTR" WHERE "PP_PART"=%s and "CP_PART" is not null and "PTC"=%s UNION SELECT e.id_pk,e."CP_PART" FROM public."NSTR" e INNER JOIN temp t ON t."CP_PART" = e."PP_PART" where e."CP_PART" is not null and e."PTC"=%s) select * from temp;',[asmno,'M','M']):
            #          if i.cp_part not in arr1:
            #              arr1.append(i.cp_part)
            #     for j in arr1:
            #         check=[]
            #         z=[]
            #         r=0
            #         o=0
            #         s=0
            #         shop=''
            #         r_qty=0
            #         r_ptc=''
            #         r_part=''
            #         qty=1
                    
            #         for k in Oprn.objects.raw('SELECT id, "SHOP_SEC", "OPN" :: int FROM public."OPRN" WHERE "PART_NO"=%s order by "OPN" :: int ',[j]):
            #             shop=k.shop_sec
            #             break
            #         if len(shop)!= 4:
            #             continue
            #         z=Shop.objects.filter(shop=shop).values('shop_ldt').order_by('shop')
                   
            #         if x != 0:
            #             o=x
            #         if len(z)!=0:
            #             s=int(z[0]['shop_ldt'])
            #         d=int((o-s)/52)
            #         r=((d % 100) * 100 + ((o - s) % 52))
            #         if alt=='T':
            #             pm_no='XXALT'
            #         else:
            #             pm_no=shop
            #         r_cqp=Nstr.objects.filter(pp_part=j).aggregate(a=Max('qty'),b=Max('ptc'))
                    
            #         r_part1=Nstr.objects.filter(pp_part=j,l_to='9999').values('cp_part').order_by('cp_part').distinct()
                   
            #         if r_cqp['b']=='R' or r_cqp['b']=='Q':
            #             r_qty=r_cqp['a']
            #             r_ptc=r_cqp['b']
            #             if len(r_part1) !=0:
            #                 check=str(shop+r_part1[0]['cp_part'])
            #                 if check not in r_part2:
            #                     r_part2.append(check)
            #         qty1=M2Doc.objects.filter(part_no=j,batch_no=batch,assly_no=asmno).values('qty').distinct()
            #         if len(qty1)!=0:
            #             qty=qty1[0]['qty']
            #         if len(r_part1) !=0:
                        
            #             dat1.append({'partno':i,'pm_no':shop,'r_part':r_part1[0]['cp_part'],'r_ptc':r_ptc,'r_qty':r_qty,'rm':r,'qty':qty}) 
                       

            #     for i in r_part2:
            #         quantity=0 
            #         k=0
            #         part=[]
            #         for j in range(len(dat1)):
            #                 if i==(dat1[j]['pm_no'] + dat1[j]['r_part']):
            #                     quantity=quantity+(dat1[j]['qty']*dat1[j]['r_qty'])
            #                     if len(part)==0:
            #                         part.append(dat1[j]['r_part'])
            #                         k=j   
            #         unit=Part.objects.filter(partno=i[4:]).values('shop_ut').distinct()[0]
            #         if dat1[k]['r_ptc']=='C':
            #             di='C'    
            #         else:
            #             di=dat1[k]['r_ptc']
                    
            #         M14M4new1.objects.create(doc_code='88',doc_no=no,pm_no=dat1[k]['pm_no'],part_no=i[4:],qty=format(quantity,'.3f'),l_fr=l_fr,l_to=l_to,bo_no=batch,assly_no=asmno,seq=seq,due_wk=dat1[k]['rm'],prtdt=prtdt,brn_no=brn,doc_ind=di,unit=unit['shop_ut'],epc=epc)
            #         no=no+1 
            #     # messages.success(request, 'Card generated Successfully!')    
            # if bval=="Generate Cards":
            #     c = 0
            #     pn = ""
            #     pn_r = ""
            #     pr_shopsec = ""
            #     rm_unit=""
            #     pt_shop=""
            #     b_type=""
            #     prt_batch=""
            #     total_qty=0
            #     locoqty=0
            #     docqty = 0
            #     cardqty = 0
            #     n_shopsec=""
            #     lfri = ""
            #     pa = "00.00"
            #     sch = card[:1]
            #     dtm5=[]
            #     res=[]
            #     final=[]
            #     seq=0
            #     m5sl=1
            #     a=Batch.objects.filter(part_no=asmno,bo_no=batch).values('uot_wk_f').order_by('-bo_no','part_no')
            #     bat=Batch.objects.filter(part_no=asmno,bo_no=batch).values('ep_type','brn_no','loco_to','loco_fr','batch_type','batch_qty','seq')
            #     del1=M5Docnew1.objects.filter(batch_no=batch,assly_no=asmno).all()
            #     if len(del1)!=0:
            #         M5Docnew1.objects.filter(batch_no=batch,assly_no=asmno).delete()
            #     prtdt=datetime.datetime.now().strftime ("%d-%m-%Y")
            #     sl=M5Docnew1.objects.values('m5glsn').order_by('-m5glsn')
            #     if len(sl)!=0:
            #         m5sl=int(sl[0]['m5glsn'])+1
            #     if len(bat)!=0:
            #         epc=bat[0]['ep_type']
            #         brn=bno1
            #         l_to=bat[0]['loco_to']
            #         l_fr=bat[0]['loco_fr']
            #         seq=bat[0]['seq']
            #         bqty=bat[0]['batch_qty']
            #         btype=bat[0]['batch_type']
            #     else:
            #         epc=''
            #         brn=bno1
            #         l_to=''
            #         l_fr=''
            #         seq=''
            #         bqty=''
            #         btype=''
            #     if alt=='F' and sch=='M' and btype=='O':
            #         messages.error(request,'M5 is not generated as alternate is "False" and batch type is "O"')
            #         return render(request,'CardGeneration.html')

            #     dtm2=list(M2Docnew1.objects.filter(batch_no=batch,assly_no=asmno).values('scl_cl','part_no','f_shopsec','cut_shear','rm_partno','rm_ptc','rm_qty','rc_st_wk','qty','ptc','m2sln'))
            #     dtm5=dtm2
            #     if len(dtm5)==0:
            #         msg='Root Card not exist for assembly no.  '+ asmno +'   and batch no.   '+ batch + '    Generate root (M2) card first!'
            #         messages.error(request,msg)
            #         return render(request,'CardGeneration.html',context)
                
            #     for i in range(len(dtm5)):
            #         pn=dtm5[i]['part_no']
            #         pn_r=dtm5[i]['rm_partno']
            #         pr_shopsec = ""
            #         pt_shop=list(Part.objects.filter(partno=pn).values('shop_ut').order_by('partno'))

            #         #################################
            #         if len(pn_r)==0 or len(pt_shop)==0:
            #             rm_unit=''
            #         else:
            #             rm_unit=pt_shop[0]['shop_ut']
            #         #################################
            #         m2sl=dtm5[i]['m2sln']
            #         scl=dtm5[i]['scl_cl']
            #         next=0
                   
            #         for j in Oprn.objects.raw('select distinct id,"SHOP_SEC","PART_NO","M5_CD","LC_NO",lpad("OPN",3,%s) as opn ,substr(trim("DES"),1,30) as des,substr("LOT" :: text,1,1) as lot,COALESCE("PA",00.00) as pa,COALESCE("AT",000.00) as at1,COALESCE("NCP_JBS", %s) as ncp from public."OPRN" where  COALESCE("NCP_JBS",%s)=%s and COALESCE("DEL_FL",%s)=%s and trim("PART_NO")=%s order by opn;',['0','','#','#','#','#',pn]):
            #             lf=int(l_fr)
            #             if j is not None:
            #                 next=next+1
            #                 n=0
            #                 n_shopsec=''
            #                 for k in Oprn.objects.raw('select distinct id,"SHOP_SEC","PART_NO","M5_CD","LC_NO",lpad("OPN",3,%s) as opn ,substr(trim("DES"),1,30) as des,substr("LOT" :: text,1,1) as lot,COALESCE("PA",00.00) as pa,COALESCE("AT",000.00) as at1,COALESCE("NCP_JBS", %s) as ncp from public."OPRN" where  COALESCE("NCP_JBS",%s)=%s and COALESCE("DEL_FL",%s)=%s and trim("PART_NO")=%s order by opn;',['0','','#','#','#','#',pn]):
            #                     if k is not None:
            #                         if n==next:
            #                             n_shopsec=k.shop_sec
            #                             break
            #                         n=n+1
            #                 no_off=M5Doc.objects.filter(part_no=pn,batch_no=batch,assly_no=asmno,shop_sec =j.shop_sec,lc_no =j.lc_no,opn =j.opn).values('qty_ord')
            #                 if len(no_off)!=0:
            #                     qo=no_off[0]['qty_ord']
            #                 else:
            #                     qo=0
            #                 if j.m5_cd.strip()=='5':
            #                     diff=int(l_to) - int(l_fr)
            #                     count=0
            #                     for l in range(0,5):
            #                         m5sl=m5sl+1
            #                         M5Docnew1.objects.create(scl_cl =scl,batch_no =batch, assly_no =asmno,part_no =pn ,m2slno =int(m2sl) ,rm_partno =pn_r,rm_ut =rm_unit,cut_shear =dtm5[i]['cut_shear'],rm_qty =float(dtm5[i]['rm_qty']),shop_sec =j.shop_sec,lc_no =j.lc_no,opn =j.opn,opn_desc =j.des,pa =float(j.pa),at =float(j.at1),no_off=float(j.lot),qty_ord=float(qo),tot_rm_qty=float(qo*dtm5[i]['rm_qty']),m5_cd =int(j.m5_cd),pr_shopsec =pr_shopsec,n_shopsec =n_shopsec,l_fr =lf,l_to =lf,m5glsn =int(m5sl),m5prtdt =prtdt,brn_no=int(brn),seq =(seq),acc_qty=int('0'),rej_mat=int('0'))
            #                         if count >=diff:
            #                             lf=lf
            #                         else:
            #                             lf=lf + 1
            #                         count= count +1
            #                 else:
            #                     m5sl=m5sl+1
            #                     M5Docnew1.objects.create(scl_cl =scl,batch_no =batch, assly_no =asmno,part_no =pn ,m2slno =int(m2sl) ,rm_partno =pn_r,rm_ut =rm_unit,cut_shear =dtm5[i]['cut_shear'],rm_qty =float(dtm5[i]['rm_qty']),shop_sec =j.shop_sec,lc_no =j.lc_no,opn =j.opn,opn_desc =j.des,pa =float(j.pa),at =float(j.at1),no_off=float(j.lot),qty_ord=float(qo),tot_rm_qty=float(qo*dtm5[i]['rm_qty']),m5_cd =int(j.m5_cd),pr_shopsec =pr_shopsec,n_shopsec =n_shopsec,l_fr =lf,l_to =lf,m5glsn =int(m5sl),m5prtdt =prtdt,brn_no=int(brn),seq =(seq),acc_qty=int('0'),rej_mat=int('0'))                                 
            #                 pr_shopsec = j.shop_sec
                
             # m 14    
            if bval=="Generate Cards":
                dtm=[]
                dt=[]
                res = []
                # for i in Nstr.objects.raw('WITH RECURSIVE temp AS (SELECT distinct id_pk,"CP_PART","L_FR", "L_TO", "PTC","REF_IND", "REF_NO", "ALT_IND","QTY" FROM public."NSTR" WHERE "PP_PART"=%s and "CP_PART" is not null and "EPC"=%s UNION SELECT distinct e.id_pk,e."CP_PART",e."L_FR", e."L_TO", e."PTC",e."REF_IND", e."REF_NO", e."ALT_IND",e."QTY" FROM public."NSTR" e INNER JOIN temp t ON t."CP_PART" = e."PP_PART" where e."CP_PART" is not null and e."EPC"=%s  ) select * from temp;',[asmno,epc,epc]):
                #        arr1.append({'ptc':i.ptc,'ref_ind':i.ref_ind,'ref_no':i.ref_no,'qty':i.qty,'cp_part':i.cp_part,'l_fr':i.l_fr,'l_to':i.l_to,'alt_ind':i.alt_ind})
                # print(len(arr1))
                # if tlr is not None:
                #     lfr=tlr
                # if tlt is not None:
                #     lto=tlt
                # for i in range(len(arr1)):
                #     if (arr1[i]['l_fr'] > lfr and arr1[i]['l_to'] > lto ) or (srchqry[i]['alt_ind'] is not None):
                #         continue
                #  a=Batch.objects.filter(part_no=asmno,bo_no=batch).values('uot_wk_f').order_by('-bo_no','part_no')

                
                # ep=''
                # for i in Code.objects.raw('select id,substr("NUM_1" :: text, 1,8) as num_1 from public."CODE" where "CD_TYPE"=%s and "CODE"=%s order by "CD_TYPE","CODE";',['11',epc]):
                #     ep=i.num_1
                #     break
                # if ep=='':
                #     msg="No Such End Product"
                # EP_PART= ep
                # if ep ==asmno:
                #     NASSLY='1'
                # else:
                #     NASSLY = str(CPQm14(asmno, epc, ep, l_to))
                # batchExplode(request,asmno,'1',dt,epc,l_fr,l_to,'')
                # makesetm14(epc)
                # cursor = connection.cursor()
                # cursor.execute('select t.*,p."M14SPLT_CD",COALESCE(p."ALLOW_PERC",0) as allow_perc,COALESCE(p."SHOP_UT", %s) as shop_ut from public.dlw_tempm14expl t,public."PART" p where (t."PTC"= %s or t."PTC"= %s or t."PTC"= %s) and t."PART_NO"= p."PARTNO" and t."QTY" >0;',['0','P','L','B'])
                # row = cursor.fetchall()
                # dts = pd.DataFrame(list(row))
                # ###########
                # sch = card[:1]
                # if alt=='F' and sch=='M' and btype=='O':
                #     messages.error(request,'M14 is not generated as alternate is "False" and batch type is "O"')
                #     return render(request,'CardGeneration.html')
                # for i in range(len(dts)):
                #     allowqty=0
                #     if alt=='F' and len(M14M4new1.objects.filter(~Q(pm_no='XXALT'),part_no=dts[1][i],brn_no=brn,l_fr=l_fr).values('pm_no'))!=0:
                #         continue
                #     pn = dts[1][i]
                #     totqty = float(dts[2][i]) * float(bqty)
                #     locoqty = float(dts[2][i]) * float(NASSLY)
                #     ptsplt = ""
                #     ptsp_ut = ""
                #     pt_alp = 0
                #     ptsplt = dts[7][i]
                #     ptsp_ut = dts[9][i]
                #     pt_alp = dts[8][i]
                #     if ptsplt == "5":
                #         tosplit = True
                #     else:
                #         tosplit = False
                #     docind = dts[3][i]
                #     cursor = connection.cursor()
                #     cursor.execute('select coalesce("AUTH_QTY",0),"PM_NO" from public."PROGPART" where "PARTNO"=%s and "EPC"=%s and coalesce("DEL_FL",%s) !=%s order by "PARTNO", "EPC", "PM_NO";',[pn,epc,'@','Y'])
                #     row = cursor.fetchall()
                #     ds= pd.DataFrame(list(row))
                #     j = 0
                #     while totqty > 0 and j < len(ds) and alt == "F":
                #         pmno = ""
                #         if btype== "O":
                #             if ds[0][j] <= totqty:
                #                 pmqty = ds[0][j] 
                #             else:
                #                 pmqty = totqty
                #             pmno = ds[1][j]
                #         else:
                #             pmqty = totqty
                #             pmno = m14btdesc(btype)
                #         import numpy as np
                #         if float(ptsp_ut) < 10:
                #             allowqty = round(float(pmqty) * float(pt_alp) / 100, 0)
                #         else:
                #             allowqty =round(float(pmqty) * float(pt_alp) / 100, 3)
                #         if tosplit is False:
                #             if btype=='O':
                #                 l=l_fr.zfill(4)
                #                 t=l_to.zfill(4)
                #             else:
                #                 l=''
                #                 t=''
                #             dtm=write_row_expl_m14(pmno, pn, (float(pmqty) + float(allowqty)), l, t, docind, ptsp_ut, dtm)
                #             totqty = float(totqty) - float(pmqty)
                #         else:
                #             ii = 0
                #             lfri=''
                #             vLfri = l_fr.zfill(4)
                #             if btype=='O':
                #                 lfri=l_fr.zfill(4)
                #             while float(pmqty) > float(locoqty):
                #                 dtm=write_row_expl_m14(pmno, pn, locoqty, lfri, lfri, docind, ptsp_ut, dtm)
                #                 pmqty = float(pmqty) - float(locoqty)
                #                 totqty = float(totqty) - float(locoqty)
                #                 ii = ii + 1
                #                 if btype=='O' and ii < 5:
                #                     lfri=(str(int(vLfri)+1)).zfill(4)
                #                     lfri=lfri.zfill(4)
                #                 else:
                #                     lfri=''
                #                 vLfri = lfri.zfill(4)
                #             vLfri = l_fr.zfill(4)
                #             if float(pmqty) > 0:
                #                 dtm=write_row_expl_m14(pmno, pn, float(pmqty) + float(allowqty), lfri, lfri, docind, ptsp_ut, dtm)
                #                 totqty = float(totqty) - float(pmqty)
                #         j = j + 1
                #     if float(totqty) > 0:
                #         lfri = ""
                #         if alt=='F':
                #             if int(ptsp_ut) < 10:
                #                 allowqty = round(float(totqty) *float(pt_alp) / 100, 0)
                #             else:
                #                 allowqty = round(float(totqty) * float(pt_alp) / 100, 3)
                #             abc=float(totqty) + float(allowqty)
                #             abc="{0:.4f}".format(abc)
                #             dtm=write_row_expl_m14("XX999", pn, abc, l_fr, l_to, docind, ptsp_ut, dtm)
                #         else:
                #             lfri = l_fr.zfill(4)
                #             while tosplit is True and float(totqty) > float(locoqty) and int(lfri) <= int(l_to.zfill(4)):
                #                 if float(ptsp_ut) < 10:
                #                     allowqty = round(float(locoqty) * float(pt_alp) / 100, 0)
                #                 else:
                #                     allowqty = round(float(locoqty) * float(pt_alp) / 100, 3)
                #                 dtm=write_row_expl_m14("XXALT", pn, float(locoqty) + float(allowqty), lfri, lfri, docind, ptsp_ut, dtm)
                #                 totqty = float(totqty) - float(locoqty)
                #                 lfri = (str(int(lfri) + 1)).zfill(4)
                #             if (float(totqty) > 0 and int(lfri) <= int(l_to.zfill(4))):
                #                 if float(ptsp_ut) < 10:
                #                     allowqty = round(float(totqty) * float(pt_alp )/ 100, 0)
                #                 else:
                #                     allowqty = round(float(totqty) * float(pt_alp )/ 100, 3)
                #                 dtm=write_row_expl_m14("XXALT", pn, float(totqty) + float(allowqty), lfri, l_to.zfill(4), docind, ptsp_ut, dtm)

                # # for i in range(len(row)):
                # #     res.append({'part_no':row[i][1],'qty':row[i][2],'ptc':row[i][3],'rm_partno':row[i][4],'rm_qty':row[i][5],'rm_ptc':row[i][6],'m14splt_cd':row[i][7],'allow_perc':row[i][8],'shop_ut':row[i][9]})

                # # for i in Tempm14expl.objects.raw('select t.id,t.*,p.id,p."M14SPLT_CD",COALESCE(p."ALLOW_PERC",0) as allow_perc,COALESCE(p."SHOP_UT", %s) as shop_ut from public.dlw_tempm14expl t,public."PART" p where (t."PTC"= %s or t."PTC"= %s or t."PTC"= %s) and t."PART_NO"= p."PARTNO" and t."QTY" >0;',['0','P','L','B']):
                # #     res.append({'part_no':i.part_no,'qty':i.qty,'ptc':i.ptc,'rm_partno':i.rm_partno,'rm_qty':i.rm_qty,'rm_ptc':i.rm_qty,'m14splt_cd':i.Part.m14splt_cd,'allow_perc':i.Part.allow_perc,'shop_ut':i.Part.shop_ut})
                # # print(dtm,len(dtm))
                # # sl=M14M4new1.objects.values('doc_no').order_by('-doc_no')
                # # if len(sl)!=0:
                # #     no=int(sl[0]['doc_no'])+1
                # # else:
                # #     no=1
                # dtm=sorted(dtm, key = lambda i: i['part_no'])
                # nm14 = len(dtm)
                # nom14 = nm14
                # _sn=updtcodem14(nm14,"21","M14","m14")
                # if _sn != 0:
                #     sn = _sn
                #     for q in range(len(dtm)):
                #             sn = sn + 1
                #             if alt=='T':
                #                 ash=EP_PART
                #             else:
                #                 ash=asmno
                #             M14M4new1.objects.create(doc_code='89',doc_no=sn,pm_no=dtm[q]['pm_no'],part_no=dtm[q]['part_no'],qty=dtm[q]['qty'],l_fr=dtm[q]['l_fr'],l_to=dtm[q]['l_to'],bo_no=batch,assly_no=ash,seq=seq,due_wk=DUE_WK,brn_no=brn,doc_ind=dtm[q]['doc_ind'],unit=dtm[q]['unit'],epc=epc,prtdt=datetime.datetime.now().strftime ("%d-%m-%Y"))

                # # for i in range(len(dtm)):
                # #     M14M4new1.objects.create(doc_code='88',doc_no=no,pm_no=dat1[k]['pm_no'],part_no=i[4:],qty=format(quantity,'.3f'),l_fr=l_fr,l_to=l_to,bo_no=batch,assly_no=asmno,seq=seq,due_wk=dat1[k]['rm'],prtdt=prtdt,brn_no=brn,doc_ind=di,unit=unit['shop_ut'],epc=epc)

                # data={
                #     'm14':dtm,
                #     'asl':asmno,
                #     'ades':ades,
                #     'batch':batch,
                # }
                
                # return render(request,"m14cardpdf.html",data)  

            #     code='M'
            #     r_qty=0
            #     r_ptc=''
            #     r_part=''
            #     r_part2=[]
            #     arr1=[asmno]
            #     dat1=[]
            #     dat=[]
            #     ades=list(Part.objects.filter(partno = asmno).values('des').distinct())
            #     if len(ades)!=0: 
            #         ades=ades[0]['des']
            #     else:
            #         ades=''
            #     a=Batch.objects.filter(part_no=asmno,bo_no=batch).values('uot_wk_f').order_by('-bo_no','part_no')
            #     bat=Batch.objects.filter(part_no=asmno,bo_no=batch).values('ep_type','brn_no','loco_to','loco_fr','batch_type','batch_qty','seq')
            #     #del1=M14M4new1.objects.filter(bo_no=batch,assly_no=asmno,doc_code='88').values('assly_no')
            #     # if len(del1)!=0:
            #     #     M14M4new1.objects.filter(bo_no=batch,assly_no=asmno,doc_code='88').delete()
            #     prtdt=datetime.datetime.now().strftime ("%d-%m-%Y")
            #     if len(bat)!=0:
            #         epc=bat[0]['ep_type']
            #         brn=bno1
            #         l_to=bat[0]['loco_to']
            #         l_fr=bat[0]['loco_fr']
            #         seq=bat[0]['seq']
            #         bqty=bat[0]['batch_qty']
            #         btype=bat[0]['batch_type']
            #     else:
            #         epc=''
            #         brn=bno1
            #         l_to=''
            #         l_fr=''
            #         seq=''
            #         bqty=''
            #         btype=''
            #     sl=M14M4new1.objects.values('doc_no').order_by('-doc_no')
            #     if len(sl)!=0:
            #         no=int(sl[0]['doc_no'])+1
            #     else:
            #         no=1
            #     m4_no=''
            #     seq=0
            #     version=''
            #     status=''
            #     mark=''
            #     epc_old=''
            #     del_fl=''
            #     u=0
            #     x=0
            #     if len(a) !=0:
            #          if a[0]['uot_wk_f'] is not None:
            #             u=int(a[0]['uot_wk_f'])
                   
            #     if u>3000:
            #             x=(int(u/100)*52)+(u%100)
            #     else:
            #             x=(int((u/100) + 100)*52)+(u%100)
            #     j=0
            #     dat=[]
            #     for i in Nstr.objects.raw('WITH RECURSIVE temp AS (SELECT id_pk,"CP_PART" FROM public."NSTR" WHERE "PP_PART"=%s and "CP_PART" is not null and ("PTC"=%s or "PTC"=%s or "PTC"=%s or "PTC"=%s) UNION SELECT e.id_pk,e."CP_PART" FROM public."NSTR" e INNER JOIN temp t ON t."CP_PART" = e."PP_PART" where e."CP_PART" is not null and ("PTC"=%s or "PTC"=%s or "PTC"=%s or "PTC"=%s)) select * from temp;',[asmno,'M','P','B','L','M','P','B','L']):
            #          if i.cp_part not in arr1:
            #              arr1.append(i.cp_part)
            #     print("length:",len(arr1))
            #     for j in arr1:
            #         check=[]
            #         z=[]
            #         r=0
            #         o=0
            #         s=0
            #         shop=''
            #         r_qty=0
            #         r_ptc=''
            #         r_part=''
            #         qty=1
                    
            #         for k in Oprn.objects.raw('SELECT id, "SHOP_SEC", "OPN" :: int FROM public."OPRN" WHERE "PART_NO"=%s order by "OPN" :: int ',[j]):
            #             shop=k.shop_sec
            #             break
            #         if len(shop)!= 4:
            #             continue
            #         z=Shop.objects.filter(shop=shop).values('shop_ldt').order_by('shop')
                   
            #         if x != 0:
            #             o=x
            #         if len(z)!=0:
            #             s=int(z[0]['shop_ldt'])
            #         d=int((o-s)/52)
            #         r=((d % 100) * 100 + ((o - s) % 52))
            #         if alt=='T':
            #             pm_no='XXALT'
            #         else:
            #             pm_no=shop
            #         r_cqp=Nstr.objects.filter(pp_part=j).aggregate(a=Max('qty'),b=Max('ptc'))
                    
            #         r_part1=Nstr.objects.filter(pp_part=j,l_to='9999').values('cp_part').order_by('cp_part').distinct()
            #         if r_cqp['b']=='R' or r_cqp['b']=='Q':
            #             r_qty=r_cqp['a']
            #             r_ptc=r_cqp['b']
            #             if len(r_part1) !=0:
            #                 check=str(shop+r_part1[0]['cp_part'])
            #                 if check not in r_part2:
            #                     r_part2.append(check)
            #         qty1=M2Doc.objects.filter(part_no=j,batch_no=batch,assly_no=asmno).values('qty').distinct()
            #         if len(qty1)!=0:
            #             qty=qty1[0]['qty']
            #         dat1.append({'partno':i,'pm_no':shop,'r_part':r_part1[0]['cp_part'],'r_ptc':r_ptc,'r_qty':r_qty,'rm':r,'qty':qty})     
            #     print(r_part2)
            #     print(len(r_part2))
            #     print(dat1)
            #     print(len(r_part2))
            #     # for i in r_part2:
            #     #     quantity=0 
            #     #     k=0
            #     #     part=[]
            #     #     for j in range(len(dat1)):
            #     #             if i==(dat1[j]['pm_no'] + dat1[j]['r_part']):
            #     #                 quantity=quantity+(dat1[j]['qty']*dat1[j]['r_qty'])
            #     #                 if len(part)==0:
            #     #                     part.append(dat1[j]['r_part'])
            #     #                     k=j   
            #     #     unit=Part.objects.filter(partno=i[4:]).values('shop_ut').distinct()[0]
            #     #     if dat1[k]['r_ptc']=='C':
            #     #         di='C'    
            #     #     else:
            #     #         di=dat1[k]['r_ptc']
                    
            #     #     M14M4new1.objects.create(doc_code='88',doc_no=no,pm_no=dat1[k]['pm_no'],part_no=i[4:],qty=format(quantity,'.3f'),l_fr=l_fr,l_to=l_to,bo_no=batch,assly_no=asmno,seq=seq,due_wk=dat1[k]['rm'],prtdt=prtdt,brn_no=brn,doc_ind=di,unit=unit['shop_ut'],epc=epc)
            #     #     no=no+1 
            # #     obj1 = ShowLeaf(request,asmno,res,'P')
            # #     print("len = ",obj1)
            # #     for i in range(len(obj1)):
            # #         # obj2=Tempexplsum.objects.filter(part_no=obj1[i]).values('qty','ptc','rm_partno','rm_qty','rm_ptc').distinct()
            # #         # obj3=Wgrptable.objects.filter(part_no=obj1[i]).values('scl_cl','f_shopsec','rc_st_wk','cut_shear','seq','brn_no','del_fl','version','status','epc','mark').distinct()
            # #         # epcold=Code.objects.filter(num_1=asmno).values('epc_old').distinct()
            # #         # obj2=M2Doc.objects.filter(part_no=obj1[i]).values('qty','ptc','rm_partno','rm_qty','rm_ptc','scl_cl','f_shopsec','rc_st_wk','cut_shear','seq','brn_no','del_fl','version','status','epc','mark','epc_old').distinct()
            # #         # if len(obj2):
            # #         #     print(obj2[0])
            # #         print(i)
            # #         M14M4new1.objects.create(part_no=obj1[i],assly_no=asmno,ptc='P',batch_no=batch)
            # #     # try:
            # #     #     for j in range(len(obj1)):
            # #     #         cstr_buffer.objects.create(pp_part=asmno,cp_part=obj1[j])
            # #     #     messages.success(request, 'Successfully Done!')
            # #     # except:
            # #     #     messages.error(request,'Some Error Occurred')
            # # else:
            # #     messages.error(request,'Enter all values!')
        messages.success(request, 'Card generated Successfully!')
    return render(request,'CardGeneration.html',context)


def nextshop(dso,j,pn):
    if (len(dso)== 0):
        return ""
    else:
        return dso[0][0]
def nextsn(sn):
    return (sn + 1)
    
def cardexpl(request,pn,wt, dt,tepc,tlr,tlt,tver):
    lfr='0'
    lto='0'
    srchqry=list(Nstr.objects.filter(pp_part=pn,epc=tepc).values('ptc','ref_ind','ref_no','qty','cp_part','l_fr','l_to','alt_ind',).order_by('cp_part','epc'))
    for i in range(len(srchqry)):
        if tlr is not None:
            lfr=tlr
        if tlt is not None:
            lto=tlt
        if (srchqry[i]['l_fr'] > lfr and srchqry[i]['l_to'] > lto ) or (srchqry[i]['alt_ind'] is not None):
            continue
        Eptc=srchqry[i]['ptc']
        Erefind=srchqry[i]['ref_ind']
        Erefno=srchqry[i]['ref_no']
        Cpprt=srchqry[i]['cp_part']
        qty=float(srchqry[i]['qty'])
        wt=int(wt)
        if Eptc!='Q' and Eptc!='R':
            if Eptc == "P" and Erefind == "S" and (Erefno != "" or Erefno != "0"):
                Cpprt = Erefno
            if (tver == "0" or tver == ""):
                dt=write_row_expl(Cpprt, qty*wt, Eptc,"",0.0,"", dt)
        else:
            dt=write_row_expl_r(Cpprt,qty,Eptc, dt)  
        mcp_part=srchqry[i]['cp_part']
        mqty = float(qty)
        c=Nstr.objects.filter(pp_part=mcp_part,epc=tepc).values('pp_part')
        if ((Eptc=='M' or Eptc=='Z') and c is not None):
            if (tver == "0" or tver == ""):
                cardexpl(request,mcp_part, mqty * wt, dt,tepc,tlr,tlt,tver)
    return dt
def write_row_expl(one, two, three,four,  five,  six,  dt):
    dt.append({'part_no':one,'qty':two,'ptc':three,'rm_partno':four,'rm_qty':five,'rm_ptc':six})
    return dt
def write_row_expl_m14(one, two, three,four,  five,  six,seven, dtm):
    dtm.append({'pm_no':one,'part_no':two,'qty':three,'l_fr':four,'l_to':five,'doc_ind':six,'unit':seven})
    return dtm
def write_row( one, two, dt):
        dt.append({'part':one,'wt':two})
        return dt
def write_row_expl_r(four,  five, six, dt):
    indx= len(dt)
    dt[indx - 1]["rm_partno"] = four
    dt[indx - 1]["rm_qty"] = five
    dt[indx - 1]["rm_ptc"] = six
    return dt
from functools import reduce
from operator import itemgetter
def batchExplode(request,pn,wt, dt,tepc,tlr,tlt,tver):
    dt=write_row_expl(pn, 1.0, "M", "", 0.0, "", dt)
    dt=cardexpl(request,pn,wt, dt,tepc,tlr,tlt,tver)
    a=[]
    lst=[]
    Tempm14expl.objects.all().delete()
    for i in range(len(dt)):
        if dt[i]['part_no'] not in a:
            a.append(dt[i]['part_no'])
            ls=list(filter(lambda x:str(x['part_no']) in str(dt[i]['part_no']),dt))
            if len(ls) > 1:
                ls1=list(map(itemgetter('qty'),ls))
                ls2=list(map(itemgetter('ptc'),ls))
                ls3=list(map(itemgetter('rm_partno'),ls))
                ls4=list(map(itemgetter('rm_qty'),ls))
                ls5=list(map(itemgetter('rm_ptc'),ls))
                qty="{0:.3f}".format(reduce(lambda x,y:x + y,ls1))
                ptc=max(ls2)
                rpa=max(ls3)
                rpt=max(ls5)
                rqt=max(ls4)
                rqt="{0:.3f}".format(rqt)
                Tempm14expl.objects.create(part_no=dt[i]['part_no'], qty=qty, ptc=ptc, rm_partno=rpa, rm_qty=rqt, rm_ptc=rpt)
                lst.append({'part_no':dt[i]['part_no'],'qty':qty,'ptc':ptc,'rm_partno':rpa,'rm_qty':rqt,'rm_ptc':rpt})
            else:
                Tempm14expl.objects.create(part_no=dt[i]['part_no'], qty="{0:.3f}".format(dt[i]['qty']), ptc=dt[i]['ptc'], rm_partno=dt[i]['rm_partno'], rm_qty="{0:.3f}".format(dt[i]['rm_qty']), rm_ptc=dt[i]['rm_ptc'])
                lst.append({'part_no':dt[i]['part_no'],'qty':"{0:.3f}".format(dt[i]['qty']),'ptc':dt[i]['ptc'],'rm_partno':dt[i]['rm_partno'],'rm_qty':"{0:.3f}".format(dt[i]['rm_qty']),'rm_ptc':dt[i]['rm_ptc']})
    lst=sorted(lst, key = lambda i: i['part_no'])
    return lst
def m14btdesc(bt):
    if bt=='S':
        return 'ORD'
    elif bt=='S':
        return 'STKS'
    elif bt=='R':
        return 'REPL'
    elif bt=='B':
        return 'BAL'
    elif bt=='N':
        return 'BAL'
    elif bt=='M':
        return 'MISC'
    else:
        return ''
def CPQm14( _pn, _ep, _epn, _lto):
        if _lto== "":
            _lto = "9999"
        if _pn == _ep:
            return 1
        dt = []
        q = 0
        ds=list(Nstr.objects.filter(cp_part=_pn,epc=_ep).values('pp_part').order_by('cp_part','epc'))
        if len(ds)<=0:
            q = 0
            return q
        else:
            Dss=[]
            Dss=implm14(_pn, "1", _ep, dt, _epn,_lto)
            for i in range(len(Dss)):
                if str(Dss[i]["part"]) == _epn:
                    q1 = 0
                    if str(Dss[i]["wt"]) != "":
                        q1 = float(Dss[i]["wt"])
                    q = q + q1
        return q
def implm14( _pn,  wt, _ep, dt, _epn, _lt):
        ds1=list(Nstr.objects.filter(cp_part=_pn,epc=_ep,l_fr__lte=_lt,l_to__gte=_lt).values('pp_part','cp_part','qty','ptc','alt_link').order_by('cp_part','epc'))
        val = 0
        if len(ds1) > 0:
            for i in range(len(ds1)):
                pp_part = ds1[i]["pp_part"]
                qty = 0
                if ds1[i]["qty"] != "":
                    qty = float(ds1[i]["qty"])
                val = qty * float(wt)
                if pp_part == _epn:
                    dt=write_row(pp_part, str(round(val, 3)),dt)
                val = qty * float(wt)
                mpp_part = pp_part
                p=['M','Z','L','B']
                RecDs=list(Nstr.objects.filter(cp_part=mpp_part,epc=_ep,ptc__in=p).values('cp_part'))        
                if len(RecDs) > 0:
                    implm14(mpp_part, str(val), _ep, dt, _epn,_lt)
            return dt
        return dt

def makesetm14(tepc):
    date=datetime.datetime.now()
    ds=list(Setmast.objects.filter((Q(valid_upto__isnull=True)|Q(valid_upto__gte=date)),epc=tepc,rec_ind__isnull=True).values('part_no','qty','set_part').order_by('epc','set_part','part_no'))
    dst=[]
    for i in range(len(ds)):
            setpart1 = ds[i]["set_part"]
            setqty1 = float(ds[i]["qty"])
            dst = list(Setmast.objects.filter((Q(valid_upto__isnull=True)|Q(valid_upto__gte=date)),epc=tepc,rec_ind__isnull=True,set_part=setpart1).values('part_no','qty').order_by('epc','set_part','part_no'))
            if (print(makesetonem14("check", dst, setpart1, setqty1)) == True):
                makesetonem14("update", dst, setpart1, setqty1)
    return True
from django.db.models import F
def makesetonem14( act, DTF, msetpart1, msetqty1):
    ret = True
    rowid = ""
    for j in range(len(DTF)):
        rowid = list(Tempm14expl.objects.filter(part_no=DTF[j]['part_no']).values('id').order_by('part_no'))
        if len(rowid) ==0:
            return False
        else:
            rowid=rowid[0]['id']
        if act == "update":
            Tempm14expl.objects.filter(id=rowid).update(qty=F('qty') - DTF[j]['qty'])
    if act == "update":
        Tempm14expl.objects.create(part_no=msetpart1,qty=msetqty1,ptc='P')
    return True        
def updtcodem14( nm, cdt, cd, fname):
    num1 = list(Code.objects.filter(cd_type=cdt,code=cd).values('num_1').order_by('cd_type','code'))
    if len(num1) == 0:
        return 0
    num1=int(num1[0]['num_1'])
    new_num = num1
    new_num = new_num + nm
    if (new_num + nm > 899000):
        Code.objects.filter(cd_type=cdt,code=cd).update(num_1=100001) 
    old_num = list(Code.objects.filter(cd_type=cdt,code=cd).values('num_1').order_by('cd_type','code'))   
    Code.objects.filter(cd_type=cdt,code=cd).update(num_1=new_num)         
    if len(old_num)!=0:
        old_num=old_num[0]['num_1']
    else:
        old_num=0
    if num1 == old_num:
        if fname == "m14":
            m14fr = num1 + 1
            m14to = new_num
        return  num1
    else:
        updtcodem14(nm, cdt, cd,fname)
    return num1
def scl_cl(ltd,alt,epc):
        if alt == "T":
            return "T"
        ls=["01","02","05","1A","1C","1F"]
        if epc in ls:
            if ltd>35:
                return "A"
            if ltd>25:
                return "B"
            return "C"
        else:
            if ltd>25:
                return "A"
            if ltd>15:
                return "B"
            return "C"
        return "C"

def m27getBatchNo(request):
    if request.method == "GET" and request.is_ajax():
        mAsslyno = request.GET.get('mAsslyno')
        bo_no=Batch.objects.filter(part_no=mAsslyno).values('bo_no').distinct()
        bo_no_temp = list(bo_no)
        return JsonResponse(bo_no_temp, safe = False)
    return JsonResponse({"success": False}, status=400)


def smsM18(phoneno,message):
    url = "http://enterprise.smsgupshup.com/GatewayAPI/rest?method=SendMessage&send_to=91"+str(phoneno)+"&msg="+message+" &msg_type=TEXT&userid=2000184632&auth_scheme=plain&password=pWK3H5&v=1.1&format=text"
    
    response = requests.request("POST", url)

@login_required
@role_required(urlpass='/mg7view/')
def mg7view(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    if "Superuser" in rolelist:
        tm=shop_section.objects.all()
        tmp=[]
        for on in tm:
            tmp.append(on.section_code)
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles':tmp
        }
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):
            req = M5DOCnew.objects.all().filter(shop_sec=rolelist[i]).values('batch_no').exclude(batch_no__isnull=True).distinct()
            wo_nop =wo_nop | req



        context = {
            'sub':0,
            'subnav':subnav,
            'lenm' :len(rolelist),
            'wo_nop':wo_nop,
            'nav':nav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist
        }
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist
        }
    if request.method == "POST":
        submitvalue = request.POST.get('proceed')
        if submitvalue=='Proceed':
            rolelist=usermaster.role.split(", ")
            wo_nop = empmast.objects.none()
            shop_sec = request.POST.get('shop_sec')
            shop_sec1 = request.POST.get('shop_sec1')
            part_no = request.POST.get('part_nop')
            wo_no = request.POST.get('wo_no')
            m5no = request.POST.get('job_no')
            obj = Part.objects.filter(partno=part_no).values('des').distinct()
            obj1 = M5DOCnew.objects.filter(batch_no=wo_no, pr_shopsec=shop_sec, n_shopsec=shop_sec1, part_no=part_no).values('m5glsn').distinct()
            obj2 = M13.objects.filter(shop=shop_sec, part_no=part_no, wo=wo_no).values('m13_no').distinct()
            if len(obj2) > 0:
                obj2 = M13.objects.filter(shop=shop_sec, part_no=part_no, wo=wo_no).values('m13_no').distinct()[:1]
            date=len(obj2)
            obj3 = MG7.objects.filter(wo_no=wo_no, fromshop=shop_sec, toshop=shop_sec1, part_no=part_no, m5glsn=m5no).values('date','qty_ord','qty_rej','qty_req','reason').distinct()
            if len(obj3) == 0:
                obj3=range(0, 1)


            if "Superuser" in rolelist:
                  tm=shop_section.objects.all()
                  tmp=[]
                  for on in tm:
                      tmp.append(on.section_code)
                  context = {
                        'roles':tmp,
                        'lenm' :2,
                        'nav':nav,
                        'ip':get_client_ip(request),
                        'obj': obj,
                        'obj1': obj1,
                        'obj2': obj2,
                        'obj3': obj3,


                        'sub': 1,

                        'date': date,

                        'shop_sec': shop_sec,
                        'shop_sec1': shop_sec1,
                        'part_no': part_no,
                        'wo_no': wo_no,
                        'm5no': m5no,

                        'subnav':subnav
                  }
            elif(len(rolelist)==1):
                  for i in range(0,len(rolelist)):
                      req = M5DOCnew.objects.all().filter(shop_sec=rolelist[i]).values('batch_no').exclude(batch_no__isnull=True).distinct()
                      wo_nop = wo_nop | req
                  context = {
                        'wo_nop':wo_nop,
                        'roles' :rolelist,
                        'usermaster':usermaster,
                        'lenm' :len(rolelist),
                        'nav': nav,
                        'ip': get_client_ip(request),
                        'obj': obj,
                        'obj1': obj1,
                        'obj2': obj2,
                        'obj3': obj3,
                        'sub': 1,

                        'date': date,

                        'shop_sec': shop_sec,
                        'shop_sec1': shop_sec1,
                        'part_no': part_no,
                        'wo_no': wo_no,
                        'm5no': m5no,
                        'subnav':subnav
                  }
            elif(len(rolelist)>1):
                  context = {
                        'lenm' :len(rolelist),
                        'nav':nav,
                        'ip':get_client_ip(request),
                        'usermaster':usermaster,
                        'roles' :rolelist,
                        'obj': obj,
                        'obj1': obj1,
                        'obj2': obj2,
                        'obj3': obj3,

                        'sub': 1,

                        'date': date,

                        'shop_sec': shop_sec,
                        'shop_sec1': shop_sec1,
                        'part_no': part_no,
                        'wo_no': wo_no,
                        'm5no': m5no,

                        'subnav':subnav
                  }

        if submitvalue=='Save':

                shop_sec= request.POST.get('shop_sec11')
                shop_sec1 = request.POST.get('shop_sec12')
                part_no= request.POST.get('part_no1')
                wo_no = request.POST.get('wo_no1')
                m5no = request.POST.get('m5no11')
                des = request.POST.get('des1')
                m13_no = request.POST.get('m13_no11')
               
                qty_ord =request.POST.get('qty_ord')
                qty_req = request.POST.get('qty_req')
                qty_rej = request.POST.get('qty_rej')
                date = request.POST.get('date')
                reason =request.POST.get('reason')

                obj4 = MG7.objects.filter(wo_no=wo_no, fromshop=shop_sec, toshop=shop_sec1, part_no=part_no, m5glsn=m5no).distinct()
                if len(obj4) == 0:
                    MG7.objects.create(wo_no=str(wo_no), m13_no=str(m13_no), des=str(des), fromshop=str(shop_sec), toshop=str(shop_sec1), part_no=str(part_no), m5glsn=str(m5no), qty_ord=int(qty_ord),qty_req=int(qty_req),qty_rej=int(qty_rej),date=str(date),reason=str(reason))

                else:
                    MG7.objects.filter(wo_no=wo_no, fromshop=shop_sec, toshop=shop_sec1, part_no=part_no, m5glsn=m5no).update(qty_ord=int(qty_ord), qty_req=int(qty_req), qty_rej=int(qty_rej), date=str(date), reason=str(reason))

                wo_no=MG7.objects.all().values('wo_no').distinct()
                messages.success(request, 'Successfully Done!, Select new values to proceed')
    return render(request, "mg7view.html", context)



def mg7getshop(request):
    if request.method == "GET" and request.is_ajax():

        shop_sec = request.GET.get('shop_sec')
        shop = M5DOCnew.objects.filter(pr_shopsec=shop_sec).values('n_shopsec').exclude(n_shopsec__isnull=True).distinct()
        shop_sec1 = list(shop)
        return JsonResponse(shop_sec1, safe=False)
    return JsonResponse({"success": False}, status=400)

def mg7getjob(request):
    if request.method == "GET" and request.is_ajax():

        shop_sec = request.GET.get('shop_sec')
        wo_no = request.GET.get('wo_no')
        shop_sec1 = request.GET.get('shop_sec1')
        part_nop = request.GET.get('part_nop')
        job = M5DOCnew.objects.filter(pr_shopsec=shop_sec, n_shopsec=shop_sec1, batch_no=wo_no,  part_no=part_nop).values('m5glsn').distinct()
        jobno = list(job)
        return JsonResponse(jobno, safe=False)
    return JsonResponse({"success": False}, status=400)

def mg7getwono(request):
    if request.method == "GET" and request.is_ajax():

        shop_sec = request.GET.get('shop_sec')
        shop_sec1 = request.GET.get('shop_sec1')
        wo = M5DOCnew.objects.filter(pr_shopsec=shop_sec, n_shopsec=shop_sec1).values('batch_no').exclude(batch_no__isnull=True).distinct()
        wono = list(wo)
        return JsonResponse(wono, safe=False)
    return JsonResponse({"success": False}, status=400)




def mg7getpartno(request):
    if request.method == "GET" and request.is_ajax():
        wo_no = request.GET.get('wo_no')
        shop_sec = request.GET.get('shop_sec')
        shop_sec1 = request.GET.get('shop_sec1')
        pa = M5DOCnew.objects.filter(pr_shopsec=shop_sec,n_shopsec=shop_sec1, batch_no=wo_no).values('part_no').exclude(part_no__isnull=True).distinct()
        part_no = list(pa)
        return JsonResponse(part_no, safe=False)
    return JsonResponse({"success": False}, status=400)







@login_required
@role_required(urlpass='/m23view/')
def m23view(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)

    wo_nop = empmast.objects.none()
    if "Superuser" in rolelist:
        tm=shop_section.objects.all()
        tmp=[]
        for on in tm:
            tmp.append(on.section_code)
        context={
            'sub':0,
            'lenm' :2,
            
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles':tmp
        }
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):
            w1 = M5SHEMP.objects.filter(shopsec=rolelist[i]).values('empno').distinct()
            req = M2Doc.objects.filter(part_no__in=w1).values('batch_no').distinct()
            wo_nop = wo_nop | req

        context = {
            'sub':0,
            'subnav':subnav,
            'lenm' :len(rolelist),
            'wo_nop':wo_nop,
            'nav':nav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            
            'roles' :rolelist
        }
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist,
            
        }
    if request.method == "POST":
        
        submitvalue = request.POST.get('proceed')
        if submitvalue=='Proceed':
            shop_sec = request.POST.get('shop_sec')
            staff_no = request.POST.get('staff_no')
            ddate = request.POST.get('ddate')
            obj1 =  M5SHEMP.objects.filter(shopsec=shop_sec,staff_no=staff_no).values('name').distinct()
            noprint=0
            tod = date.today()
            context = {
                'obj1': obj1,
                'ran':range(1,32),
                'len': 31,
                'shop_sec': shop_sec,
                 'noprint':noprint,
                'staff_no': staff_no,
                'curdate':tod,
                'sub':1,
                'nav':nav,
                'ddate': ddate,
                'ip':get_client_ip(request),  
                'subnav':subnav,     
            }
        if submitvalue =='Save':
                    leng=request.POST.get('len')
                    
                    from_time = request.POST.get('from_time')
                    to_time = request.POST.get('to_time')
                    purpose = request.POST.get('pur')
                    shops=request.POST.get('shopsec')
                    staffn=request.POST.get('staffno')
                    date=request.POST.get('dddate')
                    name=request.POST.get('employeename')
                    now = time.localtime()
                    current_time = time.strftime("%H:%M:%S",now)
                    if to_time > from_time and from_time > current_time or from_time == current_time  :
                        m23obj1 = m23doc.objects.filter(shop_no=shops,emp_no=staffn, date=date).values('to_time')
                        if len(m23obj1)>0 :
                            if (m23obj1[0]['to_time'] <= str(from_time) and str(from_time) <= str(to_time) ) :
                                 m23doc.objects.create(shop_no=str(shops),emp_no=str(staffn),emp_name=str(name), from_time=str(from_time), to_time=str(to_time), purpose=str(purpose), date=str(date))
                                 messages.success(request,'New gate pass created')
                            else :
                                 messages.success(request,'From-time and to-time of new gate pass should be greater than issued time of previous gate pass')
                        else:
                           m23doc.objects.create(shop_no=str(shops),emp_no=str(staffn),emp_name=str(name), from_time=str(from_time), to_time=str(to_time), purpose=str(purpose), date=str(date))
                           messages.success(request,'First gate pass created')
                    else :
                        messages.success(request,'To_time should be greater than From_time  and from time should be greater than current time')
                        
        if submitvalue=='Generate report':
            return m23report(request)
    
    return render(request,"m23view.html",context)
                        

def m23getempno(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        staff_no=list(M5SHEMP.objects.filter(shopsec=shop_sec).values('staff_no').distinct())
        return JsonResponse(staff_no, safe = False)
    return JsonResponse({"success":False}, status=400)

def getm23date(request):
    from .models import m23doc
    if request.method == "GET" and request.is_ajax():
        shopsec = request.GET.get('shpsec')
        stfno=request.GET.get('stfno')
        cdate=request.GET.get('insertdate')
        cddate=list(m23doc.objects.filter(shop_no=shopsec,emp_no=stfno).values('date').order_by('-id'))
    
        return JsonResponse(cddate, safe = False)
    return JsonResponse({"success":False}, status=400)
  
@login_required
def m23report(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)

    if "Superuser" in rolelist:
        tm=shop_section.objects.all()
        tmp=[]
        for on in tm:
            tmp.append(on.section_code)
        context={
            'sub':0,
            'lenm' :2,
            
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles':tmp
        }
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):

            w1 = M5SHEMP.objects.filter(shopsec=rolelist[i]).values('empno').distinct()
        

        context = {
            'sub':0,
            'subnav':subnav,
            'lenm' :len(rolelist),
            'nav':nav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            
            'roles' :rolelist
        }
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist,
            
        }
    if request.method == "POST":
        
        submitvalue = request.POST.get('proceed')
        if submitvalue=='Proceed':
            shop_sec = request.POST.get('shop_sec')
            staff_no = request.POST.get('staff_no')
            ddate = request.POST.get('ddate')
            obj1 = m23doc.objects.filter(shop_no=shop_sec,emp_no=staff_no,date=ddate).values('purpose','from_time','to_time').distinct()
            obj2 = m23doc.objects.filter(shop_no=shop_sec,emp_no=staff_no,date=ddate).values('emp_name').distinct()
            leng = obj1.count()
            context = {
                'obj1': obj1,
                'obj2': obj2,
                'ran':range(1,32),
                'len': 31,
                'shop_sec': shop_sec,
                'staff_no': staff_no,
                'sub':1,
                'nav':nav,
                'ip':get_client_ip(request),  
                'subnav':subnav,  
                'date': ddate,   
            }
        if submitvalue =='Submit':
                leng=request.POST.get('len')
                shop_sec= request.POST.get('s_spass')
                staff_no = request.POST.get('s_fpass')
            
                m23obj = M5SHEMP.objects.filter(shopsec=shop_sec,staff_no=staff_no).distinct()
                if((m23obj)):
                    m23obj.delete()
                
                from_time = request.POST.get('from_time')
                to_time = request.POST.get('to_time')
                purpose = request.POST.get('pur')
                shops=request.POST.get('shopsec')
                staffn=request.POST.get('staffno')
  
                if from_time and to_time and purpose :
                    objjj=m23doc.objects.create()
                    objjj.shop_no=shops
                    objjj.emp_no=staffn
                    objjj.emp_name=request.POST.get('employeename')
                    objjj.from_time=from_time
                    objjj.to_time=to_time
                    objjj.purpose=purpose
                    objjj.save()
                    
                wo_nop=M5SHEMP.objects.all().values('staff_no').distinct()
 

    return render(request,"m23report.html",context)







@login_required
@role_required(urlpass='/bogieassembly/')
def bogieassembly_section(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    obj2=BogieAssembly.objects.all().filter(dispatch_status=False).order_by('sno')
    mybo=Batch.objects.all().values('bo_no')
    hhpmysno=BogieAssembly.objects.all().filter((Q(pt_no='17010019')|Q(pt_no='17010706')|Q(pt_no='17010639')|Q(pt_no='17010330')|Q(pt_no='17010421')|Q(pt_no='16010085')|Q(pt_no='16010206')|Q(pt_no='16010255')|Q(pt_no='17010019')|Q(pt_no='17010391')),dispatch_status=False).values('sno','pt_no')

    mysno=BogieAssembly.objects.filter(dispatch_status=False).values('sno')
    myaxle=AxleMachining.objects.all().values('axle_no')
    mytm=PinionPressing.objects.all().values('tm_no')
    mymsu=AxleWheelPressing.objects.all().values('msu_unit_no')
    my_context={
       'object':obj2,
       'nav':nav,
       'subnav':subnav,
       'usermaster':usermaster,
       'ip':get_client_ip(request),
       'mybo':mybo,
       'hhpmysno':hhpmysno,
       'mysno':mysno,
       'myaxle':myaxle,
       'mytm':mytm,
        'mymsu':mymsu,
    }

    if request.method=="POST":

        once=request.POST.get('once')
        submit=request.POST.get('submit')

        if submit=='Save':
            bo_no=request.POST.get('bo_no')
            bo_date=request.POST.get('bo_date')
            date=request.POST.get('date')
            pt_no=request.POST.get('pt_no')
            bo_qty=request.POST.get('bo_qty')
            loco_type=request.POST.get('locos')
            in_date=request.POST.get('in_date')
            outdate=request.POST.get('out_qty')
            frameserial_no=request.POST.get('frameserial_no')
            frame_make=request.POST.get('frame_make')
            frame_type=request.POST.get('frame_type')
            
            if bo_no and bo_date and date and loco_type and frameserial_no and frame_make and frame_type and in_date and outdate and bo_qty and pt_no:
               obj=BogieAssembly.objects.create()
               obj.bo_no=bo_no
               obj.bo_date=bo_date
               obj.pt_no=pt_no
               obj.bo_qty=bo_qty
               obj.date=date
               obj.loco_type=loco_type
               obj.in_date=in_date
               obj.out_qty=outdate
               obj.frame_make=frame_make
               obj.frame_type=frame_type
               obj.frameserial_no=frameserial_no
               obj.inspection_status=False
               obj.save()
               messages.success(request, 'Successfully Added!')
            else:
               messages.error(request,"Please Enter All Records!") 

            obj2=BogieAssembly.objects.all().order_by('sno')
            my_context={
            'object':obj2,
            'mybo':mybo,
            'mysno':mysno,
            }

        if submit=='Edit':
            temp=request.POST.get('editsno')
            if temp is not None:
                sno=int(temp)
            else:
                sno=None
            bo_no=request.POST.get('editbo_no')
            bo_date=request.POST.get('editbo_date')
            date=request.POST.get('editdate')
            loco_type=request.POST.get('editlocos')
            in_date=request.POST.get('editin_date')
            outdate=request.POST.get('editout_date')
            frameserial_no=request.POST.get('editframeserial_no')
            frame_make=request.POST.get('editframe_make')
            frame_type=request.POST.get('editframe_type')
            bo_qty=request.POST.get('editbo_qty')
            pt_no=request.POST.get('editpt_no')        
            if bo_no and bo_date and date and loco_type and frameserial_no and frame_make and frame_type and in_date and outdate and pt_no and bo_qty:
               BogieAssembly.objects.filter(sno=sno).update(bo_no=bo_no,bo_date=bo_date,date=date,loco_type=loco_type,frameserial_no=frameserial_no,frame_make=frame_make,frame_type=frame_type,in_date=in_date,out_qty=outdate,pt_no=pt_no,bo_qty=bo_qty)
               messages.success(request, 'Successfully Edited!')
            else:
               messages.error(request,"Please Enter S.No.!")

            my_context={
            'object':obj2,
            'mybo':mybo,
            'mysno':mysno,
            }

        if submit=="Dispatch":
            sno=int(request.POST.get('dissno'))
            dislocos=request.POST.get('dislocos')
            disdate=request.POST.get('dispatch_date')
            if sno and dislocos and disdate:
                BogieAssembly.objects.filter(sno=sno).update(dispatch_to=dislocos,dispatch_status=True,dispatch_date=disdate)
                messages.success(request, 'Successfully Dispatched!')
            else:
                messages.error(request,"Please Enter S.No.!")

        if submit=='InspectHHP':
            sno=int(request.POST.get('hhpaddsno'))
            axle_no=request.POST.get('hhpaxle_no')
            axle_location=request.POST.get('hhpaxle_location')
            gear_case_no=request.POST.get('hhpgear_case_no')
            tm_no=request.POST.get('hhptm_no')
            gear_case_make=request.POST.get('hhpgear_case_make')
            msu_unit_no=request.POST.get('hhpmsu_unit_no')
            break_rigging_make=request.POST.get('hhpbreak_rigging_make')
            coil_spring_make=request.POST.get('hhpcoil_spring_make')
            sand_box_make=request.POST.get('hhpsand_box_make')
            spheri_block_make=request.POST.get('hhpspheri_block_make')
            elastic_shop_make=request.POST.get('hhpelastic_shop_make')
            secondary_coil_make=request.POST.get('hhpsecondary_coil_make')
            thrust_pad_make=request.POST.get('hhpthrust_pad_make')
            break_cylinder_make=request.POST.get('hhpbreak_cylinder_make')
            lateral_damper=request.POST.get('hhplateral_damper')
            if axle_no and axle_location and gear_case_no and tm_no and gear_case_make and msu_unit_no and break_rigging_make and coil_spring_make and sand_box_make and spheri_block_make and elastic_shop_make and secondary_coil_make and thrust_pad_make and break_cylinder_make and lateral_damper :
                BogieAssembly.objects.filter(sno=sno).update(axle_no=axle_no,axle_location=axle_location,gear_case_no=gear_case_no,traction_motor_no=tm_no,gear_case_make=gear_case_make,msu_unit_no=msu_unit_no,break_rigging_make=break_rigging_make,coil_spring_make=coil_spring_make,sand_box_make=sand_box_make,spheri_block_make=spheri_block_make,elastic_shop_make=elastic_shop_make,secondary_coil_make=secondary_coil_make,thrust_pad_make=thrust_pad_make,break_cylinder_make=break_cylinder_make,lateral_damper=lateral_damper,dispatch_to="HHP_Inspected") 
                messages.success(request,'Successfully Inspected!')
            else:
                messages.error(request,"Please Enter All Records!")

        if submit=='Inspect':
            sno=int(request.POST.get('sno'))
            axle_no=request.POST.get('axle_no')
            axle_location=request.POST.get('axle_location')
            gear_case_no=request.POST.get('gear_case_no')
            tm_no=request.POST.get('tm_no')
            gear_case_make=request.POST.get('gear_case_make')
            msu_unit_no=request.POST.get('msu_unit_no')
            break_rigging_make=request.POST.get('break_rigging_make')
            coil_spring_make=request.POST.get('coil_spring_make')
            sand_box_make=request.POST.get('sand_box_make')
            spheri_block_make=request.POST.get('spheri_block_make')
            elastic_shop_make=request.POST.get('elastic_shop_make')
            horizontal_damper=request.POST.get('horizontal_damper')
            if axle_no and axle_location and gear_case_no and tm_no and gear_case_make and msu_unit_no and break_rigging_make and coil_spring_make and sand_box_make and spheri_block_make and elastic_shop_make and horizontal_damper:
                BogieAssembly.objects.filter(sno=sno).update(axle_no=axle_no,axle_location=axle_location,gear_case_no=gear_case_no,traction_motor_no=tm_no,gear_case_make=gear_case_make,msu_unit_no=msu_unit_no,break_rigging_make=break_rigging_make,coil_spring_make=coil_spring_make,sand_box_make=sand_box_make,spheri_block_make=spheri_block_make,elastic_shop_make=elastic_shop_make,horizontal_damper=horizontal_damper,dispatch_to="Inspected") 
                messages.success(request,'Successfully Inspected!')
            else:
                messages.error(request,"Please Enter All Records!")

        if submit=='Delete':

            sno=int(request.POST.get('delsno'))
            if sno:
                myval=list(BogieAssembly.objects.filter(sno=sno))
                BogieAssembly.objects.filter(sno=sno).delete()
                messages.success(request, 'Successfully Deleted!')
            else:
                messages.error(request,"Please Enter S.No.!")
        

        
        return HttpResponseRedirect("/bogieassembly/")

    return render(request,"bogieassembly.html",my_context)


def bogieassemb_addbo(request):
    if request.method=="GET" and request.is_ajax():
        mybo = request.GET.get('selbo_no')
        myval = list(Batch.objects.filter(bo_no=mybo).values('ep_type','rel_date','part_no','batch_qty'))
        return JsonResponse(myval, safe = False)
    return JsonResponse({"success":False}, status=400)

def bogieassemb_editsno(request):
    if request.method=="GET" and request.is_ajax():
        mysno=request.GET.get('sels_no')
        myval=list(BogieAssembly.objects.filter(sno=mysno).values('bo_no','bo_date','pt_no','bo_qty','loco_type','date','frameserial_no','frame_make','frame_type','in_date','out_qty'))
        return JsonResponse(myval, safe=False)
    return JsonResponse({"success":False}, status=400)

@login_required
@role_required(urlpass='/homeadmin/')
def mg22report(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    dictemper={}
    totindb=0
    emp=[]
    empname = empmast.objects.filter(role__isnull=True,dept_desc='MECHANICAL').values('empname')
    if empname is not None and len(empname):
        for i in range(len(empname)):
            emp.append(empname[i]['empname'])

    w1=M5SHEMP.objects.all().values('name').distinct().exclude(name__isnull=True)
    wono=[]
    for w in range(len(w1)):
        wono.append(w1[w]['name'])
    if "Superuser" in rolelist:
        tm=shop_section.objects.all()
        tmp=[]
        for on in tm:
            tmp.append(on.section_code)
        context={
            'sub':0,
            'names':wono,
            'lenm' :2,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles':tmp,
            'lvdate':"yyyy-mm-dd",
        }
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):
            w1 = empmast.objects.filter(shop_sec=rolelist[i]).values('empno').distinct()
            req = M2Doc.objects.filter(part_no__in=w1).values('batch_no').distinct()
            wo_nop = wo_nop | req

        context = {
            'sub':0,
            'subnav':subnav,
            'lenm' :len(rolelist),
            'wo_nop':wo_nop,
            'nav':nav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist,
            'lvdate':"yyyy-mm-dd",
            'names':wono,
        }
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist,
            'lvdate':"yyyy-mm-dd",
            'names':wono,
        }
    if request.method=="POST":
        bvalue=request.POST.get('proceed')
        shop_sec=request.POST.get('shop_sec')
        lvdate=request.POST.get('updt_date')
        empname=request.POST.get('emp_name')
        accdate=request.POST.get('accdate')
        if bvalue=='Proceed':
            m2=MG22new.objects.filter(shop_sec=shop_sec,updt_date=lvdate,name=empname,acc_Date=accdate).first()
            nocertf=0
            mm=0
            if m2 is not None:
                if m2.c1 or m2.c2 or m2.c3 or m2.c4 is not None:
                    nocertf=1
                temper = {str(mm):{"name":m2.name,
                                               "ticketno":m2.ticketno,"cause":m2.cause,"bgc2":m2.bgc2,
                        "acdate":m2.acc_Date,"superv":m2.sec_sup,"mistry":m2.mistry,"chargeman":m2.chargeman,"ssfoname":m2.ssfo,
                        "reasonneg":m2.reason_neg,"epchck":m2.equip_check,"sugg":m2.suggestions,
                        "cert1":m2.c1,"cert2":m2.c2,"cert3":m2.c3,"cert4":m2.c4,"firstacc":m2.bgc,
                        "anex1":m2.a1,"anex2":m2.a2,"anex3":m2.a3,
                                               }}
                           
                totindb=1
                dictemper.update(copy.deepcopy(temper))
            if "Superuser" in rolelist:
                tm=shop_section.objects.all()
                tmp=[]
                for on in tm:
                    tmp.append(on.section_code)
                context={
                    'sub':1,
                    'lenm' :2,
                    'nav':nav,
                    'subnav':subnav,
                    'ip':get_client_ip(request),
                    'roles':tmp,
                    'shopsec':shop_sec,
                    'lvdate':lvdate,
                    'names':wono,
                    'dictemper':dictemper,
                    'totindb':totindb,
                    'empname':emp,
                    "nocertf":nocertf,
                }
            elif(len(rolelist)==1):
                for i in range(0,len(rolelist)):
                    w1 = empmast.objects.filter(shop_sec=rolelist[i]).values('empno').distinct()
                    req = M2Doc.objects.filter(part_no__in=w1).values('batch_no').distinct()
                    wo_nop = wo_nop | req

                context = {
                    'sub':1,
                    'subnav':subnav,
                    'lenm' :len(rolelist),
                    'wo_nop':wo_nop,
                    'nav':nav,
                    'ip':get_client_ip(request),
                    'usermaster':usermaster,
                    'roles' :rolelist,
                    'shopsec':shop_sec,
                    'lvdate':lvdate,
                    'empname':wono[0]['name'],
                    "nocertf":nocertf,
                    'dictemper':dictemper,
                }
            elif(len(rolelist)>1):
                context = {
                    'sub':1,
                    'lenm' :len(rolelist),
                    'nav':nav,
                    'subnav':subnav,
                    'ip':get_client_ip(request),
                    'usermaster':usermaster,
                    'roles' :rolelist,
                    'shopsec':shop_sec,
                    'lvdate':lvdate,
                    'empname':wono[0]['name'],
                    "nocertf":nocertf,
                    'dictemper':dictemper,
                }

    return render(request,"mg22report.html",context)





@login_required
@role_required(urlpass='/MG22view/')
def MG22view(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    dictemper={}
    totindb=0
    if "Superuser" in rolelist:
        tm=shop_section.objects.all()
        tmp=[]
        for on in tm:
            tmp.append(on.section_code)
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles':tmp,
            'lvdate':"dd-mm-yy",
        }
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):
            w1 = empmast.objects.filter(shop_sec=rolelist[i]).values('empno').distinct()
            req = M2Doc.objects.filter(part_no__in=w1).values('batch_no').distinct()
            wo_nop = wo_nop | req

        context = {
            'sub':0,
            'subnav':subnav,
            'lenm' :len(rolelist),
            'wo_nop':wo_nop,
            'nav':nav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist,
            'lvdate':"dd-mm-yy",
        }
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist,
            'lvdate':"dd-mm-yy",
        }
    if request.method == "POST":
        submitvalue = request.POST.get('proceed')
        if submitvalue=='Add':
            rolelist=usermaster.role.split(", ")
            wo_nop = empmast.objects.none()
            shop_sec = request.POST.get('shop_sec')
            lvdate=request.POST.get('updt_date')
            m2=MG22new.objects.filter(shop_sec=shop_sec,updt_date=lvdate).last()
            mm=0
            if m2 is not None:
                temper = {str(mm):{"name":m2.name,
                                               "ticketno":m2.ticketno,"cause":m2.cause,
                        "acdate":m2.acc_Date,"superv":m2.sec_sup,"mistry":m2.mistry,"chargeman":m2.chargeman,
                                               }}
                           
                totindb=totindb+1

                dictemper.update(copy.deepcopy(temper))

            emp=[]
            staff_name = request.GET.get('empname')
            empname = empmast.objects.filter(role__isnull=True,dept_desc='MECHANICAL').values('empname')
            if empname is not None and len(empname):
                for i in range(len(empname)):
                    emp.append(empname[i]['empname'])

            w1=M5SHEMP.objects.filter(shopsec=shop_sec).values('name').distinct()
            wono=[]
            for w in range(len(w1)):
                wono.append(w1[w]['name'])
            alt_date="mm-dd-yy"
            if "Superuser" in rolelist:
                tm=shop_section.objects.all()
                tmp=[]
                for on in tm:
                    tmp.append(on.section_code)
                context={
                    'sub':1,
                    'lenm' :2,
                    'nav':nav,
                    'subnav':subnav,
                    'ip':get_client_ip(request),
                    'roles':tmp,
                    'shopsec':shop_sec,
                    'lvdate':lvdate,
                    'names':wono,
                    'dictemper':dictemper,
                    'totindb':totindb,
                    'empname':emp,
                    'alt_date':alt_date,
                }
            elif(len(rolelist)==1):
                for i in range(0,len(rolelist)):
                    w1 = empmast.objects.filter(shop_sec=rolelist[i]).values('empno').distinct()
                    req = M2Doc.objects.filter(part_no__in=w1).values('batch_no').distinct()
                    wo_nop = wo_nop | req

                context = {
                    'sub':1,
                    'subnav':subnav,
                    'lenm' :len(rolelist),
                    'wo_nop':wo_nop,
                    'nav':nav,
                    'ip':get_client_ip(request),
                    'usermaster':usermaster,
                    'roles' :rolelist,
                    'shopsec':shop_sec,
                    'lvdate':lvdate,
                    'empname':wono[0]['name'],
                }
            elif(len(rolelist)>1):
                context = {
                    'sub':1,
                    'lenm' :len(rolelist),
                    'nav':nav,
                    'subnav':subnav,
                    'ip':get_client_ip(request),
                    'usermaster':usermaster,
                    'roles' :rolelist,
                    'shopsec':shop_sec,
                    'lvdate':lvdate,
                    'empname':wono[0]['name'],
                }
        if submitvalue=='Save':
             
            updt_date = request.POST.get('updt_date')
            shop_sec = request.POST.get('shop_sec')
            name=request.POST.get('name1')
            staff_no = request.POST.get('staff_no')
            ticketno = request.POST.get('ticket')
            acc_Date = request.POST.get('datename')
            cause = request.POST.get('cause')
            reason_neg = request.POST.get('reason_neg')
            reason_y_neg = request.POST.get('reason_y_neg')
            equip_check = request.POST.get('equip_check')
            suggestions = request.POST.get('suggestion')
            bgc = request.POST.get('bgc')
            bgc2 = request.POST.get('bgc2')
            sec_sup = request.POST.get('sec_sup')
            chargeman = request.POST.get('Chargeman')
            mistry = request.POST.get('Mistry')
            c1 = request.POST.get('c1')
            c2 = request.POST.get('c2')
            c3 = request.POST.get('c3')
            c4 = request.POST.get('c4')
            a1 = request.POST.get('a1')
            a2 = request.POST.get('a2')
            a3 = request.POST.get('a3')
            SSFO = request.POST.get('SSFO')
              
            
            MG22new.objects.create(updt_date=str(updt_date), shop_sec = str(shop_sec),name=str(name),staff_no=str(staff_no), ticketno=str(ticketno), acc_Date =str(acc_Date),cause = str(cause), reason_neg = str(reason_neg), reason_y_neg= str(reason_y_neg),equip_check= str(equip_check), suggestions = str(suggestions), bgc= str(bgc), bgc2= str(bgc2), sec_sup= str(sec_sup), chargeman = str(chargeman), mistry= str(mistry),c1 = str(c1), c2 = str(c2), c3 = str(c3), c4 =str(c4), a1= str(a1), a2= str(a2), a3= str(a3), ssfo= str(SSFO) )

            messages.success(request, 'Successfully Saved !!!, Select new values to update')
    return render(request, "MG22view.html", context)

def mg22getstaffno(request):
    if request.method == "GET" and request.is_ajax():  
        from.models import Batch      
        shop_sec = request.GET.get('shop_sec')
        name=request.GET.get('name')
        w1=M5SHEMP.objects.filter(shopsec=shop_sec,name=name).values('staff_no').distinct()
        wono = w1[0]['staff_no']
        cont ={
            "wono":wono,
        }
        return JsonResponse({"cont":cont}, safe = False)
    return JsonResponse({"success":False}, status=400)

def mg22getstaffName(request):
    if request.method == "GET" and request.is_ajax():  
        from .models import Batch     
        shop_sec = request.GET.get('shop_sec')
        staff_no = request.GET.get('staff_no')
        w1=M5SHEMP.objects.filter(staff_no=staff_no).values('staff_no','name').distinct()
        wono = list(w1)
        return JsonResponse(wono, safe = False)
    return JsonResponse({"success":False}, status=400)








@login_required
@role_required(urlpass='/MG22report/')
def mg22report(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    dictemper={}
    totindb=0
    emp=[]
    empname = empmast.objects.filter(role__isnull=True,dept_desc='MECHANICAL').values('empname')
    if empname is not None and len(empname):
        for i in range(len(empname)):
            emp.append(empname[i]['empname'])

    w1=M5SHEMP.objects.all().values('name').distinct().exclude(name__isnull=True)
    wono=[]
    for w in range(len(w1)):
        wono.append(w1[w]['name'])
    if "Superuser" in rolelist:
        tm=shop_section.objects.all()
        tmp=[]
        for on in tm:
            tmp.append(on.section_code)
        context={
            'sub':0,
            'names':wono,
            'lenm' :2,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles':tmp,
            'lvdate':"yyyy-mm-dd",
        }
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):
            w1 = empmast.objects.filter(shop_sec=rolelist[i]).values('empno').distinct()
            req = M2Doc.objects.filter(part_no__in=w1).values('batch_no').distinct()
            wo_nop = wo_nop | req

        context = {
            'sub':0,
            'subnav':subnav,
            'lenm' :len(rolelist),
            'wo_nop':wo_nop,
            'nav':nav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist,
            'lvdate':"yyyy-mm-dd",
            'names':wono,
        }
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist,
            'lvdate':"yyyy-mm-dd",
            'names':wono,
        }
    if request.method=="POST":
        bvalue=request.POST.get('proceed')
        shop_sec=request.POST.get('shop_sec')
        lvdate=request.POST.get('updt_date')
        empname=request.POST.get('emp_name')
        accdate=request.POST.get('accdate')
        if bvalue=='Proceed':
            m2=MG22new.objects.filter(shop_sec=shop_sec,updt_date=lvdate,name=empname,acc_Date=accdate).first()
            nocertf=0
            mm=0
            if m2 is not None:
                if m2.c1 or m2.c2 or m2.c3 or m2.c4 is not None:
                    nocertf=1
                temper = {str(mm):{"name":m2.name,
                                               "ticketno":m2.ticketno,"cause":m2.cause,"bgc2":m2.bgc2,
                        "acdate":m2.acc_Date,"superv":m2.sec_sup,"mistry":m2.mistry,"chargeman":m2.chargeman,"ssfoname":m2.ssfo,
                        "reasonneg":m2.reason_neg,"epchck":m2.equip_check,"sugg":m2.suggestions,
                        "cert1":m2.c1,"cert2":m2.c2,"cert3":m2.c3,"cert4":m2.c4,"firstacc":m2.bgc,
                        "anex1":m2.a1,"anex2":m2.a2,"anex3":m2.a3,
                                               }}

                totindb=1
                dictemper.update(copy.deepcopy(temper))
            if "Superuser" in rolelist:
                tm=shop_section.objects.all()
                tmp=[]
                for on in tm:
                    tmp.append(on.section_code)
                context={
                    'sub':1,
                    'lenm' :2,
                    'nav':nav,
                    'subnav':subnav,
                    'ip':get_client_ip(request),
                    'roles':tmp,
                    'shopsec':shop_sec,
                    'lvdate':lvdate,
                    'names':wono,
                    'dictemper':dictemper,
                    'totindb':totindb,
                    'empname':emp,
                    "nocertf":nocertf,
                }
            elif(len(rolelist)==1):
                for i in range(0,len(rolelist)):
                    w1 = empmast.objects.filter(shop_sec=rolelist[i]).values('empno').distinct()
                    req = M2Doc.objects.filter(part_no__in=w1).values('batch_no').distinct()
                    wo_nop = wo_nop | req

                context = {
                    'sub':1,
                    'subnav':subnav,
                    'lenm' :len(rolelist),
                    'wo_nop':wo_nop,
                    'nav':nav,
                    'ip':get_client_ip(request),
                    'usermaster':usermaster,
                    'roles' :rolelist,
                    'shopsec':shop_sec,
                    'lvdate':lvdate,
                    'empname':wono[0]['name'],
                }
            elif(len(rolelist)>1):
                context = {
                    'sub':1,
                    'lenm' :len(rolelist),
                    'nav':nav,
                    'subnav':subnav,
                    'ip':get_client_ip(request),
                    'usermaster':usermaster,
                    'roles' :rolelist,
                    'shopsec':shop_sec,
                    'lvdate':lvdate,
                    'empname':wono[0]['name'],
                }

    return render(request,"mg22report.html",context)






@login_required
@role_required(urlpass='/demandreg/')
def wogen(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    context={
        'nav':nav,
        'subnav':subnav,
        'usermaster':usermaster,
        'ip':get_client_ip(request),
    }
    return render(request,'wogeneration.html',context)








@login_required
@role_required(urlpass='/axlewheelpressing_section/')
def axlewheelpressing_section(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    obj2=AxleWheelPressing.objects.all().filter(dispatch_status=False).order_by('sno')
    mybo=Batch.objects.all().values('bo_no')
    hhpmysno=AxleWheelPressing.objects.all().filter((Q(pt_no='17010019')|Q(pt_no='17010706')|Q(pt_no='17010639')|Q(pt_no='17010330')|Q(pt_no='17010421')|Q(pt_no='16010085')|Q(pt_no='16010206')|Q(pt_no='16010255')|Q(pt_no='17010019')|Q(pt_no='17010391')),dispatch_status=False).values('sno')
    mysno=AxleWheelPressing.objects.all().filter(dispatch_status=False).values('sno')
    axle=list(AxleMachining.objects.filter(axlefitting_status=False,axleinspection_status=True).values('axle_no'))
    wheelde=list(WheelMachining.objects.filter(wheelfitting_status=False,wheelinspection_status=True).values('wheel_no'))
    wheelpressde=list(WheelMachining.objects.filter(wheelfitting_status=False,wheelinspection_status=True).values('wheel_no'))
    wheelnde=list(WheelMachining.objects.filter(wheelfitting_status=False,wheelinspection_status=True).values('wheel_no'))
    my_context={
       'object':obj2,
       'nav':nav,
       'subnav':subnav,
       'usermaster':usermaster,
       'ip':get_client_ip(request),
       'mybo':mybo,
       'mywheel':wheelde,
       'mywheel1':wheelnde,
       'myaxle':axle,
        'mysno':mysno,
        'hhpmysno':hhpmysno
       }
    if request.method=="POST":
        
        once=request.POST.get('once')
        submit=request.POST.get('submit')
        if submit=='Save':

            bo_no=request.POST.get('bo_no')
            bo_date=request.POST.get('bo_date')
            pt_no=request.POST.get('pt_no')
            bo_qty=request.POST.get('bo_qty')
            indate=request.POST.get('in_qty')
            outdate=request.POST.get('out_qty')
            date=request.POST.get('date')
            loco_type=request.POST.get('locos')
            axle_no=request.POST.get('axle_no')
            wheelno_de=request.POST.get('wheelno_de')
            wheelno_nde=request.POST.get('wheelno_nde')
            bullgear_no=request.POST.get('bullgear_no')
            bullgear_make=request.POST.get('bullgear_make')
            s1 = indate.split('-')
            month1 = s1[1]
            day1 = s1[0]
            year1 = s1[2]
            newindate =  year1 + "-" + month1 + "-" + day1
            s2 = outdate.split('-')
            month2 = s2[1]
            day2 = s2[0]
            year2 = s2[2]
            newoutdate =  year2 + "-" + month2 + "-" + day2
            if bo_no and bo_date and date and loco_type and axle_no and wheelno_de and wheelno_nde and bullgear_no and bullgear_make and pt_no and bo_qty and indate and outdate:
               obj=AxleWheelPressing.objects.create()
               obj.bo_no=bo_no
               obj.bo_date=bo_date
               obj.date=date
               obj.pt_no=pt_no
               obj.bo_qty=bo_qty
               obj.in_qty=newindate
               obj.out_qty=newoutdate
               obj.loco_type=loco_type
               obj.axle_no=axle_no
               obj.wheelno_de=wheelno_de
               obj.wheelno_nde=wheelno_nde
               obj.bullgear_no=bullgear_no
               obj.bullgear_make=bullgear_make
               obj.inspectinspection_status=False
               obj.hhpinspection_status=False
               obj.save()
               messages.success(request, 'Successfully Added!')
               AxleMachining.objects.filter(axle_no=axle_no).update(axlefitting_status=True,dispatch_status=True)
               WheelMachining.objects.filter(wheel_no=wheelno_de).update(wheelfitting_status=True,dispatch_status=True)
               WheelMachining.objects.filter(wheel_no=wheelno_nde).update(wheelfitting_status=True,dispatch_status=True)  
            else:
                messages.error(request,"Please Enter All Records!")

            obj2=AxleWheelPressing.objects.all().order_by('sno')
            my_context={
            'object':obj2,
            }

        if submit=='Edit':
            temp=request.POST.get('editsno')
            if temp is not None:
                sno=int(temp)
            else:
                sno=None
            bo_no=request.POST.get('editbo_no')
            bo_date=request.POST.get('editbo_date')
            bo_qty=request.POST.get('editbo_qty')
            indate=request.POST.get('editin_qty')
            outdate=request.POST.get('editout_qty')
            pt_no=request.POST.get('editpt_no')
            date=request.POST.get('editdate')
            loco_type=request.POST.get('editlocos')
            axle_no=request.POST.get('editaxle_no')
            wheelno_de=request.POST.get('editwheelno_de')
            wheelno_nde=request.POST.get('editwheelno_nde')
            bullgear_no=request.POST.get('editbullgear_no')
            bullgear_make=request.POST.get('editbullgear_make')
            in_qty=request.POST.get('editin_qty')
            out_qty=request.POST.get('editout_qty')

            if bo_no and bo_date and date and loco_type and pt_no and bo_qty and indate and outdate and axle_no and wheelno_de and wheelno_nde and bullgear_no and bullgear_make and in_qty and out_qty:
               AxleWheelPressing.objects.filter(sno=sno).update(bo_no=bo_no,bo_date=bo_date,edit_date=date,loco_type=loco_type,axle_no=axle_no,in_qty=in_qty,out_qty=out_qty,wheelno_de=wheelno_de,wheelno_nde=wheelno_nde,bullgear_no=bullgear_no,bullgear_make=bullgear_make,pt_no=pt_no,bo_qty=bo_qty)
               AxleMachining.objects.filter(axle_no=axle_no).update(axlefitting_status=True,dispatch_status=True)
               WheelMachining.objects.filter(wheel_no=wheelno_de).update(wheelfitting_status=True,dispatch_status=True)
               WheelMachining.objects.filter(wheel_no=wheelno_nde).update(wheelfitting_status=True,dispatch_status=True)
               messages.success(request, 'Successfully Edited!')
            else:
               messages.error(request,"Please Enter S.No.!")

        if submit=='InspectHHP':
            sno=int(request.POST.get('sno'))
            wheelno_de=request.POST.get('hhpwheelno_de')
            wheel_de_make=request.POST.get('hhpwheel_de_make')
            wheelno_nde=request.POST.get('hhpwheelno_nde')
            wheel_nde_make=request.POST.get('hhpwheel_nde_make')
            wheel_nde_pressure=request.POST.get('hhpwheel_nde_pressure')
            axle_no=request.POST.get('hhpaxle_no')
            axle_make=request.POST.get('hhpaxle_make')
            bullgear_no=request.POST.get('hhpbullgear_no')
            bullgear_make=request.POST.get('hhpbullgear_make')
            bullgear_pressure=request.POST.get('hhpbullgear_pressure')
            msu_unit_no=request.POST.get('hhpmsu_unit_no')
            msu_unit_make=request.POST.get('hhpmsu_unit_make')
            axle_box_no=request.POST.get('hhpaxle_box_no')
            axle_box_make=request.POST.get('hhpaxle_box_make')
            axle_box_clearance=request.POST.get('hhpaxle_box_clearance')
            suspension_bearing_de_no=request.POST.get('hhpsuspension_bearing_de_no')
            suspension_bearing_de_make=request.POST.get('hhpsuspension_bearing_de_make')
            suspension_bearing_nde_no=request.POST.get('hhpsuspension_bearing_nde_no')
            suspension_bearing_nde_make=request.POST.get('hhpsuspension_bearing_nde_make')
            cru_bearing_no_de=request.POST.get('hhpcru_bearing_no_de')
            cru_bearing_make_de=request.POST.get('hhpcru_bearing_make_de')
            cru_bearing_pressure_de=request.POST.get('hhpcru_bearing_pressure_de')
            cru_bearing_no_nde=request.POST.get('hhpcru_bearing_no_nde')
            cru_bearing_make_nde=request.POST.get('hhpcru_bearing_make_nde')
            cru_bearing_pressure_nde=request.POST.get('hhpcru_bearing_pressure_nde')
            date=request.POST.get('hhpdate')
            inspector_name=request.POST.get('hhpinspector_name')
            journal_no_de=request.POST.get('hhpjournal_no_de')
            journal_make_de=request.POST.get('hhpjournal_make_de')
            journal_no_nde=request.POST.get('hhpjournal_no_nde')
            journal_make_nde=request.POST.get('hhpjournal_make_nde')
            
            if cru_bearing_pressure_nde and cru_bearing_make_nde and wheelno_de and wheel_de_make and wheelno_nde and wheel_nde_make and wheel_nde_pressure and axle_no and axle_make and bullgear_no and bullgear_make and bullgear_pressure and msu_unit_no and msu_unit_make and axle_box_no and axle_box_make and axle_box_clearance and suspension_bearing_de_no and suspension_bearing_de_make and suspension_bearing_nde_no and suspension_bearing_nde_make and cru_bearing_no_de and cru_bearing_make_de and cru_bearing_pressure_de and date and inspector_name and cru_bearing_no_nde and journal_no_de and journal_make_de and journal_no_nde and journal_make_nde:
                
                AxleWheelPressing.objects.filter(sno=sno).update(wheelno_de=wheelno_de,wheel_de_make=wheel_de_make,wheel_nde_make=wheel_nde_make,wheelno_nde=wheelno_nde,wheel_nde_pressure=wheel_nde_pressure,axle_no=axle_no,axle_make=axle_make,bullgear_no=bullgear_no,bullgear_make=bullgear_make,bullgear_pressure=bullgear_pressure,msu_unit_no=msu_unit_no,msu_unit_make=msu_unit_make,axle_box_no=axle_box_no,axle_box_make=axle_box_make,axle_box_clearance=axle_box_clearance,suspension_bearing_de_no=suspension_bearing_de_no,suspension_bearing_de_make=suspension_bearing_de_make,suspension_bearing_nde_no=suspension_bearing_nde_no,suspension_bearing_nde_make=suspension_bearing_nde_make,cru_bearing_no_de=cru_bearing_no_de,cru_bearing_make_de=cru_bearing_make_de,cru_bearing_pressure_de=cru_bearing_pressure_de,inspect_date=date,inspector_name=inspector_name,cru_bearing_no_nde=cru_bearing_no_nde,cru_bearing_make_nde=cru_bearing_make_nde,cru_bearing_pressure_nde=cru_bearing_pressure_nde,hhpinspection_status=True,journal_no_de=journal_no_de,journal_make_de=journal_make_de,journal_no_nde=journal_no_nde,journal_make_nde=journal_make_nde,dispatch_to="HHP_Inspected")

                messages.success(request,'Successfully Edited!')
            else:
                messages.error(request,"Please Enter the all the records!")    
        if submit=='Inspect':
            sno=int(request.POST.get('sno'))
            wheelno_de=request.POST.get('inspectwheelno_de')
            wheel_de_make=request.POST.get('inspectwheel_de_make')
            wheelno_nde=request.POST.get('inspectwheelno_nde')
            wheel_nde_make=request.POST.get('inspectwheel_nde_make')
            wheel_nde_pressure=request.POST.get('inspectwheel_nde_pressure')
            axle_no=request.POST.get('inspectaxle_no')
            axle_make=request.POST.get('inspectaxle_make')
            bullgear_no=request.POST.get('inspectbullgear_no')
            bullgear_make=request.POST.get('inspectbullgear_make')
            bullgear_pressure=request.POST.get('inspectbullgear_pressure')
            msu_unit_no=request.POST.get('inspectmsu_unit_no')
            msu_unit_make=request.POST.get('inspectmsu_unit_make')
            axle_box_no=request.POST.get('inspectaxle_box_no')
            axle_box_make=request.POST.get('inspectaxle_box_make')
            axle_box_clearance=request.POST.get('inspectaxle_box_clearance')
            suspension_bearing_de_no=request.POST.get('inspectsuspension_bearing_de_no')
            suspension_bearing_de_make=request.POST.get('inspectsuspension_bearing_de_make')
            suspension_bearing_nde_no=request.POST.get('inspectsuspension_bearing_nde_no')
            suspension_bearing_nde_make=request.POST.get('inspectsuspension_bearing_nde_make')
            cru_bearing_no_de=request.POST.get('inspectcru_bearing_no_de')
            cru_bearing_make_de=request.POST.get('inspectcru_bearing_make_de')
            cru_bearing_pressure_de=request.POST.get('inspectcru_bearing_pressure_de')
            cru_bearing_no_nde=request.POST.get('inspectcru_bearing_no_nde')
            cru_bearing_make_nde=request.POST.get('inspectcru_bearing_make_nde')
            cru_bearing_pressure_nde=request.POST.get('inspectcru_bearing_pressure_nde')
            date=request.POST.get('inspectdate')
            inspector_name=request.POST.get('inspectinspector_name')
            if cru_bearing_pressure_nde and cru_bearing_make_nde and wheelno_de and wheel_de_make and wheelno_nde and wheel_nde_make and wheel_nde_pressure and axle_no and axle_make and bullgear_no and bullgear_make and bullgear_pressure and msu_unit_no and msu_unit_make and axle_box_no and axle_box_make and axle_box_clearance and suspension_bearing_de_no and suspension_bearing_de_make and suspension_bearing_nde_no and suspension_bearing_nde_make and cru_bearing_no_de and cru_bearing_make_de and cru_bearing_pressure_de and date and inspector_name and cru_bearing_no_nde:
                AxleWheelPressing.objects.filter(sno=sno).update(wheelno_de=wheelno_de,wheel_de_make=wheel_de_make,wheel_nde_make=wheel_nde_make,wheelno_nde=wheelno_nde,wheel_nde_pressure=wheel_nde_pressure,axle_no=axle_no,axle_make=axle_make,bullgear_no=bullgear_no,bullgear_make=bullgear_make,bullgear_pressure=bullgear_pressure,msu_unit_no=msu_unit_no,msu_unit_make=msu_unit_make,axle_box_no=axle_box_no,axle_box_make=axle_box_make,axle_box_clearance=axle_box_clearance,suspension_bearing_de_no=suspension_bearing_de_no,suspension_bearing_de_make=suspension_bearing_de_make,suspension_bearing_nde_no=suspension_bearing_nde_no,suspension_bearing_nde_make=suspension_bearing_nde_make,cru_bearing_no_de=cru_bearing_no_de,cru_bearing_make_de=cru_bearing_make_de,cru_bearing_pressure_de=cru_bearing_pressure_de,inspect_date=date,inspector_name=inspector_name,cru_bearing_no_nde=cru_bearing_no_nde,cru_bearing_make_nde=cru_bearing_make_nde,cru_bearing_pressure_nde=cru_bearing_pressure_nde,inspectinspection_status=True,dispatch_to="Inspected")
                messages.success(request,'Successfully Inspected!')
            else:
                messages.error(request,"Please Enter all the records!")

        if submit=="Dispatch":
            
            sno=int(request.POST.get('dissno'))
            dislocos=request.POST.get('dislocos')
            disdate=request.POST.get('dispatch_date')
            if sno and dislocos and disdate:
                AxleWheelPressing.objects.filter(sno=sno).update(dispatch_to=dislocos,dispatch_status=True,dispatch_date=disdate)
                messages.success(request, 'Successfully Dispatched!')
            else:
                messages.error(request,"Please Enter S.No.!")
        
        if submit=='Delete':

            sno=int(request.POST.get('delsno'))
            if sno:
                AxleWheelPressing.objects.filter(sno=sno).delete()
                messages.success(request, 'Successfully Deleted!')
            else:
                messages.error(request,"Please Enter S.No.!")
        
        return HttpResponseRedirect("/axlewheelpressing_section/")

    return render(request,"axlewheelpressing_section.html",my_context)

def axlepress_addbo(request):
    if request.method=="GET" and request.is_ajax():
        mybo = request.GET.get('selbo_no')
        myval = list(Batch.objects.filter(bo_no=mybo).values('ep_type','rel_date','part_no','batch_qty'))
        return JsonResponse(myval, safe = False)
    return JsonResponse({"success":False}, status=400)

def wheelpress_inspectsno(request):
    if request.method=="GET" and request.is_ajax():
        mysno=request.GET.get('sels_no')
        myval=list(AxleWheelPressing.objects.filter(sno=mysno).values('wheelno_de','wheelno_nde','axle_no','bullgear_no','bullgear_make'))
        return JsonResponse(myval, safe = False)
    return JsonResponse({"success":False}, status=400)







@login_required
@role_required(urlpass='/m13insert/')
def m13insert(request):
    from .models import M13
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    if "Superuser" in rolelist:
        tm=shop_section.objects.all()
        tmp=[]
        for on in tm:
            tmp.append(on.section_code)
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles':tmp
        }
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):
            req = M13.objects.all().filter(shop=rolelist[i]).values('wo').distinct()
            wo_nop =wo_nop | req
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'wo_nop':wo_nop,
            'nav':nav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist,
            'subnav':subnav,
        }
        
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'nav':nav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist,
            'subnav':subnav,
        }
    if request.method == "POST":
        global shop_sec
        global wo_no
        global part_no
        submitvalue = request.POST.get('proceed')

        if submitvalue=='Save':
                user=request.user
                shop_sec = request.POST.get('shop_sec')
                wo_no = request.POST.get('wo_no')
                part_no = request.POST.get('part_nop')
                from decimal import Decimal
                m13_no=request.POST.get('m13no')  
                slno= request.POST.get('slno')
                m13_sn = request.POST.get('m13_sn')
                epc = request.POST.get('epc')
                ab=request.POST.get('qty_tot')
                qt=ab
                if len(ab):
                    qty_tot = Decimal(ab)
                else:
                    qty_tot=0
                ab=request.POST.get('qty_ins')
                qi=ab
                if len(ab):
                    qty_ins = Decimal(ab)
                else:
                    qty_ins=0
                ab=request.POST.get('qty_pas')
                qp=ab
                if len(ab):
                    qty_pas = Decimal(ab)
                else:
                    qty_pas=0
                ab=request.POST.get('qty_rej')
                qr=ab
                if len(ab):
                    qty_rej = Decimal(ab)
                else:
                    qty_rej=0
                vendor_cd = request.POST.get('vendor_cd')
                opn = request.POST.get('opn')
                job_no = request.POST.get('job_no')
                fault_cd = request.POST.get('fault_cd')
                wo_rep = request.POST.get('wo_rep')
                m13no = request.POST.get('m13no')
                m15_no = request.POST.get('m15_no')
                rej_cat = request.POST.get('rej_cat')
                reason = request.POST.get('reason')
                emp_id = request.POST.get('emp_id')
                m13date = request.POST.get('date')
                M13.objects.create(usr_cd=str(user), shop=str(shop_sec), staff_no=str(emp_id), wo=str(wo_no), part_no=str(part_no), m13_sn=str(m13_sn), qty_tot=int(qty_tot), qty_ins=int(qty_ins), qty_pas=int(qty_pas), qty_rej=int(qty_rej), vendor_cd=str(vendor_cd), opn=str(opn), job_no=str(job_no), fault_cd=str(fault_cd),m15_no=str(m15_no), wo_rep=str(wo_rep), rej_cat=str(rej_cat), reason=str(reason), m13_no=str(m13_no), slno=str(slno), epc=str(epc), m13_date=str(m13date))
                smsM13("8130731698","Inspection card for M13 No:-"+m13_no+" dated:- "+m13date+" of Part No:-"+part_no+" for work order no:- "+wo_no+" has been generated. Qty inspected:- "+qi+", Qty Passed:- "+qp+", Qty Rejected:- "+qr+" under "+fault_cd+" head")
                messages.success(request,'Successfully Edited!')
    return render(request,"m13insert.html",context)

def m13get1(request):
    if request.method == "GET" and request.is_ajax():
        user=request.user
        part_no = request.GET.get('part_no')
        wo_no = request.GET.get('wo_no')
        obj = list(Part.objects.filter(partno=part_no).values('des','drgno').distinct())
        m=''
        obj1 = list(M2Doc.objects.filter(part_no=part_no,batch_no=wo_no).values('qty').distinct())
        
        for k in M13.objects.raw('SELECT id, "SLNO"::int as s FROM public."M13" WHERE "USR_CD"=%s order by "SLNO"::int desc',[str(user)]):
            m=k.s
            break
        ep=list(Batch.objects.filter(bo_no=wo_no).values('ep_type'))
        obj.append(obj1)
        obj.append(m)
        obj.append(ep)
        return JsonResponse(obj, safe = False)
    return JsonResponse({"success":False}, status=400)

def m13getwono(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        wo_no = list(Batch.objects.filter(status='R').values('bo_no').distinct())
        return JsonResponse(wo_no, safe = False)
    return JsonResponse({"success":False}, status=400)

def m13getpano(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        wo_no = request.GET.get('wo_no')
        p1=M14M4.objects.filter(bo_no__in=[Batch.objects.filter(status='R',bo_no=wo_no).values('bo_no').distinct()]).values('part_no').distinct()
        p2=M2Doc.objects.filter(batch_no__in=[Batch.objects.filter(status='R',bo_no=wo_no).values('bo_no').distinct()]).values('part_no').distinct()
        p=p1.union(p2)
        part_no=list(Oprn.objects.filter(part_no__in=[p],shop_sec=shop_sec).values('part_no').distinct())
        return JsonResponse(part_no, safe = False)
    return JsonResponse({"success":False}, status=400)

def smsM13(phoneno,message):
    url = "http://enterprise.smsgupshup.com/GatewayAPI/rest?method=SendMessage&send_to=91"+str(phoneno)+"&msg="+message+" &msg_type=TEXT&userid=2000184632&auth_scheme=plain&password=pWK3H5&v=1.1&format=text"
    
    response = requests.request("POST", url)


@login_required
@role_required(urlpass='/mg20view/')
def mg20view(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    if "Superuser" in rolelist:
        tm=shop_section.objects.all()
        tmp=[]
        for on in tm:
            tmp.append(on.section_code)
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles':tmp
        }
    elif(len(rolelist)==1):
        for i in range(0, len(rolelist)):
            req = Shemp.objects.all().filter(shopsec=rolelist[i]).values('staff_no').exclude(staff_no__isnull=True).distinct()
            wo_nop =wo_nop | req



        context = {
            'sub':0,
            'subnav':subnav,
            'lenm' :len(rolelist),
            'wo_nop':wo_nop,
            'nav':nav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist
        }
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist
        }
    if request.method == "POST":
        submitvalue = request.POST.get('proceed')
        if submitvalue=='Proceed':
            rolelist=usermaster.role.split(", ")
            wo_nop = empmast.objects.none()
            shop_sec = request.POST.get('shop_sec')
            staff_no = request.POST.get('staff_no')
            current_date = date.today()
            obj = Shemp.objects.filter(shopsec=shop_sec, staff_no=staff_no).values('name', 'desgn', 'cat', 'emp_type').distinct()
            obj1 = MG20.objects.filter(shop_sec=shop_sec, staff_no=staff_no).values('no_of_days', 'nature', 'appr_datej').distinct()
            if len(obj1)== 0:
                obj1=range(0, 1)

            if "Superuser" in rolelist:
                  tm=shop_section.objects.all()
                  tmp=[]
                  for on in tm:
                      tmp.append(on.section_code)
                  context = {
                        'roles':tmp,
                        'lenm' :2,
                        'nav':nav,
                        'ip':get_client_ip(request),
                        'obj': obj,
                        'obj1': obj1,
                        'date' : current_date,


                        'sub': 1,

                        'staff_no': staff_no,
                        'shop_sec': shop_sec,

                        'subnav':subnav
                  }
            elif(len(rolelist)==1):
                  for i in range(0, len(rolelist)):
                      req = Shemp.objects.all().filter(shopsec=rolelist[i]).values('staff_no').exclude(staff_no__isnull=True).distinct()
                      wo_nop = wo_nop | req
                  context = {
                        'wo_nop':wo_nop,
                        'roles' :rolelist,
                        'usermaster':usermaster,
                        'lenm' :len(rolelist),
                        'nav': nav,
                        'ip': get_client_ip(request),
                        'obj': obj,
                        'obj1': obj1,
                        'sub': 1,
                        'date': current_date,

                        'staff_no': staff_no,
                        'shop_sec': shop_sec,

                        'subnav':subnav
                  }
            elif(len(rolelist)>1):
                  context = {
                        'lenm' :len(rolelist),
                        'nav':nav,
                        'ip':get_client_ip(request),
                        'usermaster':usermaster,
                        'roles' :rolelist,
                        'obj': obj,
                        'obj1': obj1,
                        'date': current_date,
                        'sub': 1,

                        'staff_no': staff_no,
                        'shop_sec': shop_sec,

                        'subnav':subnav
                  }

        if submitvalue=='Save':

                shop_sec= request.POST.get('shop_sec1')
                staff_no = request.POST.get('staff_no1')
                name= request.POST.get('name1')
                desgn = request.POST.get('desgn1')
                cat = request.POST.get('cat1')
                emp_type = request.POST.get('emp_type1')
                no_of_days = request.POST.get('no_of_days')
                nature = request.POST.get('nature')
                appr_datej = request.POST.get('appr_datej')
                current_date=date.today()
                obj2 = MG20.objects.filter(shop_sec=shop_sec, staff_no=staff_no, cat=cat, current_date=current_date).distinct()
                if len(obj2) == 0:
                    MG20.objects.create(current_date=str(current_date), shop_sec=str(shop_sec), staff_no=str(staff_no), cat=str(cat), name=str(name), desgn=str(desgn), emp_type=str(emp_type), nature=str(nature), no_of_days=str(no_of_days), appr_datej=str(appr_datej))
                else:
                    MG20.objects.filter(shop_sec=shop_sec, staff_no=staff_no, cat=cat).update(name=str(name), desgn=str(desgn), emp_type=str(emp_type), nature=str(nature), no_of_days=str(no_of_days), appr_datej=str(appr_datej))
                wo_no=MG20.objects.all().values('staff_no').distinct()
                messages.success(request, 'Successfully Done!, Select new values to proceed')
    return render(request, "mg20view.html", context)

def mg20getstaff(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        staff = Shemp.objects.filter(shopsec=shop_sec).values('staff_no').exclude(staff_no__isnull=True).distinct()
        staff_no = list(staff)
        return JsonResponse(staff_no, safe=False)
    return JsonResponse({"success": False}, status=400)






@login_required
@role_required(urlpass='/RoleGeneration/')
def RoleGeneration(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    rolemenulist = roleMenu.objects.all().values('navitem').order_by('navitem').distinct()
    originalitems = navbar.objects.all().values('navitem').order_by('navitem').distinct()
    originalmenu = navbar.objects.all().values('navmenu').order_by('navmenu').distinct()
    originalnavitem = []
    originalnavmenu = []
    for i in range(len(originalitems)):
        originalnavitem.append(originalitems[i]['navitem'])
    for i in range(len(originalmenu)):
        originalnavmenu.append(originalmenu[i]['navmenu'])
    originalnavitem.remove('Under Production')
    originalnavitem.remove('Not Authorized')
    originalnavitem.remove('Update Permission Incharge')
    notpresent = []
    present = []
    if request.method=='POST':
        rolename = request.POST.get('rolename')
        perlist = request.POST.getlist('permissions')
        viewper = viewUrlPermission.objects.filter(navitem__in=perlist).values('rolespermission','id')
        if rolename and perlist:
            roles.objects.create(role=rolename,parent=rolename)
            for i in range(len(perlist)):
                toinsert = roleMenu.objects.all().filter(navitem=perlist[i]).first()
                present.append(toinsert.navmenu)
                navbar.objects.create(role=rolename,navmenu=toinsert.navmenu,navitem=toinsert.navitem,link=toinsert.link)
            for j in range(len(originalnavmenu)):
                if originalnavmenu[j] not in present:
                    notpresent.append(originalnavmenu[j])
            for i in range(len(notpresent)):
                navbar.objects.create(role=rolename,navmenu=notpresent[i],navitem='Not Authorized',link='#')
            for i in range(len(viewper)):
                tempper = viewper[i]['rolespermission']
                restemp = tempper.split(",")
                restemp.append(rolename)
                final = ", ".join(restemp)
                toupdate=viewUrlPermission.objects.get(id=viewper[i]['id'])
                toupdate.rolespermission = final
                toupdate.save()
            present.clear()
            notpresent.clear()
            originalnavmenu.clear()
            originalnavitem.clear()
            messages.success(request, 'Successfully Created!')
        else:
            messages.error(request,"Error")
    context = {
        'ip':get_client_ip(request),
        'nav':nav,
        'subnav':subnav,
        'rolemenulist':rolemenulist,
    }
    return render(request,'RoleGeneration.html',context)






@login_required
@role_required(urlpass='/RoleDelete/')
def RoleDelete(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    role = roles.objects.all().values('role').order_by('role').distinct()
    users = []
    if request.method=="POST":
        rolename = request.POST.get('roldel')
        if rolename:
            perlist = navbar.objects.filter(role=rolename).values('navitem').distinct()
            viewper = viewUrlPermission.objects.filter(navitem__in=perlist).values('rolespermission','id')
            for i in range(len(viewper)):
                tempper = viewper[i]['rolespermission']
                restemp = tempper.split(", ")
                restemp.remove(rolename)
                final = ", ".join(restemp)
                toupdate=viewUrlPermission.objects.get(id=viewper[i]['id'])
                toupdate.rolespermission = final
                toupdate.save()
            navbar.objects.all().filter(role=rolename).delete()
            roles.objects.all().filter(role=rolename).delete()
            userremove = empmast.objects.all().values('empno').filter(role=rolename)
            for i in range(len(userremove)):
                users.append(userremove[i]['empno'])
                empmast.objects.filter(empno=userremove[i]['empno']).update(role=None,parent=None)
            User.objects.filter(username__in=users).delete()
            messages.success(request, 'Successfully Deleted!')
        else:
            messages.error(request,"Error")
    context = {
        'ip':get_client_ip(request),
        'nav':nav,
        'subnav':subnav,
        'roles' : role,
    }
    return render(request,'RoleDelete.html',context)


@login_required
@role_required(urlpass='/m30view/')
def m30view(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    if "Superuser" in rolelist:
        tm=shop_section.objects.all()
        tmp=[]
        for on in tm:
            tmp.append(on.section_code)
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles':tmp
        }
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):

            req = Oprn.objects.filter(shop_sec=rolelist[i]).values('part_no').distinct()
            wo_nop = wo_nop | req

        context = {
            'sub':0,
            'subnav':subnav,
            'lenm' :len(rolelist),
            'wo_nop':wo_nop,
            'nav':nav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist
        }
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist
        }
    if request.method == "POST":
        submitvalue = request.POST.get('proceed')
        if submitvalue=='Proceed':
            rolelist=usermaster.role.split(", ")
            wo_nop = empmast.objects.none()
            shop_sec = request.POST.get('shop_sec')
            part_no = request.POST.get('part_nop')
            staff_no = request.POST.get('staff_no')
            date = request.POST.get('date')
            req = request.POST.get('req')
            obj = Part.objects.filter(partno=part_no).values('des', 'drgno').distinct()
            rand=random.randint(0, 100000000)
            obj1= Shemp.objects.filter(shopsec=shop_sec, staff_no=staff_no).values('name', 'desgn', 'cat', 'emp_type').distinct()
            obj2=Batch.objects.filter(part_no=part_no).values('loco_fr', 'loco_to').distinct()
            obj3 = M30.objects.filter(shop_sec=shop_sec, staff_no=staff_no, part_no=part_no, date=date).values('qty', 'dimension','spe_val','obt_val','interc', 'waiver_no', 'waiver_date','non_conf_des','reason_for_non_conf','corr_action_plan','remarks_hod','remarks_cde','remarks_cqam','request_no').distinct()
            if len(obj3) == 0:
                obj3 =range(0, 1)
            if "Superuser" in rolelist:
                  tm=shop_section.objects.all()
                  tmp=[]
                  for on in tm:
                      tmp.append(on.section_code)
                  context = {
                        'roles':tmp,
                        'lenm' :2,
                        'nav':nav,
                        'ip':get_client_ip(request),
                        'obj': obj,
                        'obj1': obj1,
                        'obj2': obj2,
                        'obj3': obj3,
                        'req': req,
                        'staff_no': staff_no,
                        'rand': rand,

                        'sub': 1,

                        'date': date,

                        'shop_sec': shop_sec,
                        'part_no': part_no,

                        'subnav':subnav
                  }
            elif(len(rolelist)==1):
                  for i in range(0,len(rolelist)):
                        req = Oprn.objects.filter(shop_sec=rolelist[i]).values('part_no').distinct()
                        wo_nop = wo_nop | req
                  context = {
                        'wo_nop':wo_nop,
                        'roles' :rolelist,
                        'usermaster':usermaster,
                        'lenm' :len(rolelist),
                        'nav': nav,
                        'ip': get_client_ip(request),
                        'obj': obj,
                        'obj1': obj1,
                        'obj2': obj2,
                        'obj3': obj3,


                        'req': req,
                        'staff_no': staff_no,
                        'rand': rand,

                        'sub': 1,

                        'date': date,

                        'shop_sec': shop_sec,
                        'part_no': part_no,

                        'subnav':subnav
                  }
            elif(len(rolelist)>1):
                  context = {
                        'lenm' :len(rolelist),
                        'nav':nav,
                        'ip':get_client_ip(request),
                        'usermaster':usermaster,
                        'roles' :rolelist,
                        'obj': obj,
                        'obj1': obj1,
                        'obj2': obj2,
                        'obj3': obj3,
                        'req': req,
                        'staff_no': staff_no,
                        'rand': rand,

                        'sub': 1,

                        'date': date,

                        'shop_sec': shop_sec,
                        'part_no': part_no,

                        'subnav':subnav
                  }

        if submitvalue=='Save':

            shop_sec= request.POST.get('shop_sec1')
            part_no= request.POST.get('part_no1')
            staff_no = request.POST.get('staff_no1')
            req = request.POST.get('req1')
            date = request.POST.get('date1')


            qty = request.POST.get('qty')
            dimension = request.POST.get('dimension')
            spe_val = request.POST.get('spe_val')
            obt_val = request.POST.get('obt_val')
            loco_fr = request.POST.get('loco_fr1')
            loco_to = request.POST.get('loco_to1')
            interc = request.POST.get('interc')
            waiver_no = request.POST.get('waiver_no')
            waiver_date = request.POST.get('waiver_date')
            non_conf_des = request.POST.get('non_conf_des')
            reason_for_non_conf = request.POST.get('reason_for_non_conf')
            corr_action_plan = request.POST.get('corr_action_plan')
            remarks_hod = request.POST.get('remarks_hod')
            remarks_cqam = request.POST.get('remarks_cqam')
            remarks_cde = request.POST.get('remarks_cde')
            request_no = request.POST.get('rand1')
            specification_no=request.POST.get('spec_no1')
            obj5 = M30.objects.filter(shop_sec=shop_sec, staff_no=staff_no, part_no=part_no, date=date).distinct()
            if len(obj5) == 0:
                M30.objects.create(shop_sec=str(shop_sec), staff_no=str(staff_no), part_no=str(part_no), specification_no=str(specification_no),  request_no=str(request_no), loco_fr=str(loco_fr), loco_to=str(loco_to), req=str(req), date=str(date), qty=str(qty), dimension=str(dimension), spe_val=str(spe_val), obt_val=str(obt_val), interc=str(interc), waiver_no=str(waiver_no), waiver_date=str(waiver_date), non_conf_des=str(non_conf_des), reason_for_non_conf=str(reason_for_non_conf),  corr_action_plan=str( corr_action_plan), remarks_hod=str(remarks_hod), remarks_cqam=str(remarks_cqam), remarks_cde=str(remarks_cde))
            else:
                M30.objects.filter(shop_sec=shop_sec, staff_no=staff_no, part_no=part_no, date=date).update(specification_no=str(specification_no),  request_no=str(request_no), loco_fr=str(loco_fr), loco_to=str(loco_to), req=str(req), qty=str(qty), dimension=str(dimension), spe_val=str(spe_val), obt_val=str(obt_val), interc=str(interc), waiver_no=str(waiver_no), waiver_date=str(waiver_date), non_conf_des=str(non_conf_des), reason_for_non_conf=str(reason_for_non_conf),  corr_action_plan=str( corr_action_plan), remarks_hod=str(remarks_hod), remarks_cqam=str(remarks_cqam), remarks_cde=str(remarks_cde))
            wo_no=M2Doc.objects.all().values('batch_no').distinct()
            messages.success(request, 'Successfully Updated!, Select new values to update')
    return render(request, "m30view.html", context)


def m30getpartno(request):
    if request.method == "GET" and request.is_ajax():

        shop_sec = request.GET.get('shop_sec')
        w1=Oprn.objects.filter(shop_sec=shop_sec).values('part_no').distinct()
        partno = list(w1)
        return JsonResponse(partno, safe = False)
    return JsonResponse({"success": False}, status=400)




def m30getstaffno(request):
    if request.method == "GET" and request.is_ajax():

        shop_sec = request.GET.get('shop_sec')

        staff = Shemp.objects.filter(shopsec=shop_sec).values('staff_no').exclude(staff_no__isnull=True).distinct()
        staff_no = list(staff)
        return JsonResponse(staff_no, safe=False)
    return JsonResponse({"success": False}, status=400)



@login_required
@role_required(urlpass='/mg15view/')
def mg15view(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    if "Superuser" in rolelist:
        tm=shop_section.objects.all()
        tmp=[]
        for on in tm:
            tmp.append(on.section_code)
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles':tmp
        }
    elif(len(rolelist)==1):
        for i in range(0, len(rolelist)):
            req = Shemp.objects.all().filter(shopsec=rolelist[i]).values('staff_no').exclude(staff_no__isnull=True).distinct()
            wo_nop =wo_nop | req



        context = {
            'sub':0,
            'subnav':subnav,
            'lenm' :len(rolelist),
            'wo_nop':wo_nop,
            'nav':nav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist
        }
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist
        }
    if request.method == "POST":
        submitvalue = request.POST.get('proceed')
        if submitvalue=='Proceed':
            rolelist=usermaster.role.split(", ")
            wo_nop = empmast.objects.none()
            shop_sec = request.POST.get('shop_sec')
            staff_no = request.POST.get('staff_no')
            date = request.POST.get('date')
            obj = Shemp.objects.filter(shopsec=shop_sec, staff_no=staff_no).values('name', 'desgn', 'cat', 'emp_type').distinct()
            obj1 = MG15.objects.filter(shop_sec=shop_sec, staff_no=staff_no, date=date).values('remarks', 'h1a', 'h2a', 'causeofab', 'ticket_no').distinct()
            tt = Shemp.objects.filter(shopsec=shop_sec, staff_no=staff_no).values('ticket_no').distinct()
            if len(obj1)== 0:
                obj1=range(0, 1)
            if "Superuser" in rolelist:
                  tm=shop_section.objects.all()
                  tmp=[]
                  for on in tm:
                      tmp.append(on.section_code)
                  context = {
                        'roles':tmp,
                        'lenm' :2,
                        'nav':nav,
                        'ip':get_client_ip(request),
                        'obj': obj,
                        'obj1': obj1,
                        'tt': tt,

                        'date' : date,


                        'sub': 1,

                        'staff_no': staff_no,
                        'shop_sec': shop_sec,

                        'subnav':subnav
                  }
            elif(len(rolelist)==1):
                  for i in range(0, len(rolelist)):
                      req = Shemp.objects.all().filter(shopsec=rolelist[i]).values('staff_no').exclude(staff_no__isnull=True).distinct()
                      wo_nop = wo_nop | req
                  context = {
                        'wo_nop':wo_nop,
                        'roles' :rolelist,
                        'usermaster':usermaster,
                        'lenm' :len(rolelist),
                        'nav': nav,
                        'ip': get_client_ip(request),
                        'obj': obj,
                        'obj1': obj1,
                        'tt': tt,

                        'sub': 1,
                        'date': date,

                        'staff_no': staff_no,
                        'shop_sec': shop_sec,

                        'subnav': subnav
                  }
            elif(len(rolelist)>1):
                  context = {
                        'lenm' :len(rolelist),
                        'nav':nav,
                        'ip':get_client_ip(request),
                        'usermaster':usermaster,
                        'roles' :rolelist,
                        'obj': obj,
                        'obj1': obj1,
                        'tt': tt,

                        'date': date,
                        'sub': 1,

                        'staff_no': staff_no,
                        'shop_sec': shop_sec,

                        'subnav':subnav
                  }

        if submitvalue=='Save':

                shop_sec= request.POST.get('shop_sec1')
                staff_no = request.POST.get('staff_no1')
                date = request.POST.get('date1')
                name= request.POST.get('name1')
                desgn = request.POST.get('desgn1')
                emp_type = request.POST.get('emp_type1')
                cat = request.POST.get('cat1')
                ticket_no = request.POST.get('ticket_no')
                h1a = request.POST.get('h1a')
                h2a = request.POST.get('h2a')
                remarks = request.POST.get('remarks')
                causeofab = request.POST.get('causeofab')

                obj2 = MG15.objects.filter(shop_sec=shop_sec, staff_no=staff_no, date=date, ).distinct()
                if len(obj2) == 0:
                    MG15.objects.create(date=str(date), shop_sec=str(shop_sec), staff_no=str(staff_no), cat=str(cat), name=str(name), desgn=str(desgn), emp_type=str(emp_type), remarks=str(remarks), causeofab=str(causeofab), ticket_no=str(ticket_no), h1a=str(h1a), h2a=str(h2a))
                else:
                    MG15.objects.filter(shop_sec=shop_sec, staff_no=staff_no, date=date).update(cat=str(cat), ticket_no=str(ticket_no), name=str(name), desgn=str(desgn), emp_type=str(emp_type), remarks=str(remarks), causeofab=str(causeofab), h1a=str(h1a), h2a=str(h2a))
                wo_no=MG15.objects.all().values('staff_no').distinct()
                messages.success(request, 'Successfully Done!, Select new values to proceed')
    return render(request, "mg15view.html", context)





def mg15getstaff(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        staff = Shemp.objects.filter(shopsec=shop_sec).values('staff_no').exclude(staff_no__isnull=True).distinct()
        staff_no = list(staff)
        return JsonResponse(staff_no, safe=False)
    return JsonResponse({"success": False}, status=400)



@login_required
@role_required(urlpass='/mg49view/')
def mg49view(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    if "Superuser" in rolelist:
        tm=Shemp.objects.all().values('shopsec').distinct()
        
        tmp=[]
        for on in tm:
            tmp.append(on['shopsec'])
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'ip':get_client_ip(request),
            'roles':tmp,
            'subnav':subnav,
        }
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):
            req = Shemp.objects.all().filter(shop_sec=rolelist[i]).values('staff_no').distinct()
            staff_no =staff_no | req
        context = {
            'sub':0,
            'subnav':subnav,
            'lenm' :len(rolelist),
            'staff_no':staff_no,
            'nav':nav,
            'ip':get_client_ip(request),
            'roles' :rolelist
        }
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles' :rolelist
        }
        
    if request.method == "POST":
        submitvalue = request.POST.get('proceed')
        if submitvalue=='Proceed':
            tm1=Part.objects.all().values('des').distinct()
            
            temp=Part.objects.all().values('shop_ut').distinct()
            tm2=Code.objects.filter(code__in=temp,cd_type='51').values('alpha_1').distinct()
            
            shop_sec = request.POST.get('shop_sec')
            updt_date = request.POST.get('updt_date')
            staff_no = request.POST.get('staff_no')

            obj = Shemp.objects.filter(shopsec=shop_sec,staff_no=staff_no).values('name','desgn').distinct().order_by('-yymm')[0];
            leng = 1
            if "Superuser" in rolelist:
                tm=Shemp.objects.all().values('shopsec').distinct()
                
                tmp=[]
                for on in tm:
                    tmp.append(on['shopsec'])
                context={
                    'tm1':tm1,
                    'tm2':tm2,
                    'obj': obj,
                    'len': leng,
                    'updt_date':updt_date,
                    'shop_sec': shop_sec,
                    'staff_no':staff_no,
                    'sub' : 1,
                    'lenm' :2,
                    'roles':tmp,
                    'nav':nav,
                    'ip':get_client_ip(request),  
                    'subnav':subnav,
                }
            elif(len(rolelist)==1):
                for i in range(0,len(rolelist)):
                    req = Shemp.objects.all().filter(shop_sec=rolelist[i]).values('staff_no').distinct()
                    staff_no =staff_no | req
                context = {
                    'tm1':tm1,
                    'tm2':tm2,
                    'obj': obj,
                    'len': leng,
                    'updt_date':updt_date,
                    'shop_sec': shop_sec,
                    'staff_no':staff_no,
                    'sub' : 1,
                    'nav':nav,
                    'ip':get_client_ip(request),  
                    'subnav':subnav,
                }
            elif(len(rolelist)>1):
                context = {
                    'tm1':tm1,
                    'tm2':tm2,
                    'obj': obj,
                    'len': leng,
                    'updt_date':updt_date,
                    'shop_sec': shop_sec,
                    'staff_no':staff_no,
                    'sub' : 1,
                    'nav':nav,
                    'ip':get_client_ip(request),  
                    'subnav':subnav,
                }
        
        if submitvalue=='submit':
            updt_date = request.POST.get('update')
            shop_sec= request.POST.get('shopsec')
            staff_no = request.POST.get('staffno')
            part_no = request.POST.get('part_no')
            matdes = request.POST.get('matdes')
            quantity = request.POST.get('quantity')
            weight = request.POST.get('weight')
            unit = request.POST.get('unit')
            now = datetime.datetime.now()
            user=request.user
            MG49.objects.create(shopsec=str(shop_sec), staff_no=str(staff_no), date=str(updt_date), part_no=str(part_no), desc=str(matdes), quan=str(quantity), weight=str(weight),login_id=str(user), last_modified=str(now), unit=str(unit))

            totindb=request.POST.get('totmebs')
            
            for tb in range(2,int(totindb)+1):
                part_no=request.POST.get('part_no'+str(tb))
                shop_sec= request.POST.get('shopsec')
                staff_no = request.POST.get('staffno')
                matdes=request.POST.get('matdes'+str(tb))
                quantity=request.POST.get('quan'+str(tb))
                weight=request.POST.get('weight'+str(tb))
                unit=request.POST.get('unit'+str(tb))
                now = datetime.datetime.now()
                user=request.user
                updt_date = request.POST.get('update')
                MG49.objects.create(shopsec=str(shop_sec), staff_no=str(staff_no), date=str(updt_date), part_no=str(part_no),desc=str(matdes), quan=str(quantity), weight=str(weight),login_id=str(user), last_modified=str(now), unit=str(unit))

        
    return render(request,"mg49view.html",context)

def mg49getstaff_no(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        staff_no = list(Shemp.objects.filter(shopsec=shop_sec).values('staff_no').exclude(staff_no__isnull=True).distinct())
        return JsonResponse(staff_no, safe = False)
    return JsonResponse({"success":False}, status=400)

def mg49getpart_no(request):
    
    if request.method == "GET" and request.is_ajax():
        matdes = request.GET.get('matdes')
        w1 = list(Part.objects.filter(des=matdes).values('partno').distinct())
        w2 = list(Part.objects.filter(des=matdes).values('shop_ut').distinct())
        ut=w2[0]['shop_ut']
        tm2=Code.objects.filter(code=ut,cd_type='51').values('alpha_1').distinct()
        wono = w1[0]['partno']
        if(tm2.count()==0):
            k='NULL'
        else:
            k=tm2[0]['alpha_1']


        cont ={
            "wono":wono,
            "ut":k,
        }
        
        return JsonResponse({"cont":cont}, safe = False)
    return JsonResponse({"success":False}, status=400)


def mg49report(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    tm1=Part.objects.all().values('partno').distinct()
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    staff_no = empmast.objects.none()
    if "Superuser" in rolelist:
        tm=Shemp.objects.all().values('shopsec').distinct()
        
        tmp=[]
    
        for on in tm:
            tmp.append(on['shopsec'])
        
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'ip':get_client_ip(request),
            'roles':tmp,
            'tm1':tm1,
            'subnav':subnav,
        }
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):
            req = Shemp.objects.all().filter(shop_sec=rolelist[i]).values('staff_no').distinct()
            staff_no =staff_no | req
        context = {
            'sub':0,
            'subnav':subnav,
            'lenm' :len(rolelist),
            'staff_no':staff_no,
            'nav':nav,
            'ip':get_client_ip(request),
            'roles' :rolelist
        }
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles' :rolelist
        }
    if request.method == "POST":
        submitvalue = request.POST.get('proceed')
        if submitvalue=='Proceed':
            
            
            shop_sec = request.POST.get('shop_sec')
            updt_date = request.POST.get('updt_date')
            staff_no = request.POST.get('staff_no')
            part_no=request.POST.get('part_no')
            obj = Shemp.objects.filter(shopsec=shop_sec,staff_no=staff_no).values('name','desgn').distinct().order_by('-yymm')[0];
            leng = 1
            alldata = MG49.objects.filter(shopsec=shop_sec,staff_no=staff_no,date=updt_date).values('shopsec','staff_no','date','part_no','quan','weight','login_id','unit','desc').distinct();
            
            leng2 = alldata.count()
            context = {
                        'tm1':tm1,
                        'alldata':alldata,
                        'tm1':tm1,
                        'obj': obj,
                        'len': leng,
                        'len2':leng2,
                        'updt_date':updt_date,
                        'shop_sec': shop_sec,
                        'staff_no':staff_no,
                        'sub' : 1,
                        'nav':nav,
                        'ip':get_client_ip(request),  
                        'subnav':subnav,
            }
    return render(request,"mg49report.html",context)

@login_required
@role_required(urlpass='/mg18view/')
def mg18view(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
   
    if "Superuser" in rolelist:
        
        form=list(MG18.objects.all().values('id').distinct().order_by('-id'))

        if(form==[]):
            sno=1
        else:
            sno=form[0]['id']
            sno=int(sno)+1

        context={
            'sub':0,
            'nav':nav,
            'ip':get_client_ip(request),
            'subnav':subnav,
            'sno':sno,
        }
    return render(request, "mg18view.html",context) 
  

def mg18InfoSave(request):
    context={}
    if request.method == "GET" and request.is_ajax():
            s_no=request.GET.get('s_no')
            date=request.GET.get('date')
            occupier_name=request.GET.get('occupier_name')
            occupier_addr=request.GET.get('occupier_addr')   
            empcode_Id=request.GET.get('empcode_Id') 
            industry_id=request.GET.get('industry_id') 
            address_acc=request.GET.get('address_acc')  
            branch_Id=request.GET.get('branch_Id')
            injured_name=request.GET.get('injured_name')
            injured_addr=request.GET.get('injured_addr')
            insur_no=request.GET.get('insur_no')
            gender1=request.GET.get('gender1')  
            agebirth_Id=request.GET.get('agebirth_Id')
            occupation_id=request.GET.get('occupation_id')
            date_accident=request.GET.get('date_accident')
            time_accident=request.GET.get('time_accident')
            time2=request.GET.get('time2')  
            cause_Id=request.GET.get('cause_Id')
            yn_id=request.GET.get('yn_id')
            machine_name=request.GET.get('machine_name')
            movmachpwr_Id=request.GET.get('movmachpwr_Id')
            injdoin_Id=request.GET.get('injdoin_Id')  
            injury_nature=request.GET.get('injury_nature')
            offwrk_Id=request.GET.get('offwrk_Id')
            doct_name=request.GET.get('doct_name')
            evident_name=request.GET.get('evident_name')
            c1=request.GET.get('c1')
            c2=request.GET.get('c2')
            c3=request.GET.get('c3')
            howaccident=request.GET.get('howaccident')
            injury_loc=request.GET.get('injury_loc')
            injretrn_Id=request.GET.get('injretrn_Id')
            datertn_Id=request.GET.get('datertn_Id')
            timertn_Id=request.GET.get('timertn_Id')
            yn1_id=request.GET.get('yn1_id')
            date_death=request.GET.get('date_death')
            Insur_lo=request.GET.get('Insur_lo')
            Insur_dis=request.GET.get('Insur_dis')
            distrct_Id=request.GET.get('distrct_Id')
            receipt_date=request.GET.get('receipt_date')
            accident_no=request.GET.get('accident_no')
            industry_no=request.GET.get('industry_no')
            causno=request.GET.get('causno')
            gender2=request.GET.get('gender2')
            otherpart=request.GET.get('otherpart')
            invest_date=request.GET.get('invest_date')
            invest_result=request.GET.get('invest_result')
            if c1=='true':
                c1='Yes'
            else:
                c1='No'

            if c2=='true':
                c2='Yes'
            else:
                c2='No'
            if c3=='true':
                c3='Yes'  
            else:
                c3='No'  
            cuser=request.user
            now = datetime.datetime.now()
            temp =MG18.objects.filter(s_no=s_no).distinct()
            if len(temp) == 0:
                obj=MG18.objects.create( s_no=str( s_no),date=str(date),login_id=str(cuser),name_occupier=str(occupier_name),address_occupier=str(occupier_addr),empcode=str(empcode_Id),
                nature_of_industry=str(industry_id),address_accident =str( address_acc),branch_at_accident=str(branch_Id),name_injured=str(injured_name),
                address_injured=str(injured_addr),insurance_no=str(insur_no),gender=str(gender1),age_last_birth=str(agebirth_Id),occupation_of_injured=str(occupation_id),
                accident_date=str(date_accident),accident_time=str(time_accident),hour_of_startwork=str(time2),cause=str(cause_Id),cause_by_machine=str(yn_id),
                machine_part=str(machine_name),mach_mov_state=str(movmachpwr_Id),injured_doing=str(injdoin_Id),injury_nature=str(injury_nature),
                injured_dayoff=str(offwrk_Id),doctor_name=str(doct_name),name_evid=str(evident_name),inj_under_drink_drug=str(c1),wilful_disobedience=str(c2),
                wilful_removal=str(c3),how_accident=str(howaccident),injury_location=str(injury_loc),inj_return_to_work=str(injretrn_Id),return_date=str(datertn_Id),
                return_time=str(timertn_Id),injured_died=str(yn1_id),date_of_death=str(date_death),insur_localoffice_name=str(Insur_lo),insur_dispensary_name=str(Insur_dis),
                district=str(distrct_Id),receipt_date=str(receipt_date),accident_no=str(accident_no),industry_no=str(industry_no),causation_no=str(causno),gender_1=str(gender2),
                particulars=str(otherpart),investigation_date =str(invest_date),investigation_result=str(invest_result),last_modified=now)

            else:
                MG18.objects.filter(s_no=s_no).update(s_no=str(s_no),date=str(date),login_id=str(cuser),name_occupier=str(occupier_name),address_occupier=str(occupier_addr),empcode=str(empcode_Id),
                nature_of_industry=str(industry_id),address_accident =str( address_acc),branch_at_accident=str(branch_Id),name_injured=str(injured_name),
                address_injured=str(injured_addr),insurance_no=str(insur_no),gender=str(gender1),age_last_birth=str(agebirth_Id),occupation_of_injured=str(occupation_id),
                accident_date=str(date_accident),accident_time=str(time_accident),hour_of_startwork=str(time2),cause=str(cause_Id),cause_by_machine=str(yn_id),
                machine_part=str(machine_name),mach_mov_state=str(movmachpwr_Id),injured_doing=str(injdoin_Id),injury_nature=str(injury_nature),
                injured_dayoff=str(offwrk_Id),doctor_name=str(doct_name),name_evid=str(evident_name),inj_under_drink_drug=str(c1),wilful_disobedience=str(c2),
                wilful_removal=str(c3),how_accident=str(howaccident),injury_location=str(injury_loc),inj_return_to_work=str(injretrn_Id),return_date=str(datertn_Id),
                return_time=str(timertn_Id),injured_died=str(yn1_id),date_of_death=str(date_death),insur_localoffice_name=str(Insur_lo),insur_dispensary_name=str(Insur_dis),
                district=str(distrct_Id),receipt_date=str(receipt_date),accident_no=str(accident_no),industry_no=str(industry_no),causation_no=str(causno),gender_1=str(gender2),
                particulars=str(otherpart),investigation_date =str(invest_date),investigation_result=str(invest_result),last_modified=now)

            return JsonResponse(context,safe=False)
    return JsonResponse({"success":False}, status=400)

def mg18GenerateReport(request, *args, **kwargs):
    s_no=request.GET.get('s_no')
    date=request.GET.get('date')
    occupier_name=request.GET.get('occupier_name')
    occupier_addr=request.GET.get('occupier_addr')   
    empcode_Id=request.GET.get('empcode_Id') 
    industry_id=request.GET.get('industry_id') 
    address_acc=request.GET.get('address_acc')  
    branch_Id=request.GET.get('branch_Id')
    injured_name=request.GET.get('injured_name')
    injured_addr=request.GET.get('injured_addr')
    insur_no=request.GET.get('insur_no')
    gender1=request.GET.get('gender1')  
    agebirth_Id=request.GET.get('agebirth_Id')  
    occupation_id=request.GET.get('occupation_id')
    date_accident=request.GET.get('date_accident')
    time_accident=request.GET.get('time_accident')
    time2=request.GET.get('time2')  
    cause_Id=request.GET.get('cause_Id')
    yn_id=request.GET.get('yn_id')
    machine_name=request.GET.get('machine_name')
    movmachpwr_Id=request.GET.get('movmachpwr_Id')
    injdoin_Id=request.GET.get('injdoin_Id')  
    injury_nature=request.GET.get('injury_nature')
    offwrk_Id=request.GET.get('offwrk_Id')
    doct_name=request.GET.get('doct_name')
    evident_name=request.GET.get('evident_name')
    c1=request.GET.get('c1')
    c2=request.GET.get('c2')
    c3=request.GET.get('c3')
    howaccident=request.GET.get('howaccident')
    injury_loc=request.GET.get('injury_loc')
    injretrn_Id=request.GET.get('injretrn_Id')
    datertn_Id=request.GET.get('datertn_Id')
    timertn_Id=request.GET.get('timertn_Id')
    yn1_id=request.GET.get('yn1_id')
    date_death=request.GET.get('date_death')
    Insur_lo=request.GET.get('Insur_lo')
    Insur_dis=request.GET.get('Insur_dis')
    distrct_Id=request.GET.get('distrct_Id')
    receipt_date=request.GET.get('receipt_date')
    accident_no=request.GET.get('accident_no')
    industry_no=request.GET.get('industry_no')
    causno=request.GET.get('causno')
    gender2=request.GET.get('gender2')
    otherpart=request.GET.get('otherpart')
    invest_date=request.GET.get('invest_date')
    invest_result=request.GET.get('invest_result') 
    if c1=='true':
        c1='Yes'
    else:
        c1='No'
    if c2=='true':
        c2='Yes'
    else:
        c2='No'
    if c3=='true':
        c3='Yes'
    else:
        c3='No'

    data = {
        's_no':s_no,
        'date':date,
        'occupier_name':occupier_name,
        'occupier_addr':occupier_addr,
        'empcode_Id':empcode_Id,
        'industry_id':industry_id,
        'address_acc':address_acc,
        'branch_Id':branch_Id,
        'injured_name':injured_name,
        'injured_addr':injured_addr,
        'insur_no':insur_no,
        'gender1': gender1,
        'agebirth_Id':agebirth_Id,
        'occupation_id':occupation_id,
        'date_accident':date_accident,
        'time_accident':time_accident, 
        'time2':time2,

        'cause_Id':cause_Id,
        'yn_id':yn_id,
        'machine_name':machine_name,
        'movmachpwr_Id':movmachpwr_Id,
        'injdoin_Id':injdoin_Id,
        'injury_nature':injury_nature,
        'offwrk_Id':offwrk_Id,
        'doct_name':doct_name,
        'evident_name':evident_name,
        'c1':c1,
        'c2':c2,
        'c3':c3,
        'howaccident':howaccident,
        'injury_loc': injury_loc,
        'injretrn_Id':injretrn_Id,
        'datertn_Id':datertn_Id,
        'timertn_Id':timertn_Id,
        'yn1_id':yn1_id, 
        'date_death':date_death,

        'Insur_lo':Insur_lo,
        'Insur_dis':Insur_dis,
        'distrct_Id':distrct_Id,
        'receipt_date':receipt_date,
        'accident_no':accident_no,
        'industry_no':industry_no,
        'causno':causno,
        'gender2':gender2,
        'otherpart':otherpart,
        'invest_date':invest_date,
        'invest_result': invest_result,
         
        }
    pdf = render_to_pdf('mg18report.html', data)
    return HttpResponse(pdf, content_type='application/pdf')

def mg18Details(request):
    if request.method == "GET" and request.is_ajax():  
        s_no = request.GET.get('s_no') 
        obj =list(MG18.objects.filter(s_no = s_no).values('date','name_occupier','address_occupier','empcode','nature_of_industry',
        'address_accident','branch_at_accident','name_injured','address_injured','insurance_no','gender','age_last_birth',
        'occupation_of_injured','accident_date','accident_time','hour_of_startwork','cause','cause_by_machine','machine_part',
        'mach_mov_state','injured_doing','injury_nature','injured_dayoff','doctor_name','name_evid','inj_under_drink_drug',
        'wilful_disobedience','wilful_removal','how_accident','injury_location','inj_return_to_work','return_date',
        'return_time','injured_died','date_of_death','insur_localoffice_name','insur_dispensary_name','district',
        'receipt_date','accident_no','industry_no','causation_no','gender_1','particulars','investigation_date',
        'investigation_result').distinct())
        return JsonResponse(obj,safe = False)
    return JsonResponse({"success":False}, status=400)    



@login_required
@role_required(urlpass='/m11view/')
def m11view(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    if "Superuser" in rolelist:
        tm=shop_section.objects.all()
        tmp=[]
        for on in tm:
            tmp.append(on.section_code)
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles':tmp
        }
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):
            w1 = Oprn.objects.filter(shop_sec=rolelist[i]).values('part_no').distinct()
            req = Batch.objects.filter(status='R').values('bo_no').exclude(bo_no__isnull=True).distinct()
            wo_no =wo_no | req
        context = {
            'sub':0,
            'len' :len(rolelist),
            'wo_no':wo_no,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles' :rolelist,
            'lent':0,
        }
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'len' :len(rolelist),
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles' :rolelist,
            'lent':0,
        }
    if request.method == "POST":
        
        submitvalue = request.POST.get('proceed')
        if submitvalue=='Proceed':
            from decimal import Decimal
            month = request.POST.get('monthdrop')
            shop_sec = request.POST.get('shop_sec')
            wo_no = request.POST.get('wo_no')
            staff_no = request.POST.get('staff_no')
            part_no = request.POST.get('part_no')
            tempcat=Shemp.objects.filter(staff_no=staff_no).values('cat','name').distinct()
            empname=tempcat[0]['name']
            tcat=tempcat[0]['cat']
            obj1 = M11.objects.filter(staff_no=staff_no,shopsec=shop_sec,month=month).values('id','month','cat','in1','out','in_date','out_date','shift','total_time','detail_no','idle_time').distinct()
            obj2='None'
            obj3='None'
            leng=0
            leng1=0
            rr='None'
            amt=0
            patotal=0
            a=0 
            b=0
            t=0
            if len(obj1):
                if obj1[0]['cat'] is not None:
                    t=obj1[0]['cat']
                else:
                    t=tempcat[0]['cat']
            else:
                t=tempcat[0]['cat']
            if t != 'None':
                obj2 = Rates.objects.filter(staff_no=staff_no).values('avg_rate').distinct()
                obj3 = M11.objects.filter(shopsec=shop_sec,staff_no=staff_no).values('month','cat').distinct()
                if len(obj3):
                    obj3 = M11.objects.filter(shopsec=shop_sec,staff_no=staff_no).values('month','cat')[0]

            for op in range(len(obj1)):
                patotal=obj1[op]['total_time']
                if patotal is not None and len(str(patotal)):
                    p=patotal.split(':')
                    a=a+Decimal(p[0])
                    b=b+Decimal(p[1])
                    if (b>=60):
                        a=a+1
                        b=b%60
                rr=str(a)+':'+str(b)    
            
            tmhr=rr
            if len(obj2):    
                avgrt=obj2[0]['avg_rate']
                if tmhr == 'None': 
                    tmhr=0
                    avgrt=0
                else:
                    tmhr1=tmhr.split(':')
                    tmhr=Decimal(tmhr1[0])+(Decimal(tmhr1[1])/60)                    
                amt=tmhr*avgrt
            leng = obj1.count()
            leng1 = obj2.count()
            leng=obj1.count()
            amt=round(amt,2)
            if "Superuser" in rolelist:
                tm=shop_section.objects.all()
                tmp=[]
                for on in tm:
                    tmp.append(on.section_code)
                context={
                    'sub':1,
                    'lenm' :2,
                    'nav':nav,
                    'subnav':subnav,
                    'ip':get_client_ip(request),
                    'roles':tmp,
                    'obj1': obj1,
                    'obj2':obj2,
                    'obj3':obj3,
                    'lent': leng,
                    'lent2': leng1,
                    'leng':leng,
                    'amt1': amt,
                    'shop_sec': shop_sec,
                    'wo_no': wo_no,
                    'staff_no':staff_no, 
                    'r1':rr,
                    'month': month,'tcat':tcat,'empname':empname,
                }
            elif(len(rolelist)==1):
                for i in range(0,len(rolelist)):
                    w1 = Oprn.objects.filter(shop_sec=rolelist[i]).values('part_no').distinct()
                    req = Batch.objects.filter(status='R').values('bo_no').exclude(bo_no__isnull=True).distinct()
                    wo_no =wo_no | req
                context = {
                    'sub':1,
                    'len' :len(rolelist),
                    'wo_no':wo_no,
                    'nav':nav,
                    'subnav':subnav,
                    'ip':get_client_ip(request),
                    'roles' :rolelist,
                    'lent':0,
                    'obj1': obj1,
                    'obj2':obj2,
                    'obj3':obj3,
                    'lent': leng,
                    'lent2': leng1,
                    'leng':leng,
                    'amt1': amt,
                    'shop_sec': shop_sec,
                    'wo_no': wo_no,
                    'staff_no':staff_no, 
                    'r1':rr,
                    'month': month,'tcat':tcat,'empname':empname,
                }
            elif(len(rolelist)>1):
                context = {
                    'sub':1,
                    'len' :len(rolelist),
                    'nav':nav,
                    'subnav':subnav,
                    'ip':get_client_ip(request),
                    'roles' :rolelist,
                    'lent':0,
                    'obj1': obj1,
                    'obj2':obj2,
                    'obj3':obj3,
                    'lent': leng,
                    'lent2': leng1,
                    'leng':leng,
                    'amt1': amt,
                    'shop_sec': shop_sec,
                    'wo_no': wo_no,
                    'staff_no':staff_no, 
                    'r1':rr,
                    'month': month,'tcat':tcat,'empname':empname,
                }   
        submitvalue = request.POST.get('PrintPDF')
        if submitvalue=='PrintPDF':
            from decimal import Decimal
            obj2='None'
            leng=0
            leng1=0
            rr='None'
            amt=0
            patotal=0
            a=0 
            b=0
            t=0
            month = request.POST.get('month')
            shop_sec = request.POST.get('shopsec')
            wo_no = request.POST.get('wo_no')
            staff_no = request.POST.get('staff_no')
            part_no = request.POST.get('part_no')
            tempcat=Shemp.objects.filter(staff_no=staff_no).values('cat','name').distinct()
            empname=tempcat[0]['name']
            tcat=tempcat[0]['cat']
            obj1 = M11.objects.filter(staff_no=staff_no,shopsec=shop_sec,month=month).values('id','month','cat','in1','out','in_date','out_date','shift','total_time','detail_no','idle_time').distinct()   
            obj2 = Rates.objects.filter(staff_no=staff_no).values('avg_rate').distinct()


            for op in range(len(obj1)):
                patotal=obj1[op]['total_time']
                if patotal is not None and len(str(patotal)):
                    p=patotal.split(':')
                    a=a+Decimal(p[0])
                    b=b+Decimal(p[1])
                    if (b>=60):
                        a=a+1
                        b=b%60

                rr=str(a)+':'+str(b)   
            tmhr=rr
            if len(obj2):    
                avgrt=obj2[0]['avg_rate']
                if tmhr == 'None': 
                    tmhr=0
                    avgrt=0
                else:
                    tmhr1=tmhr.split(':')
                    tmhr=Decimal(tmhr1[0])+(Decimal(tmhr1[1])/60)
                amt=tmhr*avgrt
            leng = obj1.count()
            leng1 = obj2.count()
            leng=obj1.count()
            amt=round(amt,2)
            context = {
                    
                    'obj1': obj1,
                    'shop_sec': shop_sec,
                    'staff_no':staff_no,
                    'wo_no': wo_no,
                    'r1':rr,
                    'amt1': amt,
                    'month': month,'tcat':tcat,'empname':empname,
            }  
                
            pdf = render_to_pdf('M11pdfc.html',context)
            return HttpResponse(pdf, content_type='application/pdf')
            
        if submitvalue=='Submit':
            leng=request.POST.get('len')
            shopsec= request.POST.get('shopsec')
            staff_no = request.POST.get('staff_no')
            inoutnum = request.POST.get("inoutnum")
            ename= request.POST.get('empname')
            scat=request.POST.get('tcat')
            
            for i in range(1, int(leng)+1):
                in_date = request.POST.get('in_date'+str(i))
                out_date = request.POST.get('out_date'+str(i))
                shift = request.POST.get('shift'+str(i))
                month = request.POST.get('month')
                in1 = request.POST.get('in1'+str(i))
                out = request.POST.get('out'+str(i))
                total_time = request.POST.get('total_time'+str(i))
                idle_time = request.POST.get('idle_time'+str(i))
                detail_no = request.POST.get('detail_no'+str(i))
                amt = request.POST.get('amt1'+str(i))

               
                sender_email_id = 'crisdlwproject@gmail.com'
                sender_email_id_password = 'cris@1234'

                if  month and in1 and out and idle_time and detail_no and total_time:
                    M11.objects.create(shopsec=shopsec,staff_no=staff_no,in1=str(in1),out=str(out),name=str(ename),cat=scat,month=str(month),total_time=str(total_time),in_date=str(in_date),out_date=str(out_date),shift=str(shift),idle_time=str(idle_time),detail_no=str(detail_no))
                   
                    messages.success(request, 'Data Saved Successfully!!')
                else:
                    messages.success(r598+equest, 'Please enter all values!!')
                    wo_no=Batch.objects.all().values('bo_no').distinct()
                    

    return render(request,"m11views.html",context)

def m11save(request):
    if request.method == 'GET' and request.is_ajax():
        shopsec= request.GET.get('shopsec')
        staff_no = request.GET.get('staff_no')
        ename= request.GET.get('ename')   
        scat=request.GET.get('tcat')
        
        in_date = request.GET.get('in_date')   
        out_date = request.GET.get('out_date')
        shift = request.GET.get('shift')
        month = request.GET.get('month')
        in1 = request.GET.get('in1')
        out = request.GET.get('out')
        total_time = request.GET.get('total_time')
        idle_time = request.GET.get('idle_time')
        detail_no = request.GET.get('detail_no')
        amt = request.GET.get('amt1')
        sender_email_id = 'crisdlwproject@gmail.com'
        sender_email_id_password = 'cris@1234'

        if  month and in1 and out and idle_time and detail_no and total_time:
            M11.objects.create(shopsec=shopsec,staff_no=staff_no,in1=str(in1),out=str(out),name=str(ename),cat=scat,month=str(month),total_time=str(total_time),in_date=str(in_date),out_date=str(out_date),shift=str(shift),idle_time=str(idle_time),detail_no=str(detail_no))
        
            emp_det=list(emp_details.objects.filter(shopsec=str(shopsec),card_details='M11').values('mobileno','email_id'))
            for x in range(len(emp_det)):

                sms(emp_det[x]['mobileno'],"Man idle card for Emp number "+ staff_no +" Name "+ ename +" Soap "+ shopsec +" has been generated for the Date "+ in_date +" Total idle time "+idle_time+" ")

                email1(sender_email_id,sender_email_id_password,emp_det[x]['email_id'],'Subject: MAN IDLE TIME CARD \n\n   Dear Sir,   Man idle card for Emp number '+ staff_no +' Name '+ ename +' Soap '+ shopsec +' has been generated for the Date '+ in_date +' Total idle time '+idle_time+' ')
            obj1=list(M11.objects.filter(staff_no=staff_no,shopsec=shopsec,month=month).values('id','month','in1','out','in_date','out_date','shift','total_time','detail_no','idle_time').order_by('in_date'))

            context={
            'obj1':obj1,
                }   
            return JsonResponse({'data':context}, safe = False)
        
    return JsonResponse({"success":False}, status = 400)
def email1(sender_email_id,sender_email_id_password,receiver_email_id,message):
    s = smtplib.SMTP('smtp.gmail.com', 587) 
    s.ehlo()
    s.starttls()
    s.login(sender_email_id,sender_email_id_password)  
    s.sendmail(sender_email_id,receiver_email_id, message) 
    s.quit()


def m11getwono(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        w1=Oprn.objects.filter(shop_sec=shop_sec).values('part_no').distinct()
        w2=Batch.objects.filter(status='R').values('bo_no').exclude(bo_no__isnull=True).distinct()
        wo_no = list(w2)                                             
        return JsonResponse(wo_no, safe = False)                    
    return JsonResponse({"success":False}, status=400)

def m11getstaff_no(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        staff_no=list(Shemp.objects.filter(shopsec=shop_sec).values('staff_no').distinct())
        return JsonResponse(staff_no, safe = False)
    return JsonResponse({"success":False}, status=400)


def m11getpart_no(request):
    if request.method == "GET" and request.is_ajax():
        
        wo_no = request.GET.get('wo_no')
        
        part_no = list(Batch.objects.filter(bo_no=wo_no).values('part_no').distinct())
        return JsonResponse(part_no, safe = False)
    return JsonResponse({"success":False}, status=400)

def m11indateLink(request):
    if request.method == 'GET' and request.is_ajax():  
        in_date= request.GET.get('in_date')
        staff_no= request.GET.get('staff_no')
        shop_sec= request.GET.get('shop_sec')
        data_list =list(M21DOCNEW1.objects.filter(shop_sec=shop_sec,staff_no=staff_no,date=in_date).values('in1','date','out','outdate','total_time').distinct())
        if(len(data_list)>0):
            return JsonResponse(data_list,safe = False)                         
    return JsonResponse({"success":False},status=400)

def m11indateCheck(request):
    if request.method == 'GET' and request.is_ajax():  
        in_date= request.GET.get('in_date')
        staff_no= request.GET.get('staff_no')
        shop_sec= request.GET.get('shop_sec')
     
        data_list =list(M11.objects.filter(shopsec=shop_sec,staff_no=staff_no,in_date=in_date).values('in1','in_date','out','out_date','total_time').distinct())
        if(len(data_list)>0):
            return JsonResponse(data_list,safe = False)                         
    return JsonResponse({"success":False},status=400)

def indateqry1(request):
    if request.method == 'GET' and request.is_ajax():  
        date= request.GET.get('in_date')
        staff_no= request.GET.get('staff_no')
        shop_sec= request.GET.get('shop_sec')
        data_list =list(M21DOCNEW1.objects.filter(shop_sec=shop_sec,staff_no=staff_no,date=date).values('in1','date','out','outdate','total_time').distinct())
        if(len(data_list)>0):
            return JsonResponse(data_list,safe = False)                         
    return JsonResponse({"success":False},status=400)

def indateCheck(request):
    if request.method == 'GET' and request.is_ajax():  
        in_date= request.GET.get('in_date')
        staff_no= request.GET.get('staff_no')
        shop_sec= request.GET.get('shop_sec')
        data_list =list(M11.objects.filter(shopsec=shop_sec,staff_no=staff_no,in_date=in_date).values('in1','in_date','out','out_date','total_time').distinct())
        if(len(data_list)>0):
            return JsonResponse(data_list,safe = False)                         
    return JsonResponse({"success":False},status=400)

def m11repor(request):
    if request.method=="GET" and request.is_ajax():
        month = request.GET.get('month')
        staff = request.GET.get('staff')
        shop = request.GET.get('shop')
        myval=list(M11.objects.filter(staff_no=staff,shopsec=shop,month=month).values('month','in1','out','in_date','out_date','shift','total_time','detail_no','idle_time').order_by('in_date'))
        return JsonResponse(myval, safe = False)
    return JsonResponse({"success":False}, status=400)
def m11editdata(request):
    if request.method == "GET" and request.is_ajax():
        sno = request.GET.get('id')
        obj1=list(M11.objects.filter(id=sno).values('id','month','in1','out','in_date','out_date','shift','total_time','detail_no','idle_time').distinct())
        
        context={
            'obj1':obj1,             
        }         
        return JsonResponse({'data':context}, safe = False)
    return JsonResponse({"success":False}, status=400)

def m11updatedata(request):
    if request.method == "GET" and request.is_ajax():
        id = request.GET.get('id') 
        shopsec = request.GET.get('shopsec')
        scat=request.GET.get('scat')
        ename= request.GET.get('empname')
        staff_no = request.GET.get('staff_no')
        month = request.GET.get('month')
        shift = request.GET.get('shift')
        in_date = request.GET.get('in_date')         
        in1 = request.GET.get('in1')                      
        out_date = request.GET.get('out_date')               
        out = request.GET.get('out')
        total_time = request.GET.get('total_time')
        detail_no = request.GET.get('detail_no') 
        idle_time = request.GET.get('idle_time')
        M11.objects.filter(id=id).update(shopsec=shopsec,staff_no=staff_no,in1=str(in1),out=str(out),name=str(ename),cat=scat,month=str(month),total_time=str(total_time),in_date=str(in_date),out_date=str(out_date),shift=str(shift),detail_no=str(detail_no),idle_time=str(idle_time))
         
        obj1=list(M11.objects.filter(staff_no=staff_no,shopsec=shopsec,month=month).values('id','month','in1','out','in_date','out_date','shift','total_time','detail_no','idle_time').order_by('in_date'))

              
        context={
            'obj1':obj1,
            
        }       
        return JsonResponse({'data':context}, safe = False)
    return JsonResponse({"success":False}, status=400)

@login_required
@role_required(urlpass='/m11report/')
def m11report(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    if "Superuser" in rolelist:
        tm=shop_section.objects.all()
        tmp=[]
        for on in tm:
            tmp.append(on.section_code)
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles':tmp
        }
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):
            w1 = Oprn.objects.filter(shop_sec=rolelist[i]).values('part_no').distinct()
            req = Batch.objects.filter(part_no__in=w1).values('bo_no').distinct()
            wo_no =wo_no | req
        context = {
            'sub':0,
            'len' :len(rolelist),
            'wo_no':wo_no,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles' :rolelist,
            'lent':0,
        }
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'len' :len(rolelist),
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles' :rolelist,
            'lent':0,
        }
    if request.method == "POST":
        
        submitvalue = request.POST.get('proceed')
        if submitvalue=='Proceed':
            from decimal import Decimal
            month = request.POST.get('monthdrop')
            shop_sec = request.POST.get('shop_sec')
            wo_no = request.POST.get('wo_no')
            staff_no = request.POST.get('staff_no')
            part_no = request.POST.get('part_no')
            tempcat=Shemp.objects.filter(staff_no=staff_no).values('cat','name').distinct()
            empname=tempcat[0]['name']
            tcat=tempcat[0]['cat']
            obj1 = M11.objects.filter(staff_no=staff_no,shopsec=shop_sec,month=month).values('id','month','cat','in1','out','in_date','out_date','shift','total_time','detail_no','idle_time').distinct()
            obj2='None'
            obj3='None'
            leng=0
            leng1=0
            rr='None'
            amt=0
            patotal=0
            a=0 
            b=0
            t=0
            if len(obj1):
                if obj1[0]['cat'] is not None:
                    t=obj1[0]['cat']
                else:
                    t=tempcat[0]['cat']
            else:
                t=tempcat[0]['cat']
            if t != 'None':
                obj2 = Rates.objects.filter(staff_no=staff_no).values('avg_rate').distinct()
                obj3 = M11.objects.filter(shopsec=shop_sec,staff_no=staff_no).values('month','cat')[0]


            for op in range(len(obj1)):
                patotal=obj1[op]['total_time']
                if patotal is not None and len(str(patotal)):
                    p=patotal.split(':')
                    a=a+Decimal(p[0])
                    b=b+Decimal(p[1])
                    if (b>=60):
                        a=a+1
                        b=b%60

                rr=str(a)+':'+str(b)    
            
        
            tmhr=rr
            if len(obj2):    
                avgrt=obj2[0]['avg_rate']
                if tmhr == 'None': 
                    tmhr=0
                    avgrt=0
                else:
                    tmhr1=tmhr.split(':')
                    tmhr=Decimal(tmhr1[0])+(Decimal(tmhr1[1])/60)
                    
            
                amt=tmhr*avgrt
            leng = obj1.count()
            leng1 = obj2.count()
            leng=obj1.count()
            amt=round(amt,2)
            if "Superuser" in rolelist:
                tm=shop_section.objects.all()
                tmp=[]
                for on in tm:
                    tmp.append(on.section_code)
                context={
                    'sub':1,
                    'lenm' :2,
                    'nav':nav,
                    'subnav':subnav,
                    'ip':get_client_ip(request),
                    'roles':tmp,
                    'obj1': obj1,
                    'obj2':obj2,
                    'obj3':obj3,
                    'lent': leng,
                    'lent2': leng1,
                    'leng':leng,
                    'amt1': amt,
                    'shop_sec': shop_sec,
                    'wo_no': wo_no,
                    'staff_no':staff_no, 
                    'r1':rr,
                    'month': month,'tcat':tcat,'empname':empname,
                }
            elif(len(rolelist)==1):
                for i in range(0,len(rolelist)):
                    w1 = Oprn.objects.filter(shop_sec=rolelist[i]).values('part_no').distinct()
                    req = Batch.objects.filter(part_no__in=w1).values('bo_no').distinct()
                    wo_no =wo_no | req
                context = {
                    'sub':1,
                    'len' :len(rolelist),
                    'wo_no':wo_no,
                    'nav':nav,
                    'subnav':subnav,
                    'ip':get_client_ip(request),
                    'roles' :rolelist,
                    'lent':0,
                    'obj1': obj1,
                    'obj2':obj2,
                    'obj3':obj3,
                    'lent': leng,
                    'lent2': leng1,
                    'leng':leng,
                    'amt1': amt,
                    'shop_sec': shop_sec,
                    'wo_no': wo_no,
                    'staff_no':staff_no, 
                    'r1':rr,
                    'month': month,'tcat':tcat,'empname':empname,
                }
            elif(len(rolelist)>1):
                context = {
                    'sub':1,
                    'len' :len(rolelist),
                    'nav':nav,
                    'subnav':subnav,
                    'ip':get_client_ip(request),
                    'roles' :rolelist,
                    'lent':0,
                    'obj1': obj1,
                    'obj2':obj2,
                    'obj3':obj3,
                    'lent': leng,
                    'lent2': leng1,
                    'leng':leng,
                    'amt1': amt,
                    'shop_sec': shop_sec,
                    'wo_no': wo_no,
                    'staff_no':staff_no, 
                    'r1':rr,
                    'month': month,'tcat':tcat,'empname':empname,
                }
        if submitvalue=='PrintPDF':
            from decimal import Decimal
            obj2='None'
            leng=0
            leng1=0
            rr='None'
            amt=0
            patotal=0
            a=0 
            b=0
            t=0
            month = request.POST.get('month')
            shop_sec = request.POST.get('shopsec')
            wo_no = request.POST.get('wo_no')
            staff_no = request.POST.get('staff_no')
            part_no = request.POST.get('part_no')
            tempcat=Shemp.objects.filter(staff_no=staff_no).values('cat','name').distinct()
            empname=tempcat[0]['name']
            tcat=tempcat[0]['cat']
            obj1 = M11.objects.filter(staff_no=staff_no,shopsec=shop_sec,month=month).values('id','month','cat','in1','out','in_date','out_date','shift','total_time','detail_no','idle_time').distinct()   
            obj2 = Rates.objects.filter(staff_no=staff_no).values('avg_rate').distinct()


            for op in range(len(obj1)):
                patotal=obj1[op]['total_time']
                if patotal is not None and len(str(patotal)):
                    p=patotal.split(':')
                    a=a+Decimal(p[0])
                    b=b+Decimal(p[1])
                    if (b>=60):
                        a=a+1
                        b=b%60

                rr=str(a)+':'+str(b)    

            tmhr=rr
            if len(obj2):    
                avgrt=obj2[0]['avg_rate']
                if tmhr == 'None': 
                    tmhr=0
                    avgrt=0
                else:
                    tmhr1=tmhr.split(':')
                    tmhr=Decimal(tmhr1[0])+(Decimal(tmhr1[1])/60)
                    
            
                amt=tmhr*avgrt
            leng = obj1.count()
            leng1 = obj2.count()
            leng=obj1.count()
            amt=round(amt,2)
            context = {
                    
                    'obj1': obj1,
                    'shop_sec': shop_sec,
                    'staff_no':staff_no,
                    'wo_no': wo_no,
                    'r1':rr,
                    'amt1': amt,
                    'month': month,'tcat':tcat,'empname':empname,
            }  
                
            pdf = render_to_pdf('M11pdfc.html',context)
            return HttpResponse(pdf, content_type='application/pdf')

    return render(request,"m11report.html",context)  
@login_required
@role_required(urlpass='/mg36view/')
def mg36view(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    if "Superuser" in rolelist:
        tm=shop_section.objects.all()
        tmp=[]
        for on in tm:
            tmp.append(on.section_code)
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles':tmp
        }
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):
            req = M5SHEMP.objects.all().filter(shopsec=rolelist[i]).values('staff_no').distinct()
            staff_no =staff_no | req
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'staff_no':staff_no,
            'nav':nav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist,
            'subnav':subnav,
        }
        
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'nav':nav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist,
            'subnav':subnav,
        }
    if request.method == "POST":
        
        submitvalue = request.POST.get('proceed')
        if submitvalue=='Proceed':
            
            shop_sec = request.POST.get('shop_sec')
            staff_no = request.POST.get('staff_no')
            obj = Shemp.objects.filter(shopsec=shop_sec,staff_no=staff_no).values('name','desgn').distinct()
            obj1 = MG36.objects.filter(shop_sec=shop_sec,staff_no=staff_no).values('shop_arr','shop_dept','time_arr','time_dept','hosp_arr','hosp_dept','dept','office','date','med_officer','resumed_time','resumed_date','date_app')
            noprint=0
            leng = obj.count()
            leng1 = obj1.count()
            if len(obj1) == 0:
                noprint=1
            
            context = {
                        'obj': obj,
                        'obj1': obj1,
                        'len': leng,
                        'len1': leng1,
                        'shop_sec': shop_sec,
                        'ran':range(1,2),
                        'staff_no': staff_no,
                        'sub' : 1,
                        'noprint':noprint,
                        'nav':nav,
                        'ip':get_client_ip(request),  
                        'subnav':subnav,
            }
            if "Superuser" in rolelist:
                tm=shop_section.objects.all()
                tmp=[]
                for on in tm:
                    tmp.append(on.section_code)
                context={
                    'sub':0,
                    'lenm' :2,
                    'nav':nav,
                    'subnav':subnav,
                    'ip':get_client_ip(request),
                    'roles':tmp,
                    'obj': obj,
                    'obj1': obj1,
                    'len': leng,
                    'len1': leng1,
                    'shop_sec': shop_sec,
                    'ran':range(1,2),
                    'staff_no': staff_no,
                    'noprint':noprint,
                    'sub' : 1,
                    'nav':nav,
                    'ip':get_client_ip(request),  
                    'subnav':subnav,
                }
            elif(len(rolelist)==1):
                for i in range(0,len(rolelist)):
                    req = M5SHEMP.objects.all().filter(shopsec=rolelist[i]).values('staff_no').distinct()
                    staff_no =staff_no | req
                context = {
                    'sub':0,
                    'lenm' :len(rolelist),
                    'staff_no':staff_no,
                    'nav':nav,
                    'ip':get_client_ip(request),
                    'usermaster':usermaster,
                    'roles' :rolelist,
                    'subnav':subnav,
                    'obj': obj,
                    'obj1': obj1,
                    'len': leng,
                    'len1': leng1,
                    'noprint':noprint,
                    'shop_sec': shop_sec,
                    'ran':range(1,2),
                    'staff_no': staff_no,
                    'sub' : 1,
                    'nav':nav,
                    'ip':get_client_ip(request),  
                    'subnav':subnav,
                }
        
            elif(len(rolelist)>1):
                context = {
                    'sub':0,
                    'lenm' :len(rolelist),
                    'nav':nav,
                    'ip':get_client_ip(request),
                    'usermaster':usermaster,
                    'roles' :rolelist,
                    'subnav':subnav,
                    'obj': obj,
                    'obj1': obj1,
                    'len': leng,
                    'len1': leng1,
                    'shop_sec': shop_sec,
                    'ran':range(1,2),
                    'staff_no': staff_no,
                    'noprint':noprint,
                    'sub' : 1,
                    'nav':nav,
                    'ip':get_client_ip(request),  
                    'subnav':subnav,
                }
            
        if submitvalue =='Submit':
                
                leng=request.POST.get('len')
                now = datetime.datetime.now()
                shop_sec = request.POST.get('shop_sec')
                staff_no = request.POST.get('staff_no')
                shop_arr = request.POST.get('shop_arr')
                shop_dept = request.POST.get('shop_dept')
                time_arr = request.POST.get('time_arr')
                time_dept = request.POST.get('time_dept')
                hosp_arr = request.POST.get('hosp_arr')
                hosp_dept = request.POST.get('hosp_dept')
                dept = request.POST.get('dept')
                office = request.POST.get('office')
                med_officer = request.POST.get('med_officer')
                date = request.POST.get('date')
                resumed_time = request.POST.get('resumed_time')
                resumed_date = request.POST.get('resumed_date')
                date_app = request.POST.get('date_app')

                mg36obj = MG36.objects.filter(shop_sec=shop_sec,staff_no=staff_no).distinct()
                if len(mg36obj) == 0:
                    
                    MG36.objects.create(login_id=request.user,shop_sec=str(shop_sec),staff_no=str(staff_no),shop_arr=str(shop_arr),shop_dept=str(shop_dept),
                    time_arr=str(time_arr),time_dept=str(time_dept),hosp_arr=str(hosp_arr),hosp_dept=str(hosp_dept),dept=str(dept),office=str(office),med_officer=str(med_officer),
                    date=str(date),date_app=str(date_app),resumed_time=str(resumed_time),resumed_date=str(resumed_date),last_modified=str(now))

                else:
                    MG36.objects.filter(shop_sec=shop_sec,staff_no=staff_no).update(shop_arr=str(shop_arr),shop_dept=str(shop_dept),
                    time_arr=str(time_arr),time_dept=str(time_dept),hosp_arr=str(hosp_arr),hosp_dept=str(hosp_dept),dept=str(dept),office=str(office),med_officer=str(med_officer),
                    date=str(date),date_app=str(date_app),resumed_time=str(resumed_time),resumed_date=str(resumed_date),last_modified=str(now))

                staff_no=MG36.objects.all().values('staff_no').distinct()

    return render(request,"mg36view.html",context)


def mg36getempno(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        staff_no=list(SHEMP.objects.filter(shopsec=shop_sec).values('staff_no').distinct())
        return JsonResponse(staff_no, safe = False)
    return JsonResponse({"success":False}, status=400)

@login_required
@role_required(urlpass='/m9view/')
def m9view(request):
    from .models import m9
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    if "Superuser" in rolelist:
        tm=shop_section.objects.all()
        tmp=[]
        for on in tm:
            tmp.append(on.section_code)
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles':tmp
        }
    if request.method == "POST":
        
        submitvalue = request.POST.get('proceed')
        if submitvalue=='Proceed':
            shop_sec = request.POST.get('shop_sec')
            wo_no = request.POST.get('wo_no')
            part_no = request.POST.get('part_nop')
            op_no=request.POST.get('op_no')
            dt=date.today
            context = {
                        'date':dt,
                        'shop_sec': shop_sec,
                        'wo_no': wo_no,
                        'part_no': part_no,
                        'op_no':op_no,
                        'sub' : 1,
                        'nav':nav,
                        'ip':get_client_ip(request),  
                        'subnav':subnav,
            }

       


    
    return render(request,"m9view.html",context)



def m9getpart_no(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        
        part_no = list(Oprn.objects.filter(shop_sec = shop_sec,part_no__isnull=False).values('part_no').distinct())
        return JsonResponse(part_no, safe = False)
    return JsonResponse({"success":False}, status=400)




def m9getopno(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        part_no = request.GET.get('part_nop')
        op_no = list(Oprn.objects.filter(shop_sec = shop_sec,part_no=part_no).values('opn').distinct())
        return JsonResponse(op_no, safe = False)
    return JsonResponse({"success":False}, status=400)


def m9getwono(request):
    if request.method == "GET" and request.is_ajax():
        wo_no = list(Batch.objects.filter(bo_no__isnull=False).values('bo_no').distinct())
        
        return JsonResponse(wo_no, safe = False)
    return JsonResponse({"success":False}, status=400)




@login_required
@role_required(urlpass='/MG33view/')
def exam_detail(request):
    cuser=request.user
    usermaster=user_master.objects.filter(emp_id=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    context={
            'totindb':0,
            'nav':nav,
            'ip':get_client_ip(request),
            'subnav':subnav,
        }
    if request.method=="POST":
        bval=request.POST.get('btn')
        if bval=='View':
            ecode=request.POST.get('ecode')
            ex=exam_master.objects.all().order_by('id')
            leng=len(ex)
            context={
                'sub':1,
                'obj':ex,
                'totindb':0,
                'leng':leng,
                'nav':nav,
            'ip':get_client_ip(request),
            'subnav':subnav,
            }
        if bval=='Save':
            tot=request.POST.get('total')
            if tot=='':
                tot=0
            else:
                tot=int(tot)+1
                for i in range(1,int(tot)):
                    if (request.POST.get("ecode"+str(i))):
                        ecode=request.POST.get("ecode"+str(i))
                        etype=request.POST.get("etype"+str(i))
                        prctd=request.POST.get("practical"+str(i))
                        prcmarks=request.POST.get("pracmax"+str(i))
                        orald=request.POST.get("oral"+str(i))
                        oralmarks=request.POST.get("orlmax"+str(i))
                        edate=request.POST.get("edate"+str(i))
                        department =request.POST.get("department"+str(i))
                        designation=request.POST.get("designation"+str(i))
                        exam_master.objects.create(designation=designation,department=department,exam_code=ecode,exam_type=etype,exam_date=edate,prac_desc=prctd,prac_max=prcmarks,oral_desc=orald,oral_max=oralmarks)
            ex1=request.POST.get('length')
            for j in range(1,len(ex1)+1):
                if (request.POST.get("code"+str(j))):
                    ecode=request.POST.get("code"+str(j))
                    etype=request.POST.get("type"+str(j))
                    prctd=request.POST.get("prc"+str(j))
                    prcmrk=request.POST.get("pmax"+str(j))
                    orald=request.POST.get("orl"+str(j))
                    orlmrk=request.POST.get("omax"+str(j))
                    edt=request.POST.get("date"+str(j))
                    exam_master.objects.filter(exam_code=ecode).update(exam_type=etype,prac_desc=prctd,prac_max=prcmrk,oral_desc=orald,oral_max=orlmrk,exam_date=edt)
            messages.success(request,'Successfully Saved!!')
    return render(request,"examdetail.html",context)


@login_required
@role_required(urlpass='/MG33view/')
def view_exam_data(request):
    cuser=request.user
    usermaster=user_master.objects.filter(emp_id=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    ex=MG33new.objects.all().order_by('id')
    context={
            'totindb':0,
            'nav':nav,
            'ip':get_client_ip(request),
            'subnav':subnav,
            'obj':ex,
        }
    if request.method=="POST":
        bval=request.POST.get('btn')
        if bval=='View Exam Detail':
            ecode=request.POST.get('ecode')
            ex=MG33new.objects.all().order_by('id')
            leng=len(ex)
            context={
                'sub':1,
                'obj':ex,
                'totindb':0,
                'leng':leng,
                'nav':nav,
            'ip':get_client_ip(request),
            'subnav':subnav,
            }
        if bval=='Save':
            tot=request.POST.get('total')
            if tot=='':
                tot=0
            else:
                tot=int(tot)+1
                for i in range(1,int(tot)):
                    if (request.POST.get("ecode"+str(i))):
                        ecode=request.POST.get("ecode"+str(i))
                        etype=request.POST.get("etype"+str(i))
                        prctd=request.POST.get("practical"+str(i))
                        prcmarks=request.POST.get("pracmax"+str(i))
                        orald=request.POST.get("oral"+str(i))
                        oralmarks=request.POST.get("orlmax"+str(i))
                        edate=request.POST.get("edate"+str(i))
                        exam_master.objects.create(exam_code=ecode,exam_type=etype,exam_date=edate,prac_desc=prctd,prac_max=prcmarks,oral_desc=orald,oral_max=oralmarks)
            ex1=request.POST.get('length')
            for j in range(1,len(ex1)+1):
                if (request.POST.get("code"+str(j))):
                    ecode=request.POST.get("code"+str(j))
                    etype=request.POST.get("type"+str(j))
                    prctd=request.POST.get("prc"+str(j))
                    prcmrk=request.POST.get("pmax"+str(j))
                    orald=request.POST.get("orl"+str(j))
                    orlmrk=request.POST.get("omax"+str(j))
                    edt=request.POST.get("date"+str(j))
                    exam_master.objects.filter(exam_code=ecode).update(exam_type=etype,prac_desc=prctd,prac_max=prcmrk,oral_desc=orald,oral_max=orlmrk,exam_date=edt)
            messages.success(request,'Successfully Saved!!')
    return render(request,"mg33viewdata.html",context)




def mg33report(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    stfno=set()
    ex=MG33new.objects.all().values('staff_no')
    for i in ex:
        if i['staff_no'] is not None:
            stfno.add(i['staff_no'])
    if "Superuser" in rolelist:
        tm=shop_section.objects.all()
        tmp=[]
        for on in tm:
            tmp.append(on.section_code)
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles':tmp,
            'obj':stfno,
        }
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):
            w1 = empmast.objects.filter(shop_sec=rolelist[i]).values('empno').distinct()
            req = M2Doc.objects.filter(part_no__in=w1).values('batch_no').distinct()
            wo_nop = wo_nop | req

        context = {
            'sub':0,
            'subnav':subnav,
            'lenm' :len(rolelist),
            'wo_nop':wo_nop,
            'nav':nav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist,
            'lvdate':"yyyy-mm-dd",
        }
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist,
            'lvdate':"yyyy-mm-dd",
        }
    if request.method=="POST":
        bval=request.POST.get('proceed')
        if bval=='Proceed':
            
            stfno=set()
            

            
            ex=MG33new.objects.all().values('staff_no')
            for i in ex:
                if i['staff_no'] is not None:
                    stfno.add(i['staff_no'])
            shpsec = request.POST.get('shop_sec')
            staffno=request.POST.get('staff_no')
            update=request.POST.get('updt_date')
            ex = MG33new.objects.filter(shop_sec=shpsec,staff_no=staffno,updt_date=update).all()
            if ex:
                pscore=ex[0].prac_score
                oscore=ex[0].oral_score
                result=ex[0].result
                trdadmin=ex[0].trade_test_admin
                worker=ex[0].name
                secsup=ex[0].sec_sup
                trdoff=ex[0].trade_test_officer
                excode=set()
                j=0
                for i in range(len(ex)):
                    excode.add(ex[i].exam_code)
                for a in excode:
                    obj1=exam_master.objects.filter(exam_code=a)
            
                
                if "Superuser" in rolelist:
                    tm=shop_section.objects.all()
                    tmp=[]
                    for on in tm:
                        tmp.append(on.section_code)
                    context={
                        'sub':1,
                        'lenm' :2,
                        'nav':nav,
                        'subnav':subnav,
                        'ip':get_client_ip(request),
                        'roles':tmp,
                        'shopsec':shpsec,
                        'obj':stfno,
                        'obj2':ex,
                        'obj1':obj1,
                        'pscore':pscore,'oscore':oscore,'result':result,
                        'trdadmin':trdadmin,'worker':worker,'trdoff':trdoff,'secsup':secsup,
                    }
                elif(len(rolelist)==1):
                    for i in range(0,len(rolelist)):
                        w1 = empmast.objects.filter(role__isnull=True,dept_desc='MECHANICAL').values('empname').distinct
                    context = {
                        'sub':1,
                        'subnav':subnav,
                        'lenm' :len(rolelist),
                        'wo_nop':wo_nop,
                        'nav':nav,
                        'ip':get_client_ip(request),
                        'usermaster':usermaster,
                        'roles' :rolelist,
                        'shopsec':shpsec,
                        'obj':stfno,
                        'obj2':ex,
                        'obj1':obj1,
                        'pscore':pscore,'oscore':oscore,'result':result,
                        'trdadmin':trdadmin,'worker':worker,'trdoff':trdoff,'secsup':secsup,
                    }
                elif(len(rolelist)>1):
                    context = {
                        'sub':1,
                        'lenm' :len(rolelist),
                        'nav':nav,
                        'subnav':subnav,
                        'ip':get_client_ip(request),
                        'usermaster':usermaster,
                        'roles' :rolelist,
                        'shopsec':shpsec,
                        'obj':stfno,
                        'obj2':ex,
                        'obj1':obj1,
                        'pscore':pscore,'oscore':oscore,'result':result,
                        'trdadmin':trdadmin,'worker':worker,'trdoff':trdoff,'secsup':secsup,
                    }
            else:
                messages.error(request,"Data Not found!")         
        
    return render(request,"mg33report.html",context)




def m3a(request):
    return render(request,"m3a.html")

def performaA(request):
    return render(request,"performaA.html")


@login_required
@role_required(urlpass='/axlemachining_section/')
def axlemachining_section(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    dd3=[]
    obj2=list(AxleMachining.objects.all().filter(dispatch_status=False).values('sno','bo_no','pt_no','axle_no','dateaxle','bo_qty','bo_date','loco_type','date','axle_no','axlep_no','axle_make','axle_heatcaseno','in_qty','out_qty','dispatch_to').order_by('sno'))
    obj3=list(AxleMachining.objects.all().filter(dispatch_status=False).values('dateaxle','in_qty','out_qty').order_by('sno'))
    ll=len(obj3)
    for i in range(0,ll):
        dd=obj3[i]['dateaxle']
        indate=obj3[i]['in_qty']
        outdate=obj3[i]['out_qty']
        if dd!=None :
            s = dd.split('-')
            month1 = s[1]
            day1 = s[2]
            year1 = s[0]
            dd2 =  day1 + "-" + month1 + "-" + year1
            obj2[i].update({'dateaxle':dd2})
        else :
            obj2[i].update({'dateaxle':None})
        if indate!=None :
            s1 = indate.split('-')
            newmonth1 = s1[1]
            newday1 = s1[2]
            newyear1 = s1[0]
            newindate =  newday1 + "-" + newmonth1 + "-" + newyear1
            obj2[i].update({'in_qty':newindate})
        else :
            obj2[i].update({'in_qty':None}) 

        if outdate!=None :
            s2 = outdate.split('-')
            newmonth2 = s2[1]
            newday2 = s2[2]
            newyear2 = s2[0]
            newoutdate =  newday2 + "-" + newmonth2 + "-" + newyear2
            obj2[i].update({'out_qty':newoutdate})
        else :
            obj2[i].update({'out_qty':None})     

    mybo=Batch.objects.all().values('bo_no')
    mysno=AxleMachining.objects.filter(dispatch_status=False).values('axle_no')
    my_context={
       'object':obj2,
       'nav':nav,
       'subnav':subnav,
       'usermaster':usermaster,
       'ip':get_client_ip(request),
       'mybo':mybo,
       'mysno':mysno,
       'obj3':obj3,
       }
    if request.method=="POST":
        once=request.POST.get('once')
        submit=request.POST.get('submit')
        if submit=='Save':
        
            first=request.POST.get('bo_no')
            second=request.POST.get('bo_date')
            third=request.POST.get('date')
            fourth=request.POST.get('axlep_no')
            sixth=request.POST.get('loco_type')
            eighth=request.POST.get('axle_no')
            ninth=request.POST.get('axle_make')
            tenth=request.POST.get('axle_heatcaseno')
            eleven=request.POST.get('pt_no')
            twelve=request.POST.get('bo_qty')
            indate=request.POST.get('in_qty')
            outdate=request.POST.get('out_qty')
            s1 = indate.split('-')
            month1 = s1[1]
            day1 = s1[0]
            year1 = s1[2]
            newindate =  year1 + "-" + month1 + "-" + day1
            s2 = outdate.split('-')
            month2 = s2[1]
            day2 = s2[0]
            year2 = s2[2]
            newoutdate =  year2 + "-" + month2 + "-" + day2
            if first and second and third and fourth and sixth and eighth and ninth and tenth and eleven and twelve and indate and outdate:
                obj=AxleMachining.objects.create()
                obj.bo_no=first
                obj.bo_date=second
                obj.date=third
                obj.axlep_no=fourth
                obj.loco_type=sixth
                obj.axle_no=eighth
                obj.axle_make=ninth
                obj.axle_heatcaseno=tenth
                obj.axleinspection_status=False
                obj.pt_no=eleven
                obj.bo_qty=twelve
                obj.in_qty=newindate
                obj.out_qty=newoutdate
                obj.save()
                messages.success(request, 'Successfully Added!')
            else:
                messages.error(request,"Please Enter All Records!")

            obj2=AxleMachining.objects.all().order_by('sno')
            my_context={
            'object':obj2,
            }

        if submit=='save':

            sno=request.POST.get('editsno')
            bo_no=request.POST.get('editbo_no')
            bo_date=request.POST.get('editbo_date')
            bo_qty=request.POST.get('editbo_qty')
            pt_no=request.POST.get('editpt_no')
            date=request.POST.get('editdate')
            loco_type=request.POST.get('editlocos')
            axlep_no=request.POST.get('editaxlep_no')
            axle_no=request.POST.get('editaxle_no')
            axle_make=request.POST.get('editaxle_make')
            axle_heatcaseno=request.POST.get('editaxle_heatcaseno')
            indate=request.POST.get('editin_qty')
            outdate=request.POST.get('editout_qty')
            s1 = indate.split('-')
            month1 = s1[1]
            day1 = s1[0]
            year1 = s1[2]
            newindate =  year1 + "-" + month1 + "-" + day1
            s2 = outdate.split('-')
            month2 = s2[1]
            day2 = s2[0]
            year2 = s2[2]
            newoutdate =  year2 + "-" + month2 + "-" + day2
            if bo_no and bo_date and date and loco_type and axlep_no and axle_no and axle_make and axle_heatcaseno and pt_no and bo_qty and indate and outdate:
                AxleMachining.objects.filter(axle_no=sno).update(bo_no=bo_no,bo_date=bo_date,pt_no=pt_no,bo_qty=bo_qty,in_qty=newindate,out_qty=newoutdate,date=date,axlep_no=axlep_no,loco_type=loco_type,axle_no=axle_no,axle_make=axle_make,axle_heatcaseno=axle_heatcaseno)
                messages.success(request, 'Successfully Edited!')
            else:
                messages.error(request,"Please Enter S.No.!")
                
        if submit=="Dispatch":
            
            sno=int(request.POST.get('dissno'))
            dislocos=request.POST.get('dislocos')
            dispatchdate=request.POST.get('dispatch_date')
            if sno and dislocos:
                AxleMachining.objects.filter(sno=sno).update(dispatch_to=dislocos,dispatch_status=True,dispatch_date=dispatchdate)
                messages.success(request, 'Successfully Dispatched!')
            else:
                messages.error(request,"Please Enter S.No.!")
        
        if submit=='Delete':

            sno=request.POST.get('delsno')
            if sno:
                w=list(AxleMachining.objects.filter(axle_no=sno).values('axle_no'))
                l=len(w)
                if l>0 :
                    AxleMachining.objects.filter(axle_no=sno).delete()
                    messages.success(request, 'Successfully Deleted!')
                else:
                    messages.error(request,"Please Enter Valid Axle Number!")
            else:
                messages.error(request,"Please Enter S.No.!")

        if submit=='InspectAxle':
            
            sno=request.POST.get('snoaxle')
            ustaxle=request.POST.get('ustaxle')
            ustaxle_date=request.POST.get('ustaxle_date')
            ustaxle_status=request.POST.get('ustaxle_status')
            axlelength=request.POST.get('axlelength')
            journalaxle=request.POST.get('journalaxle')
            throweraxle=request.POST.get('throweraxle')
            wheelseataxle=request.POST.get('wheelseataxle')
            gearseataxle=request.POST.get('gearseataxle')
            collaraxle=request.POST.get('collaraxle')
            journalaxlende=request.POST.get('journalaxlende')
            throweraxlende=request.POST.get('throweraxlende')
            wheelseataxlende=request.POST.get('wheelseataxlende')
            collaraxlende=request.POST.get('collaraxlende')
            dateaxle=request.POST.get('dateaxle')
            bearingaxle=request.POST.get('bearingaxle')
            abutmentaxle=request.POST.get('abutmentaxle')
            inspector_nameaxle=request.POST.get('inspector_nameaxle')
            journal_surfacefinishGE=request.POST.get('journal_surfacefinishGE')
            wheelseat_surfacefinishGE=request.POST.get('wheelseat_surfacefinishGE')
            gearseat_surfacefinishGE=request.POST.get('gearseat_surfacefinishGE')
            journal_surfacefinishFE=request.POST.get('journal_surfacefinishFE')
            wheelseat_surfacefinishFE=request.POST.get('wheelseat_surfacefinishFE')
            gearseat_surfacefinishFE=request.POST.get('gearseat_surfacefinishFE')
            s = dateaxle.split('-')
            month1 = s[1]
            day1 = s[0]
            year1 = s[2]
            newdateaxle =  year1 + "-" + month1 + "-" + day1
            if ustaxle_date and ustaxle_status and ustaxle and axlelength and journalaxle and throweraxle and wheelseataxle and gearseataxle and collaraxle and dateaxle and bearingaxle and abutmentaxle and inspector_nameaxle and journal_surfacefinishGE and wheelseat_surfacefinishGE and gearseat_surfacefinishGE and journal_surfacefinishFE and wheelseat_surfacefinishFE and gearseat_surfacefinishFE and journalaxlende and throweraxlende and wheelseataxlende and collaraxlende:
                AxleMachining.objects.filter(axle_no=sno).update(ustaxle_date=ustaxle_date,ustaxle_status=ustaxle_status,ustaxle=ustaxle,axlelength=axlelength,journalaxle=journalaxle,throweraxle=throweraxle,wheelseataxle=wheelseataxle,gearseataxle=gearseataxle,collaraxle=collaraxle,dateaxle=newdateaxle,bearingaxle=bearingaxle,abutmentaxle=abutmentaxle,inspector_nameaxle=inspector_nameaxle,journal_surfacefinishGE=journal_surfacefinishGE,wheelseat_surfacefinishGE=wheelseat_surfacefinishGE,gearseat_surfacefinishGE=gearseat_surfacefinishGE,journal_surfacefinishFE=journal_surfacefinishFE,wheelseat_surfacefinishFE=wheelseat_surfacefinishFE,gearseat_surfacefinishFE=gearseat_surfacefinishFE,journalaxlende=journalaxlende,throweraxlende=throweraxlende,wheelseataxlende=wheelseataxlende,collaraxlende=collaraxlende,axleinspection_status=True,dispatch_to="Inspected")
                messages.success(request, 'Axle Successfully Inspected!')
            else:
                messages.error(request,"Please Enter all records!")

        
        return HttpResponseRedirect("/axlemachining_section/")

    return render(request,"axlemachining_section.html",my_context)


def axle_addbo(request):
    if request.method=="GET" and request.is_ajax():
        mybo = request.GET.get('selbo_no')
        myval = list(Batch.objects.filter(bo_no=mybo).values('ep_type','rel_date','part_no','batch_qty'))
        return JsonResponse(myval, safe = False)
    return JsonResponse({"success":False}, status=400)

def axle_editsno(request):
    if request.method=="GET" and request.is_ajax():
        mysno=request.GET.get('sels_no')
        myval=list(AxleMachining.objects.filter(axle_no=mysno).values('bo_no','bo_date','pt_no','bo_qty','in_qty','out_qty','date','axlep_no','loco_type','axle_no','axle_make','axle_heatcaseno'))
        return JsonResponse(myval, safe=False)
    return JsonResponse({"success":False}, status=400)

@login_required
@role_required(urlpass='/wheelmachining_section/')
def wheelmachining_section(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    obj2=WheelMachining.objects.all().filter(dispatch_status=False).order_by('sno')
    mybo=Batch.objects.all().values('bo_no')
    mysno=WheelMachining.objects.filter(dispatch_status=False).values('wheel_no')
    my_context={
       'object':obj2,
       'nav':nav,
       'subnav':subnav,
       'usermaster':usermaster,
       'ip':get_client_ip(request),
       'mybo':mybo,
       'mysno':mysno,
       }
    if request.method=="POST":
        once=request.POST.get('once')
        submit=request.POST.get('submit')
        if submit=='Save':
        
            first=request.POST.get('bo_no')
            second=request.POST.get('bo_date')
            third=request.POST.get('date')
            fourth=request.POST.get('wheel_no')
            fifth=request.POST.get('wheel_make')
            sixth=request.POST.get('loco_type')
            seventh=request.POST.get('wheel_heatcaseno')
            eighth=request.POST.get('wheelp_no')
            eleven=request.POST.get('pt_no')
            twelve=request.POST.get('bo_qty')
            indate=request.POST.get('in_qty')
            outdate=request.POST.get('out_qty')
            if first and second and third and fourth and fifth and sixth and seventh and eighth and eleven and twelve and indate and outdate :
                obj=WheelMachining.objects.create()
                obj.bo_no=first
                obj.bo_date=second
                obj.date=third
                obj.wheel_no=fourth
                obj.wheel_make=fifth
                obj.loco_type=sixth
                obj.wheel_heatcaseno=seventh
                obj.wheelp_no=eighth
                obj.wheelinspection_status=False
                obj.pt_no=eleven
                obj.bo_qty=twelve
                obj.in_qty=indate
                obj.out_qty=outdate
                obj.save()
                messages.success(request, 'Successfully Added!')
            else:
                messages.error(request,"Please Enter All Records!")

            obj2=WheelMachining.objects.all().order_by('sno')
            my_context={
            'object':obj2,
            }

        if submit=='save':

            sno=request.POST.get('editsno')
            bo_no=request.POST.get('editbo_no')
            bo_date=request.POST.get('editbo_date')
            bo_qty=request.POST.get('editbo_qty')
            pt_no=request.POST.get('editpt_no')
            date=request.POST.get('editdate')
            loco_type=request.POST.get('editlocos')
            wheelp_no=request.POST.get('editwheelp_no')
            wheel_no=request.POST.get('editwheel_no')
            wheel_make=request.POST.get('editwheel_make')
            wheel_heatcaseno=request.POST.get('editwheel_heatcaseno')
            indate=request.POST.get('editin_qty')
            outdate=request.POST.get('editout_qty')
            if bo_no and bo_date and date and loco_type and wheel_make and wheel_no and wheel_heatcaseno and wheelp_no and pt_no and bo_qty and indate and outdate:
                WheelMachining.objects.filter(wheel_no=sno).update(bo_no=bo_no,bo_date=bo_date,pt_no=pt_no,bo_qty=bo_qty,in_qty=indate,out_qty=outdate,date=date,wheel_no=wheel_no,wheel_make=wheel_make,loco_type=loco_type,wheel_heatcaseno=wheel_heatcaseno,wheelp_no=wheelp_no)
                messages.success(request, 'Successfully Edited!')
            else:
                messages.error(request,"Please Enter S.No.!")
        
        if submit=='Delete':

            sno=request.POST.get('delsno')
            if sno:
                w=list(WheelMachining.objects.filter(wheel_no=sno).values('wheel_no'))
                l=len(w)
                if l>0 :
                    WheelMachining.objects.filter(wheel_no=sno).delete()
                    messages.success(request, 'Successfully Deleted!')
                else:
                    messages.error(request,"Please Enter Valid Wheel Number!")
            else:
                messages.error(request,"Please Enter S.No.!")



        if submit=='InspectWheel':
    
            sno=request.POST.get('snowheel')
            oustwhl=request.POST.get('ustwhl')
            oustwhl_date=request.POST.get('ustwhl_date')
            oustwhl_status=request.POST.get('ustwhl_status')
            ohub_lengthwhl=request.POST.get('hub_lengthwhl')
            otread_diawhl=request.POST.get('tread_diawhl')
            orim_thicknesswhl=request.POST.get('rim_thicknesswhl')
            obore_diawhl=request.POST.get('bore_diawhl')
            oinspector_namewhl=request.POST.get('inspector_namewhl')
            odatewhl=request.POST.get('datewhl')
            if oustwhl_status and oustwhl_date and oustwhl and ohub_lengthwhl and otread_diawhl and orim_thicknesswhl and obore_diawhl and oinspector_namewhl and odatewhl:
                WheelMachining.objects.filter(wheel_no=sno).update(ustwhl_status=oustwhl_status,ustwhl_date=oustwhl_date,ustwhl=oustwhl,hub_lengthwhl=ohub_lengthwhl,tread_diawhl=otread_diawhl,rim_thicknesswhl=orim_thicknesswhl,bore_diawhl=obore_diawhl,inspector_namewhl=oinspector_namewhl,datewhl=odatewhl,wheelinspection_status=True,dispatch_to="Inspected")
                messages.success(request, 'Wheel Successfully Inspected!')
            else:
                messages.error(request,"Please Select S.No.!")
   
        return HttpResponseRedirect("/wheelmachining_section/")

    return render(request,"wheelmachining_section.html",my_context)


def whl_addbo(request):
    if request.method=="GET" and request.is_ajax():
        mybo = request.GET.get('selbo_no')
        myval = list(Batch.objects.filter(bo_no=mybo).values('ep_type','rel_date','part_no','batch_qty'))
        return JsonResponse(myval, safe = False)
    return JsonResponse({"success":False}, status=400)

def whl_editsno(request):
    if request.method=="GET" and request.is_ajax():
        mysno=request.GET.get('sels_no')
        myval=list(WheelMachining.objects.filter(wheel_no=mysno).values('bo_no','bo_date','pt_no','bo_qty','in_qty','out_qty','date','wheel_no','wheel_make','loco_type','wheel_heatcaseno','wheelp_no'))
        return JsonResponse(myval, safe=False)
    return JsonResponse({"success":False}, status=400)

@login_required
@role_required(urlpass='/mg6views/')
def mg6views(request):
    cuser=request.user
    usermaster=user_master.objects.filter(emp_id=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = user_master.objects.none()
    tool_no = Tools.objects.values('tool_code').exclude(tool_code__isnull=True).distinct()
    prtlist=[]
    for i in tool_no:
        prtlist.append(i['tool_code'])
    ticket_no = empmast.objects.values('ticket_no').exclude(ticket_no__isnull=True).distinct()
    prtticket=[]
    for i in ticket_no:
        prtticket.append(i['ticket_no'])
    empno = empmast.objects.filter(payrate__gt=4200).values('empno').exclude(empno__isnull=True).distinct()
    prtemp=[]
    for i in empno:
        prtemp.append(i['empno'])
    empno = empmast.objects.filter(scalecode__gt=4200).values('empno').exclude(empno__isnull=True).distinct()
    prtsec=[]
    for i in empno:
        prtsec.append(i['empno'])
    if "Superuser" in rolelist:
        tm=M5SHEMP.objects.all().values('shopsec').distinct()
        tmp=[]
        for on in tm:
            tmp.append(on['shopsec'])
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'ip':get_client_ip(request),
            'roles':tmp,
            'subnav':subnav,
            'prtlist':prtlist,
            'prtticket':prtticket,
            'prtemp':prtemp,
            'prtsec':prtsec,

        }
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):
            req = M5DOCnew.objects.all().filter(shop_sec=rolelist[i]).values('batch_no').distinct()
            wo_nop =wo_nop | req
        context = {
            'sub':0,
            'subnav':subnav,
            'lenm' :len(rolelist),
            'wo_nop':wo_nop,
            'nav':nav,
            'ip':get_client_ip(request),
            'roles' :rolelist,
            'prtlist':prtlist,
            'prtticket':prtticket,
            'prtemp':prtemp,
            'prtsec':prtsec,
        }
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles' :rolelist,
            'prtlist':prtlist,
            'prtticket':prtticket,    
            'prtemp':prtemp,
            'prtsec':prtsec,
                }

    if request.method == "POST":
        
        submitvalue = request.POST.get('proceed')
        if submitvalue=='Proceed':
            shop_sec = request.POST.get('shop_sec')
            mc_no = request.POST.get('mcno')
            cd_no = request.POST.get('cd_no')
            tool_no = request.POST.get('tool_no')

            obj  = MG6.objects.filter(tool_no=tool_no,machine_no=mc_no,cd_no=cd_no).values('tool_no','ticket_no','tool_des','date_of_damage','machine_no','cd_no','cause_of_damage','shop_suprintendent','sec_chargeman','remarks')
            obj1 = Lc1.objects.filter(lcno=mc_no)
            
            leng = obj.count()
            leng1 = obj1.count()
            
            if "Superuser" in rolelist:
                    tm=M5SHEMP.objects.all().values('shopsec').distinct()
                    tmp=[]
                    for on in tm:
                        tmp.append(on['shopsec'])
                    context={
                        'lenm' :2,
                        'nav':nav,
                        'ip':get_client_ip(request),
                        'roles':tmp,
                        'len':leng,   
                        'len1':leng1,  
                        'obj':obj,
                        'obj1':obj1,
                        'sub': 1,
                        'shop_sec': shop_sec,
                        'mc_no': mc_no,
                        'cd_no': cd_no,
                        'tool_no':tool_no,
                        'subnav':subnav,
                        'prtlist':prtlist,
                        'prtticket':prtticket,
                        'prtemp':prtemp,
                        'prtsec':prtsec,



                    }
            elif(len(rolelist)==1):
                    for i in range(0,len(rolelist)):
                        req = M5DOCnew.objects.all().filter(shop_sec=rolelist[i]).values('batch_no').distinct()
                        wo_nop =wo_nop | req
                    context = {
                        'lenm' :2,
                        'nav':nav,
                        'ip':get_client_ip(request),
                        'roles':tmp,
                        'obj':obj,
                        'obj1':obj1,    
                        'len':leng,
                        'len1':leng1,
                        'sub': 1,
                        'shop_sec': shop_sec,
                        'mc_no': mc_no,
                        'cd_no': cd_no,
                        'tool_no':tool_no,
                      
                        'subnav':subnav,
                    }
            elif(len(rolelist)>1):
                    context = {
                        'lenm' :len(rolelist),
                        'nav':nav,
                        'subnav':subnav,
                        'ip':get_client_ip(request),
                        'roles' :rolelist,
                        'obj':obj,
                        'obj1':obj1,
                        'len':leng,
                        'len1':leng1,
                        'shop_sec': shop_sec,
                        'mc_no': mc_no,
                        'cd_no': cd_no,
                        'tool_no':tool_no,
                        'subnav':subnav
                    }    
        if submitvalue=='submit':
                    leng=request.POST.get('len')
                    now = datetime.datetime.now()
                    des=request.POST.get('tool_des')
                    tool_no = request.POST.get('tool_no')
                    ticket_no= request.POST.get('ticket_no')
                    date=request.POST.get('date_of_damage')
                    mc_no = request.POST.get('mc_no')
                    cd_no=request.POST.get('cd_no')
                    cause = request.POST.get('cause_of_damage')
                    shop_sup = request.POST.get('shop_sup')
                    sec = request.POST.get('sec_chargeman')
                    rem = request.POST.get('rem')

                    mg6obj = MG6.objects.filter(tool_no=tool_no,machine_no=mc_no,cd_no=cd_no).distinct()
                    if len(mg6obj) == 0:

                        MG6.objects.create(tool_no=str(tool_no),tool_des=str(des),ticket_no=str(ticket_no),date_of_damage=str(date),machine_no=str(mc_no),cd_no=str(cd_no),cause_of_damage=str(cause),last_modified=str(now),login_id=request.user,shop_suprintendent=str(shop_sup),sec_chargeman=str(sec),remarks=str(rem))

                    else:

                        MG6.objects.filter(tool_no=tool_no,machine_no=mc_no,cd_no=cd_no).update(tool_no=str(tool_no),tool_des=str(des),ticket_no=str(ticket_no),date_of_damage=str(date),machine_no=str(mc_no),cd_no=str(cd_no),cause_of_damage=str(cause),shop_suprintendent=str(shop_sup),sec_chargeman=str(sec),last_modified=str(now),remarks=str(rem))
                       
    return render(request,"mg6views.html",context)

def mg6getmc(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        wono = list(Lc1.objects.filter(shop_sec = shop_sec).values('lcno').distinct())
        return JsonResponse(wono, safe = False)
    return JsonResponse({"success":False}, status=400)

def mg6getcd(request):
    if request.method == "GET" and request.is_ajax():
        mc_no = request.GET.get('mcno')
        shop_sec = request.GET.get('shop_sec')
        cd_no = list(Oprn.objects.filter(shop_sec = shop_sec).values('part_no'))
        return JsonResponse(cd_no, safe = False)
    return JsonResponse({"success":False}, status=400)

def mg6gettool(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        tool_no=list(ms_tools_master.objects.filter(shop_code=shop_sec).values('instrument_number').distinct())
        return JsonResponse(tool_no, safe = False)
    return JsonResponse({"success":False}, status=400)

def m21view(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    if "Superuser" in rolelist:
        tm=shop_section.objects.all()
        tmp=[]
        for on in tm:
            tmp.append(on.section_code)
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles':tmp
        }
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):
            req = M5SHEMP.objects.all().filter(shopsec=rolelist[i]).values('staff_no').distinct()
            staff_no =staff_no | req
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'staff_no':staff_no,
            'nav':nav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist,
            'subnav':subnav,
        }
        
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'nav':nav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist,
            'subnav':subnav,
        }
    if request.method == "POST":
        
        submitvalue = request.POST.get('proceed')
        if submitvalue=='Proceed':            
            shop_sec = request.POST.get('shop_sec')
            staff_no = request.POST.get('staff_no')
            yymm = request.POST.get('yymm')
            obj = M5SHEMP.objects.filter(shopsec=shop_sec,staff_no=staff_no,yymm=yymm).values('name','desgn','cat').distinct()
            obj1 =M21.objects.filter(shop_sec=shop_sec,staff_no=staff_no).values('in1','out','in2','out2','total_time','date')
          
            leng = obj.count()
            leng1 = obj1.count()           

            context = {
                        'obj': obj,
                        'obj1': obj1,
                        'len': leng,
                        'len1': leng1,
                        'shop_sec': shop_sec,
                        'ran':range(1,2),
                        'staff_no': staff_no,                        
                        'yymm': yymm,
                        'sub' : 1,
                        'nav':nav,
                        'ip':get_client_ip(request),  
                        'subnav':subnav,
            }
        
        if submitvalue =='Submit': 
            inoutnum         =   request.POST.get("inoutnum")   
            in1     =   request.POST.get('in1')
            date    =   request.POST.get('date')
            out     =   request.POST.get('out')
            outdate =   request.POST.get('outdate')
            in2     =   request.POST.get('in2')
            out2    =   request.POST.get('out2')
            total_time = request.POST.get('total_time')                  
                    

            leng                    =   request.POST.get('len')               
            shop_sec                =  request.POST.get('shop_sec')
            staff_no                =  request.POST.get('staff_no')
            name                    =   request.POST.get('name')
            cat                     =   request.POST.get('cat')
            desgn                   =   request.POST.get('desgn')
            lastWeekPerHour         =   request.POST.get('lastWeekPerHour')
            lastWeekPerAmount       =   request.POST.get('lastWeekPerAmount')
            baseRatePerHour         =   request.POST.get('baseRatePerHour')
            baseRatePerHourAmount   =   request.POST.get('baseRatePerHourAmount')  
            cutTimeDay              =   request.POST.get('cutTimeDay')  
            cutTimeHours            =   request.POST.get('cutTimeHours')  
            additionalWagesDay      =   request.POST.get('additionalWagesDay')  
            additionalWagesHours    =   request.POST.get('additionalWagesHours')  
            factoryHalfDay          =   request.POST.get('factoryHalfDay')  
            factoryHalfHours        =   request.POST.get('factoryHalfHours')  
            generalOTDay            =   request.POST.get('generalOTDay')  
            generalOTHours          =   request.POST.get('generalOTHours')  
            nightAllowanceDay       =   request.POST.get('nightAllowanceDay')
            nightAllowanceHours     =   request.POST.get('nightAllowanceHours')
            halfHolidayDay          =   request.POST.get('halfHolidayDay')
            halfHolidayHours        =   request.POST.get('halfHolidayHours')
            payOffLeaveDay          =   request.POST.get('payOffLeaveDay')
            payOffLeaveHours        =   request.POST.get('payOffLeaveHours')
            unusedHolidaysDay       =   request.POST.get('unusedHolidaysDay')
            unusedHolidaysHours     =   request.POST.get('unusedHolidaysHours')
            supplementaryHolidaysDay=   request.POST.get('supplementaryHolidaysDay')
            supplementaryHolidaysHours  =   request.POST.get('supplementaryHolidaysHours')
                    
            M21DOCNEW1.objects.create(shop_sec=shop_sec,staff_no=staff_no,name=str(name),cat=str(cat),desgn=str(desgn),lastWeekPerHour=str(lastWeekPerHour),lastWeekPerAmount=str(lastWeekPerAmount),baseRatePerHour=str(baseRatePerHour),baseRatePerHourAmount=str(baseRatePerHourAmount),cutTimeDay=str(cutTimeDay), cutTimeHours=str(cutTimeHours),additionalWagesDay=str(additionalWagesDay),additionalWagesHours=str(additionalWagesHours),factoryHalfDay=str(factoryHalfDay), factoryHalfHours=str(factoryHalfHours),generalOTDay=str(generalOTDay),generalOTHours=str(generalOTHours),nightAllowanceDay=str(nightAllowanceDay), nightAllowanceHours=str(nightAllowanceHours),halfHolidayDay=str(halfHolidayDay),halfHolidayHours=str(halfHolidayHours),payOffLeaveDay=str(payOffLeaveDay),payOffLeaveHours=str(payOffLeaveHours),unusedHolidaysDay=str(unusedHolidaysDay),unusedHolidaysHours=str(unusedHolidaysHours),supplementaryHolidaysDay=str(supplementaryHolidaysDay), supplementaryHolidaysHours=str(supplementaryHolidaysHours),date=str(date), in1=str(in1),out=str(out), in2=str(in2),out2=str(out2), total_time=str(total_time), outdate = str(outdate))


            for i in range(1, int(inoutnum)+1):
                    
                    in1     =   request.POST.get('in1'+str(i))
                    date    =   request.POST.get('date'+str(i))
                    out     =   request.POST.get('outA'+str(i))
                    outdate =   request.POST.get('outdate'+str(i))
                    in2     =   request.POST.get('in2'+str(i))
                    out2    =   request.POST.get('out2'+str(i))
                    total_time = request.POST.get('total_time'+str(i)) 

                    leng                    =   request.POST.get('len')               
                    shop_sec                =  request.POST.get('shop_sec')
                    staff_no                =  request.POST.get('staff_no')
                    name                    =   request.POST.get('name')
                    cat                     =   request.POST.get('cat')
                    desgn                   =   request.POST.get('desgn')
                    lastWeekPerHour         =   request.POST.get('lastWeekPerHour')
                    lastWeekPerAmount       =   request.POST.get('lastWeekPerAmount')
                    baseRatePerHour         =   request.POST.get('baseRatePerHour')
                    baseRatePerHourAmount   =   request.POST.get('baseRatePerHourAmount')  
                    cutTimeDay              =   request.POST.get('cutTimeDay')  
                    cutTimeHours            =   request.POST.get('cutTimeHours')  
                    additionalWagesDay      =   request.POST.get('additionalWagesDay')  
                    additionalWagesHours    =   request.POST.get('additionalWagesHours')  
                    factoryHalfDay          =   request.POST.get('factoryHalfDay')  
                    factoryHalfHours        =   request.POST.get('factoryHalfHours')  
                    generalOTDay            =   request.POST.get('generalOTDay')  
                    generalOTHours          =   request.POST.get('generalOTHours')  
                    nightAllowanceDay       =   request.POST.get('nightAllowanceDay')
                    nightAllowanceHours     =   request.POST.get('nightAllowanceHours')
                    halfHolidayDay          =   request.POST.get('halfHolidayDay')
                    halfHolidayHours        =   request.POST.get('halfHolidayHours')
                    payOffLeaveDay          =   request.POST.get('payOffLeaveDay')
                    payOffLeaveHours        =   request.POST.get('payOffLeaveHours')
                    unusedHolidaysDay       =   request.POST.get('unusedHolidaysDay')
                    unusedHolidaysHours     =   request.POST.get('unusedHolidaysHours')
                    supplementaryHolidaysDay=   request.POST.get('supplementaryHolidaysDay')
                    supplementaryHolidaysHours  =   request.POST.get('supplementaryHolidaysHours')
                    
                    M21DOCNEW1.objects.create(shop_sec=shop_sec,staff_no=staff_no,name=str(name),cat=str(cat),desgn=str(desgn),lastWeekPerHour=str(lastWeekPerHour),lastWeekPerAmount=str(lastWeekPerAmount),baseRatePerHour=str(baseRatePerHour),baseRatePerHourAmount=str(baseRatePerHourAmount),cutTimeDay=str(cutTimeDay), cutTimeHours=str(cutTimeHours),additionalWagesDay=str(additionalWagesDay),additionalWagesHours=str(additionalWagesHours),factoryHalfDay=str(factoryHalfDay), factoryHalfHours=str(factoryHalfHours),generalOTDay=str(generalOTDay),generalOTHours=str(generalOTHours),nightAllowanceDay=str(nightAllowanceDay), nightAllowanceHours=str(nightAllowanceHours),halfHolidayDay=str(halfHolidayDay),halfHolidayHours=str(halfHolidayHours),payOffLeaveDay=str(payOffLeaveDay),payOffLeaveHours=str(payOffLeaveHours),unusedHolidaysDay=str(unusedHolidaysDay),unusedHolidaysHours=str(unusedHolidaysHours),supplementaryHolidaysDay=str(supplementaryHolidaysDay), supplementaryHolidaysHours=str(supplementaryHolidaysHours),date=str(date), in1=str(in1),out=str(out), in2=str(in2),out2=str(out2), total_time=str(total_time), outdate = str(outdate))
               
            messages.success(request, 'GATE ATTENDANCE CARD Successfully generated.')
    return render(request,"m21view.html",context)

                        
def m21getempno(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        staff_no=list(M5SHEMP.objects.filter(shopsec=shop_sec).values('staff_no').distinct())
        return JsonResponse(staff_no, safe = False)
    return JsonResponse({"success":False}, status=400)

def m21getyymm(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        staff_no = request.GET.get('staff_no')
        yymm = list(M5SHEMP.objects.filter(shopsec=shop_sec,staff_no=staff_no).values('yymm').distinct())
        return JsonResponse(yymm, safe = False)
    return JsonResponse({"success":False}, status=400)


@login_required
@role_required(urlpass='/M13register/')
def M13register(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    if "Superuser" in rolelist:
        tm=shop_section.objects.all()
        tmp=[]
        for on in tm:
            tmp.append(on.section_code)
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles':tmp
        }
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):
            req = M13.objects.all().filter(shop=rolelist[i]).values('wo').distinct()
            wo_nop =wo_nop | req
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'wo_nop':wo_nop,
            'nav':nav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist,
            'subnav':subnav,
        }
       
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'nav':nav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist,
            'subnav':subnav,
        }
    if request.method == "POST":
       
        submitvalue = request.POST.get('proceed')
        if submitvalue=='Proceed':
            shop = request.POST.get('shop_sec')
            month = request.POST.get('month')            
            month_temp1 = month.split("-")[0]
            month_temp2 = month.split("-")[1]
            month_final = month_temp2+'-'+month_temp1
            obj = M13.objects.filter(shop=shop,m13_date__contains=month_final).values('m13_no','wo','m13_date','part_no','qty_tot','opn','fault_cd','reason','wo_rep','job_no','shop').distinct()
            
        if obj:
                  
            leng = obj.count()

            context = {

                    'sub':1,
                    'lenm' :2,
                    'nav':nav,
                    'subnav':subnav,
                    'ip':get_client_ip(request),
                    'roles':tmp,
                    'obj': obj,
                    'len': leng,
                    'shop_sec': shop,
                    'month': month_final,
                    

            }
            

        else:
                messages.error(request,"Data Not Found ! - Please select correct Shop and Month data to display data ")  
    return render(request,"M13register.html",context)



@login_required
@role_required(urlpass='/airboxreport/')
def airboxreport(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    context={
       'nav':nav,
       'subnav':subnav,
       'usermaster':usermaster,
       'ip':get_client_ip(request),
       }
    if request.method=="POST":
        bval=request.POST.get('btn')
        if bval=='Date Wise Report':
            context={
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':0,
            }
        if bval=='Date Range Report':
            context={
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':2,
            }
        if bval=='Proceed1':
            dt=request.POST.get('datew')
            ob1=MachiningAirBox.objects.filter(in_qty=dt).values('sno','pt_no')
            ob2=MachiningAirBox.objects.filter(out_qty=dt).values('sno','pt_no')
            context={
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':1,
            'ob1':ob1,
            'ob2':ob2,
            'dt':dt,
            }
        if bval=='Proceed2':
            dt1=request.POST.get('date1')
            dt2=request.POST.get('date2')
            ob1=MachiningAirBox.objects.filter(in_qty__range=(dt1,dt2)).values('sno','pt_no','in_qty').order_by('in_qty')
            ob2=MachiningAirBox.objects.filter(out_qty__range=(dt1,dt2)).values('sno','pt_no','out_qty').order_by('out_qty')
            context={
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':3,
            'ob1':ob1,
            'ob2':ob2,
            'dt1':dt1,'dt2':dt2,
            }

    return render(request,'airboxreport.html',context)

@login_required
@role_required(urlpass='/mg9initialreportviews/')
def mg9initialreportviews(request):
    cuser=request.user
    usermaster=user_master.objects.filter(emp_id=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = user_master.objects.none()
    tool_no = Tools.objects.values('tool_code').exclude(tool_code__isnull=True).distinct()
    prtlist=[]
    for i in tool_no:
        prtlist.append(i['tool_code'])
    ticket_no = empmast.objects.values('ticket_no').exclude(ticket_no__isnull=True).distinct()
    prtticket=[]
    for i in ticket_no:
        prtticket.append(i['ticket_no'])
    empno = empmast.objects.filter(payrate__gt=4200).values('empno').exclude(empno__isnull=True).distinct()
    prtemp=[]
    for i in empno:
        prtemp.append(i['empno'])
    empno = empmast.objects.filter(scalecode__gt=4200).values('empno').exclude(empno__isnull=True).distinct()
    prtsec=[]
    for i in empno:
        prtsec.append(i['empno'])
    if "Superuser" in rolelist:
        tm=M5SHEMP.objects.all().values('shopsec').distinct()
        tmp=[]
        for on in tm:
            tmp.append(on['shopsec'])
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'ip':get_client_ip(request),
           
            'roles':tmp,
            'subnav':subnav,
            'prtlist':prtlist,
            'prtticket':prtticket,
            'prtemp':prtemp,
            'prtsec':prtsec,

        }
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):
            req = M5DOCnew.objects.all().filter(shop_sec=rolelist[i]).values('batch_no').distinct()
            wo_nop =wo_nop | req
        context = {
            'sub':0,
            'subnav':subnav,
            'lenm' :len(rolelist),
            'wo_nop':wo_nop,
            'nav':nav,
            'ip':get_client_ip(request),
            'roles' :rolelist,
            'prtlist':prtlist,
            'prtticket':prtticket,
            'prtemp':prtemp,
            'prtsec':prtsec,
        }
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles' :rolelist,
            'prtlist':prtlist,
            'prtticket':prtticket,    
            'prtemp':prtemp,
            'prtsec':prtsec,
                }

    if request.method == "POST":
        
        submitvalue = request.POST.get('proceed')
        if submitvalue=='Proceed':
            shop_sec = request.POST.get('shop_sec')
            mw_no = request.POST.get('mwno')
            staff_no = request.POST.get('staffno')
            
            current_yr=int(datetime.datetime.now().year)


            obj  = MG9Initial.objects.filter(sec=shop_sec,mw_no=mw_no,staff_no=staff_no).values('sec','mw_no','sl_no','staff_no','handed_date','comp_date','handed_time','comp_time','handed_cmsec','comp_cmsec','handed_cmserv','comp_cmserv','complaint','action').distinct()
            obj1  = MG9Initial.objects.values('id').count()

            leng = obj.count()
            slno=obj1
            slno=slno+1
         
            
            if "Superuser" in rolelist:
                    tm=M5SHEMP.objects.all().values('shopsec').distinct()
                    tmp=[]
                    for on in tm:
                        tmp.append(on['shopsec'])
                    context={
                        'lenm' :2,
                        'nav':nav,
                        'ip':get_client_ip(request),
                        'roles':tmp,
                        'len':leng,   
                        'obj':obj,
                        'sub': 1,
                        'shop_sec': shop_sec,
                        'mw_no': mw_no,
                        'staff_no': staff_no,
                        'slno':slno,
                        'subnav':subnav,
                        'prtlist':prtlist,
                        'prtticket':prtticket,
                        'prtemp':prtemp,
                        'prtsec':prtsec,



                    }
            elif(len(rolelist)==1):
                    for i in range(0,len(rolelist)):
                        req = M5DOCnew.objects.all().filter(shop_sec=rolelist[i]).values('batch_no').distinct()
                        wo_nop =wo_nop | req
                    context = {
                        'lenm' :2,
                        'nav':nav,
                        'ip':get_client_ip(request),
                        'roles':tmp,
                        'len':leng,
                        'obj':obj,
                        'slno':slno,
                        'sub': 1,
                        'shop_sec': shop_sec,
                        'mw_no': mw_no,
                        'staff_no': staff_no,
                     
                      
                        'subnav':subnav,
                    }
            elif(len(rolelist)>1):
                    context = {
                        'lenm' :len(rolelist),
                        'nav':nav,
                        'subnav':subnav,
                        'ip':get_client_ip(request),
                        'roles' :rolelist,
                        'len':leng,
                        'obj':obj,
                        'slno':slno,
                        'shop_sec': shop_sec,
                        'mw_no': mw_no,
                        'staff_no': staff_no,
                  
                        'subnav':subnav
                    }    
        if submitvalue=='submit':
                    leng=request.POST.get('len')
                    now = datetime.datetime.now()
                    shop_sec=request.POST.get('shop_sec')
                    mw_no = request.POST.get('mw_no')
                    staff_no = request.POST.get('staff_no')
                    comp= request.POST.get('complaint')
                    date_handed=request.POST.get('date_handed')
                    date_com=request.POST.get('date_com')
                    time_handed=request.POST.get('time_handed')
                    time_com=request.POST.get('time_com')
                    sec_handed = request.POST.get('sec_handed')
                    sec_com = request.POST.get('sec_com')
                    serv_com = request.POST.get('serv_com')
                    serv_handed = request.POST.get('serv_handed')
                    action= request.POST.get('action')
                    sl_no = request.POST.get('sl_no')

          

                    mg9obj = MG9Initial.objects.filter(sec=shop_sec,mw_no=mw_no,staff_no=staff_no).distinct()
                    if len(mg9obj) == 0:


                        MG9Initial.objects.create(sec=str(shop_sec),mw_no=str(mw_no),sl_no=str(sl_no),staff_no=str(staff_no),complaint=str(comp),handed_date=str(date_handed),comp_date=str(date_com),handed_time=str(time_handed),comp_time=str(time_com),handed_cmsec=str(sec_handed),comp_cmsec=str(sec_com),handed_cmserv=str(serv_handed),comp_cmserv=str(serv_com),action=str(action),last_modified=str(now),login_id=request.user)
                    else:

                        MG9Initial.objects.filter(sec=shop_sec,mw_no=mw_no,staff_no=staff_no).update(complaint=str(comp),handed_date=str(date_handed),comp_date=str(date_com),handed_time=str(time_handed),comp_time=str(time_com),handed_cmsec=str(sec_handed),comp_cmsec=str(sec_com),handed_cmserv=str(serv_handed),comp_cmserv=str(serv_com),action=str(action),last_modified=str(now))
                       
    return render(request,"mg9initialreportviews.html",context)

def mg9getmw(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        wono = list(Lc1.objects.filter(shop_sec = shop_sec).values('lcno').distinct())
        return JsonResponse(wono, safe = False)
    return JsonResponse({"success":False}, status=400)

def mg9getstaff(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        staff = list(Shemp.objects.filter(shopsec=shop_sec).values('staff_no').exclude(staff_no__isnull=True).distinct())
        return JsonResponse(staff, safe = False)
    return JsonResponse({"success":False}, status=400)



@login_required
@role_required(urlpass='/mg9compreportviews/')
def mg9compreportviews(request):
    cuser=request.user
    usermaster=user_master.objects.filter(emp_id=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = user_master.objects.none()
    tool_no = Tools.objects.values('tool_code').exclude(tool_code__isnull=True).distinct()
    prtlist=[]
    for i in tool_no:
        prtlist.append(i['tool_code'])
    ticket_no = empmast.objects.values('ticket_no').exclude(ticket_no__isnull=True).distinct()
    prtticket=[]
    for i in ticket_no:
        prtticket.append(i['ticket_no'])
    empno = empmast.objects.filter(payrate__gt=4200).values('empno').exclude(empno__isnull=True).distinct()
    prtemp=[]
    for i in empno:
        prtemp.append(i['empno'])
    empno = empmast.objects.filter(scalecode__gt=4200).values('empno').exclude(empno__isnull=True).distinct()
    prtsec=[]
    for i in empno:
        prtsec.append(i['empno'])
    if "Superuser" in rolelist:
        tm=M5SHEMP.objects.all().values('shopsec').distinct()
        tmp=[]
        for on in tm:
            tmp.append(on['shopsec'])
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'ip':get_client_ip(request),
           
            'roles':tmp,
            'subnav':subnav,
            'prtlist':prtlist,
            'prtticket':prtticket,
            'prtemp':prtemp,
            'prtsec':prtsec,

        }
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):
            req = M5DOCnew.objects.all().filter(shop_sec=rolelist[i]).values('batch_no').distinct()
            wo_nop =wo_nop | req
        context = {
            'sub':0,
            'subnav':subnav,
            'lenm' :len(rolelist),
            'wo_nop':wo_nop,
            'nav':nav,
            'ip':get_client_ip(request),
            'roles' :rolelist,
            'prtlist':prtlist,
            'prtticket':prtticket,
            'prtemp':prtemp,
            'prtsec':prtsec,
        }
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles' :rolelist,
            'prtlist':prtlist,
            'prtticket':prtticket,    
            'prtemp':prtemp,
            'prtsec':prtsec,
                }

    if request.method == "POST":
        
        submitvalue = request.POST.get('proceed')
        if submitvalue=='Proceed':
            shop_sec = request.POST.get('shop_sec')
            mw_no = request.POST.get('mwno')
            staff_no = request.POST.get('staffno')
            
            current_yr=int(datetime.datetime.now().year)


            obj2 = MG9Initial.objects.filter(sec=shop_sec,mw_no=mw_no).values('sl_no','handed_date','handed_time','handed_cmserv','handed_cmsec','complaint').distinct()
            obj  = MG9Complete.objects.filter(sec=shop_sec,mw_no=mw_no,staff_no=staff_no).values('sec','mw_no','staff_no','comp_date','comp_time','comp_cmsec','comp_cmserv','action','total_losthrs','cause_hrs','mp_time','mismp_time','inv_time').distinct()
        
            leng = obj.count()
            leng2 = obj2.count()
            if "Superuser" in rolelist:
                    tm=M5SHEMP.objects.all().values('shopsec').distinct()
                    tmp=[]
                    for on in tm:
                        tmp.append(on['shopsec'])
                    context={
                        'lenm' :2,
                        'nav':nav,
                        'ip':get_client_ip(request),
                        'roles':tmp,
                        'len':leng,   
                        'obj':obj,
                        'obj2':obj2,
                        'len2':leng2,
                        'sub': 1,
                        'shop_sec': shop_sec,
                        'mw_no': mw_no,
                        'staff_no': staff_no,
                        'cyear':current_yr,
                        'subnav':subnav,
                        'prtlist':prtlist,
                        'prtticket':prtticket,
                        'prtemp':prtemp,
                        'prtsec':prtsec,



                    }
            elif(len(rolelist)==1):
                    for i in range(0,len(rolelist)):
                        req = M5DOCnew.objects.all().filter(shop_sec=rolelist[i]).values('batch_no').distinct()
                        wo_nop =wo_nop | req
                    context = {
                        'lenm' :2,
                        'nav':nav,
                        'ip':get_client_ip(request),
                        'roles':tmp,
                        'len':leng,
                        'obj':obj,
                        'obj2':obj2,
                        'len2':leng2,
                        'sub': 1,
                        'shop_sec': shop_sec,
                        'mw_no': mw_no,
                        'staff_no': staff_no,
                        'cyear':current_yr,
                        'subnav':subnav,
                    }
            elif(len(rolelist)>1):
                    context = {
                        'lenm' :len(rolelist),
                        'nav':nav,
                        'subnav':subnav,
                        'ip':get_client_ip(request),
                        'roles' :rolelist,
                        'len':leng,
                        'obj':obj,
                        'obj2':obj2,
                        'len2':leng2,
                        'shop_sec': shop_sec,
                        'mw_no': mw_no,
                        'staff_no': staff_no,
                        'cyear':current_yr,
                        'subnav':subnav
                    }    
        if submitvalue=='submit':
                    leng=request.POST.get('len')
                    now = datetime.datetime.now()
                    shop_sec=request.POST.get('shop_sec')
                    mw_no = request.POST.get('mw_no')
                    staff_no = request.POST.get('staff_no')
                    comp= request.POST.get('complaint')
                    date_handed=request.POST.get('date_handed')
                    date_com=request.POST.get('date_com')
                    time_handed=request.POST.get('time_handed')
                    time_com=request.POST.get('time_com')
                    sec_handed = request.POST.get('sec_handed')
                    sec_com = request.POST.get('sec_com')
                    serv_com = request.POST.get('serv_com')
                    serv_handed = request.POST.get('serv_handed')
                    action= request.POST.get('action')
                    sl_no = request.POST.get('sl_no')
                    lost_hrs = request.POST.get('lost_hrs')
                    elec = request.POST.get('elec')
                    mech = request.POST.get('mech')
                    mech_ele = request.POST.get('mech_ele')
                    mp = request.POST.get('mp')
                    inv = request.POST.get('inv')
                    mismp = request.POST.get('mismp')
                    inv_time = request.POST.get('inv_time')
                    mismp_time = request.POST.get('mismp_time')
                    mp_time=request.POST.get('mp_time')



                   
                    tmp=""
                    if(elec is not None):
                        tmp=str(elec)+str("   ")
                    if(mech is not None):
                        tmp=tmp+str(mech)+str("   ")
                    if(mech_ele is not None):
                        tmp=tmp+str(mech_ele)+str("   ")
                    if(mp is not None):
                        tmp=tmp+str(mp)+str("   ")
                    if(inv is not None):
                        tmp=tmp+str(inv)+str("   ")
                    if(mp_time is None):
                        mp_time='00:00'
                    if(inv_time is None):
                        inv_time='00:00'
                    if(mismp_time is None):
                        mismp_time='00:00'                   

                    mg9obj = MG9Complete.objects.filter(sec=shop_sec,mw_no=mw_no,staff_no=staff_no).distinct()
                    if len(mg9obj) == 0:
                        MG9Complete.objects.create(sec=str(shop_sec),mw_no=str(mw_no),sl_no=str(sl_no),staff_no=str(staff_no),complaint=str(comp),handed_date=str(date_handed),comp_date=str(date_com),handed_time=str(time_handed),comp_time=str(time_com),handed_cmsec=str(sec_handed),comp_cmsec=str(sec_com),handed_cmserv=str(serv_handed),comp_cmserv=str(serv_com),action=str(action),last_modified=str(now),login_id=request.user,total_losthrs=str(lost_hrs),cause_hrs=str(tmp),mp_time=str(mp_time),inv_time=str(inv_time),mismp_time=str(mismp_time))
                    else:
                        cause=request.POST.get('cause_hrs')

                        MG9Complete.objects.filter(sec=shop_sec,mw_no=mw_no,staff_no=staff_no).update(complaint=str(comp),handed_date=str(date_handed),comp_date=str(date_com),handed_time=str(time_handed),comp_time=str(time_com),handed_cmsec=str(sec_handed),comp_cmsec=str(sec_com),handed_cmserv=str(serv_handed),comp_cmserv=str(serv_com),action=str(action),last_modified=str(now),login_id=str(request.user),total_losthrs=str(lost_hrs),cause_hrs=str(cause),mp_time=str(mp_time),inv_time=str(inv_time),mismp_time=str(mismp_time))
                
    return render(request,"mg9compreportviews.html",context)

def mg9getmwno(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        wono = list(Lc1.objects.filter(shop_sec = shop_sec).values('lcno').distinct())
        return JsonResponse(wono, safe = False)
    return JsonResponse({"success":False}, status=400)


def mg9getstaffno(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        staff = list(Shemp.objects.filter(shopsec=shop_sec).values('staff_no').exclude(staff_no__isnull=True).distinct())
        return JsonResponse(staff, safe = False)
    return JsonResponse({"success":False}, status=400)



@login_required
@role_required(urlpass='/miscreport/')
def miscreport(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    context={
       'nav':nav,
       'subnav':subnav,
       'usermaster':usermaster,
       'ip':get_client_ip(request),
       }
    if request.method=="POST":
        bval=request.POST.get('btn')
        if bval=='Date Wise Report':
            context={
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':0,
            }
        if bval=='Date Range Report':
            context={
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':2,
            }
        if bval=='Proceed1':
            dt=request.POST.get('datew')
            ob1=MiscellSection.objects.filter(in_qty=dt).values('sno','pt_no')
            ob2=MiscellSection.objects.filter(out_qty=dt).values('sno','pt_no')
            context={
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':1,
            'ob1':ob1,
            'ob2':ob2,
            'dt':dt,
            }
        if bval=='Proceed2':
            dt1=request.POST.get('date1')
            dt2=request.POST.get('date2')
            ob1=MiscellSection.objects.filter(in_qty__range=(dt1,dt2)).values('sno','pt_no','in_qty').order_by('in_qty')
            ob2=MiscellSection.objects.filter(out_qty__range=(dt1,dt2)).values('sno','pt_no','out_qty').order_by('out_qty')
            context={
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':3,
            'ob1':ob1,
            'ob2':ob2,
            'dt1':dt1,'dt2':dt2,
            }

    return render(request,'miscreport.html',context)



@login_required
@role_required(urlpass='/axlereport/')
def axlereport(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    context={
       'nav':nav,
       'subnav':subnav,
       'usermaster':usermaster,
       'ip':get_client_ip(request),
       }
    if request.method=="POST":
        bval=request.POST.get('btn')
        if bval=='Date Wise Report':
            context={
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':0,
            }
        if bval=='Date Range Report':
            context={
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':2,
            }
        if bval=='Axle Report':
            context={
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':10,
            }
        if bval=='Axle Record of Loco Type (date wise)':
            context={
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':6,
            }
        if bval=='Axle Record of Loco Type (date range)':
            context={
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':7,
            }
        if bval=='Proceed1':
                    
            pt=[]
            pto=[]
            lt=[]
            lto=[]
            count=[]
            count1=[]
            myval=[]
            myval1=[]
            unique_myval=[]
            unique_myval1=[]
            c1=0
            c2=0
            dt=request.POST.get('datew')
            s = dt.split('-')
            month = s[1]
            day = s[0]
            year = s[2]
            date =  year + "-" + month + "-" + day
            ob1=list(AxleMachining.objects.filter(in_qty=date).values('pt_no','loco_type','axle_no'))
            ob2=list(AxleMachining.objects.filter(out_qty=date).values('pt_no','loco_type','axle_no'))   
            len2=len(ob2)
            len1=len(ob1)
            for i in range(0,len(ob1)):
                pt.append(ob1[i]['pt_no'])
            for i in range(0,len(ob1)):
                lt.append(ob1[i]['loco_type'])
            for i in range (0,len(pt)):
                for j in range(0,len(pt)):
                    if(pt[i]==pt[j]):
                        c1=c1+1
                count.append(c1)
                c1=0
            for i in range (0,len(pt)):
                myval.append({'pt_no':pt[i], 'loco_type':lt[i], 'count1':count[i],'count2':'0'})


            for i in range(0,len(ob2)):
                pto.append(ob2[i]['pt_no'])
            
            for i in range(0,len(ob2)):
                lto.append(ob2[i]['loco_type'])
            
            for i in range (0,len(pto)):
                for j in range(0,len(pto)):
                    if(pto[i]==pto[j]):
                        c2=c2+1
                count1.append(c2)
                c2=0

            for i in range (0,len(pto)):
                myval1.append({'pt_no':pto[i], 'loco_type':lto[i],'count1':'0', 'count2':count1[i]})
            
            id=[]
            final=[]
            unique_final=[]
            c=0
            for i in range(len(myval1)):
                for j in range(len(myval)):
                    if myval1[i]['pt_no']==myval[j]['pt_no']:
                        final.append({'pt_no':pto[i], 'loco_type':lto[i],'count1':myval[j]['count1'], 'count2':count1[i]})
                        id.append(myval1[i]['pt_no'])
                        c=1
                        break
                if c==1:
                    c=0
                    continue
                else:
                    final.append({'pt_no':pto[i], 'loco_type':lto[i],'count1':'0', 'count2':count1[i]})
            
            for j in range(len(myval)):
                if  myval[j]['pt_no'] not in id:
                    final.append({'pt_no':pt[j], 'loco_type':lt[j], 'count1':count[j],'count2':'0'})

            for x in final:  
                if x not in unique_final: 
                    unique_final.append(x)
            
            context={
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':1,
            'dt':dt,
            'len1':len1,
            'len2':len2,
            'unique_final':unique_final,
            }
            
        if bval=='Proceed2':
            dt1=request.POST.get('date1')
            dt2=request.POST.get('date2')
            s1 = dt1.split('-')
            s2 = dt2.split('-')
            month1 = s1[1]
            day1 = s1[0]
            year1 = s1[2]
            date1 =  year1 + "-" + month1 + "-" + day1
            month2 = s2[1]
            day2 = s2[0]
            year2 = s2[2]
            date2 =  year2 + "-" + month2 + "-" + day2
            ob1=AxleMachining.objects.filter(in_qty__range=(date1,date2)).values('pt_no','loco_type')
            ob2=AxleMachining.objects.filter(out_qty__range=(date1,date2)).values('pt_no','loco_type')
            pt=[] 
            lt=[] 
            pto=[]
            lto=[]
            myval=[]
            myval1=[]
            final=[]
            unique_final=[]
            count=[]
            count1=[]
            c1=0
            c2=0

            len2=len(ob2)
            len1=len(ob1)
            for i in range(0,len(ob1)):
                pt.append(ob1[i]['pt_no'])
            for i in range(0,len(ob1)):
                lt.append(ob1[i]['loco_type'])
            for i in range (0,len(pt)):
                for j in range(0,len(pt)):
                    if(pt[i]==pt[j]):
                        c1=c1+1
                count.append(c1)
                c1=0
            for i in range (0,len(pt)):
                myval.append({'pt_no':pt[i], 'loco_type':lt[i], 'count1':count[i],'count2':'0'})
            
            for i in range(0,len(ob2)):
                pto.append(ob2[i]['pt_no'])
            
            for i in range(0,len(ob2)):
                lto.append(ob2[i]['loco_type'])
            
            for i in range (0,len(pto)):
                for j in range(0,len(pto)):
                    if(pto[i]==pto[j]):
                        c2=c2+1
                count1.append(c2)
                c2=0

            for i in range (0,len(pto)):
                myval1.append({'pt_no':pto[i], 'loco_type':lto[i],'count1':'0', 'count2':count1[i]})
            
            id=[]
            final=[]
            unique_final=[]
            c=0
            for i in range(len(myval1)):
                for j in range(len(myval)):
                    if myval1[i]['pt_no']==myval[j]['pt_no']:
                        final.append({'pt_no':pto[i], 'loco_type':lto[i],'count1':myval[j]['count1'], 'count2':count1[i]})
                        id.append(myval1[i]['pt_no'])
                        c=1
                        break
                if c==1:
                    c=0
                    continue
                else:
                    final.append({'pt_no':pto[i], 'loco_type':lto[i],'count1':'0', 'count2':count1[i]})
            
            for j in range(len(myval)):
                if  myval[j]['pt_no'] not in id:
                    final.append({'pt_no':pt[j], 'loco_type':lt[j], 'count1':count[j],'count2':'0'})

            for x in final:  
                if x not in unique_final: 
                    unique_final.append(x)
            context={
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':3,
            'dt1':dt1,
            'dt2':dt2,
            'len1':len1,
            'len2':len2,
            'unique_final':unique_final,
            }

        if bval=='Proceed3':
            dt1=request.POST.get('date3')
            dt2=request.POST.get('date4')
            ob1=AxleMachining.objects.filter(in_qty__range=(dt1,dt2)).values('sno','pt_no','axle_no','ustaxle_status','in_qty').order_by('in_qty')
            ob2=AxleMachining.objects.filter(out_qty__range=(dt1,dt2)).values('sno','pt_no','axle_no','ustaxle_status','out_qty').order_by('out_qty')
            context={
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':4,
            'ob1':ob1,
            'ob2':ob2,
            'dt1':dt1,'dt2':dt2,
            }
        if bval=='Proceed6':
            datel=request.POST.get('datea')
            s = datel.split('-')
            month = s[1]
            day = s[0]
            year = s[2]
            date =  year + "-" + month + "-" + day
            ob1=list(AxleMachining.objects.filter(dateaxle=date).values('axle_no','bo_no','date','loco_type','axle_heatcaseno','ustaxle','axlelength','journalaxle','throweraxle','wheelseataxle','gearseataxle','collaraxle','journal_surfacefinishGE','wheelseat_surfacefinishGE','gearseat_surfacefinishGE','journal_surfacefinishFE','wheelseat_surfacefinishFE','gearseat_surfacefinishFE','collaraxlende','wheelseataxlende','throweraxlende','journalaxlende','bearingaxle','abutmentaxle','dateaxle','inspector_nameaxle'))
            l=len(ob1)
            context={
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':8,
            'ob1':ob1,
            'datel':datel,
            }
        if bval=='Proceed7':
            datea1=request.POST.get('datea1')
            datea2=request.POST.get('datea2')
            s1 = datea1.split('-')
            s2 = datea2.split('-')
            month1 = s1[1]
            day1 = s1[0]
            year1 = s1[2]
            datell1 =  year1 + "-" + month1 + "-" + day1
            month2 = s2[1]
            day2 = s2[0]
            year2 = s2[2]
            datell2 =  year2 + "-" + month2 + "-" + day2
            ob1=list(AxleMachining.objects.filter(dateaxle__range=(datell1,datell2)).values('axle_no','bo_no','date','loco_type','axle_heatcaseno','ustaxle','axlelength','journalaxle','throweraxle','wheelseataxle','gearseataxle','collaraxle','journal_surfacefinishGE','wheelseat_surfacefinishGE','gearseat_surfacefinishGE','journal_surfacefinishFE','wheelseat_surfacefinishFE','gearseat_surfacefinishFE','collaraxlende','wheelseataxlende','throweraxlende','journalaxlende','bearingaxle','abutmentaxle','dateaxle','inspector_nameaxle'))
            ll=len(ob1)
            if ll>0:
                for i in range(0,ll):
                    dd=ob1[i]['dateaxle']
                    if dd!=None:
                        s=dd.split('-')
                        month=s[1]
                        day=s[2]
                        year=s[0]
                        dd2=day + '-' + month + '-' + year
                        ob1[i].update({'dateaxle':dd2})
                    else:
                        ob1[i].update({'dateaxle':None})
            l=len(ob1)
            context={
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':9,
            'ob1':ob1,
            'datea1':datea1, 
            'datea2':datea2,
            }
        if bval=='Proceed':
            axle_no=request.POST.get('axle_no')
            ob1=list(AxleMachining.objects.filter(axle_no=axle_no).values('axle_no','bo_no','date','loco_type','axle_heatcaseno','ustaxle','axlelength','journalaxle','throweraxle','wheelseataxle','gearseataxle','collaraxle','journal_surfacefinishGE','wheelseat_surfacefinishGE','gearseat_surfacefinishGE','journal_surfacefinishFE','wheelseat_surfacefinishFE','gearseat_surfacefinishFE','collaraxlende','wheelseataxlende','throweraxlende','journalaxlende','bearingaxle','abutmentaxle','dateaxle','inspector_nameaxle'))
            ax=ob1[0]['axle_no']
            l=len(ob1)
            if l>0:
                for i in range(0,l):
                    dd=ob1[i]['dateaxle']
                    if dd!=None:
                        s=dd.split('-')
                        month=s[1]
                        day=s[2]
                        year=s[0]
                        dd2=day + '-' + month + '-' + year
                        ob1[i].update({'dateaxle':dd2})
                    else:
                        ob1[i].update({'dateaxle':None})
            ob2=list(AxleWheelPressing.objects.filter(axle_no=axle_no).values('wheelno_de','wheelno_nde','inspect_date','inspector_name'))
            l1=len(ob2)
            if l1>0:
                for i in range(0,l1):
                    dd3=ob2[i]['inspect_date']
                    if dd3!=None:
                        s1=dd3.split('-')
                        month1=s1[1]
                        day1=s1[2]
                        year1=s1[0]
                        dd4=day1 + '-' + month1 + '-' + year1
                        ob2[i].update({'inspect_date':dd4})
                    else:
                        ob2[i].update({'inspect_date':None})
            context={
                'nav':nav,
                'subnav':subnav,
                'usermaster':usermaster,
                'ip':get_client_ip(request),
                'sub':4,
                'ob1':ob1,
                'ob2':ob2,
                'l':l,
                'ax':ax,
                'l1':l1
            }

    return render(request,'axlereport.html',context)



@login_required
@role_required(urlpass='/wheelreport/')
def wheelreport(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    a=0
    context={
        'a':a,
       'nav':nav,
       'subnav':subnav,
       'usermaster':usermaster,
       'ip':get_client_ip(request),
       }
    if request.method=="POST":
        bval=request.POST.get('btn')
        if bval=='Date Wise Report':
            context={
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':88,
            }
        if bval=='Date Range Report':
            context={
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':2,
            }
        if bval=='Wheel Report':
            context={
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':5,
            }
        if bval=='No. of Wheel (date wise)':
            context={
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':6,
            }
        if bval=='No. of Wheel (date range)':
            context={
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':7,
            }
        if bval=='Month Wise Detail':
            context={
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':10,
            }
        if bval=='Wheel Record of Loco Type (date wise)':
            context={
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':20,
            }
        if bval=='Wheel Record of Loco Type (date range)':
            context={
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':22,
            }
        if bval=='Proceed1':
            pt=[]
            pto=[]
            lt=[]
            lto=[]
            count=[]
            count1=[]
            myval=[]
            myval1=[]
            unique_myval=[]
            unique_myval1=[]
            c1=0
            c2=0
            dt=request.POST.get('datew')
            ob1=list(WheelMachining.objects.filter(in_qty=dt).values('pt_no','loco_type','wheel_no'))
            ob2=list(WheelMachining.objects.filter(out_qty=dt).values('pt_no','loco_type','wheel_no'))   
            len2=len(ob2)
            len1=len(ob1)
            for i in range(0,len(ob1)):
                pt.append(ob1[i]['pt_no'])
            for i in range(0,len(ob1)):
                lt.append(ob1[i]['loco_type'])
            for i in range (0,len(pt)):
                for j in range(0,len(pt)):
                    if(pt[i]==pt[j]):
                        c1=c1+1
                count.append(c1)
                c1=0
            for i in range (0,len(pt)):
                myval.append({'pt_no':pt[i], 'loco_type':lt[i], 'count1':count[i],'count2':'0'})

            for i in range(0,len(ob2)):
                pto.append(ob2[i]['pt_no'])
            
            for i in range(0,len(ob2)):
                lto.append(ob2[i]['loco_type'])
            
            for i in range (0,len(pto)):
                for j in range(0,len(pto)):
                    if(pto[i]==pto[j]):
                        c2=c2+1
                count1.append(c2)
                c2=0

            for i in range (0,len(pto)):
                myval1.append({'pt_no':pto[i], 'loco_type':lto[i],'count1':'0', 'count2':count1[i]})
            id=[]
            final=[]
            unique_final=[]
            c=0
            for i in range(len(myval1)):
                for j in range(len(myval)):
                    if myval1[i]['pt_no']==myval[j]['pt_no']:
                        final.append({'pt_no':pto[i], 'loco_type':lto[i],'count1':myval[j]['count1'], 'count2':count1[i]})
                        id.append(myval1[i]['pt_no'])
                        c=1
                        break
                if c==1:
                    c=0
                    continue
                else:
                    final.append({'pt_no':pto[i], 'loco_type':lto[i],'count1':'0', 'count2':count1[i]})
            
            for j in range(len(myval)):
                if  myval[j]['pt_no'] not in id:
                    final.append({'pt_no':pt[j], 'loco_type':lt[j], 'count1':count[j],'count2':'0'})

            for x in final:  
                if x not in unique_final: 
                    unique_final.append(x)
            
            context={
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':1,
            'dt':dt,
            'len1':len1,
            'len2':len2,
            'unique_final':unique_final,
            }
        if bval=='Proceed2':
            dt1=request.POST.get('date1')
            dt2=request.POST.get('date2')
            ob1=WheelMachining.objects.filter(in_qty__range=(dt1,dt2)).values('pt_no','loco_type')
            ob2=WheelMachining.objects.filter(out_qty__range=(dt1,dt2)).values('pt_no','loco_type')
            pt=[] 
            lt=[] 
            pto=[]
            lto=[]
            myval=[]
            myval1=[]
            final=[]
            unique_final=[]
            count=[]
            count1=[]
            c1=0
            c2=0

            len2=len(ob2)
            len1=len(ob1)
            for i in range(0,len(ob1)):
                pt.append(ob1[i]['pt_no'])
            for i in range(0,len(ob1)):
                lt.append(ob1[i]['loco_type'])
            for i in range (0,len(pt)):
                for j in range(0,len(pt)):
                    if(pt[i]==pt[j]):
                        c1=c1+1
                count.append(c1)
                c1=0
            for i in range (0,len(pt)):
                myval.append({'pt_no':pt[i], 'loco_type':lt[i], 'count1':count[i],'count2':'0'})

            for i in range(0,len(ob2)):
                pto.append(ob2[i]['pt_no'])
            
            for i in range(0,len(ob2)):
                lto.append(ob2[i]['loco_type'])
            
            for i in range (0,len(pto)):
                for j in range(0,len(pto)):
                    if(pto[i]==pto[j]):
                        c2=c2+1
                count1.append(c2)
                c2=0

            for i in range (0,len(pto)):
                myval1.append({'pt_no':pto[i], 'loco_type':lto[i],'count1':'0', 'count2':count1[i]})
            id=[]
            final=[]
            unique_final=[]
            c=0
            for i in range(len(myval1)):
                for j in range(len(myval)):
                    if myval1[i]['pt_no']==myval[j]['pt_no']:
                        final.append({'pt_no':pto[i], 'loco_type':lto[i],'count1':myval[j]['count1'], 'count2':count1[i]})
                        id.append(myval1[i]['pt_no'])
                        c=1
                        break
                if c==1:
                    c=0
                    continue
                else:
                    final.append({'pt_no':pto[i], 'loco_type':lto[i],'count1':'0', 'count2':count1[i]})
            
            for j in range(len(myval)):
                if  myval[j]['pt_no'] not in id:
                    final.append({'pt_no':pt[j], 'loco_type':lt[j], 'count1':count[j],'count2':'0'})

            for x in final:  
                if x not in unique_final: 
                    unique_final.append(x)
            context={
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':3,
            'dt1':dt1,
            'dt2':dt2,
            'len1':len1,
            'len2':len2,
            'unique_final':unique_final,
            }
        if bval=='Proceed':
            wheel_no=request.POST.get('wheel_no')
            ob1=list(WheelMachining.objects.filter(wheel_no=wheel_no).values('wheel_no','loco_type','date','bo_no','wheel_heatcaseno','ustwhl','hub_lengthwhl','tread_diawhl','rim_thicknesswhl','bore_diawhl','inspector_namewhl','datewhl'))
            l=len(ob1)
            ob2=list(AxleWheelPressing.objects.filter(Q(wheelno_de=wheel_no)|Q(wheelno_nde=wheel_no)).values('axle_no','inspect_date','inspector_name'))
            
            context={
                'nav':nav,
                'subnav':subnav,
                'usermaster':usermaster,
                'ip':get_client_ip(request),
                'sub':4,
                'ob1':ob1,
                'ob2':ob2,
                'l':l,
            }

        if bval=='Proceed6':
            dt1=request.POST.get('datea')
            ob1=WheelMachining.objects.filter(in_qty=dt1).values('sno','wheel_no','in_qty').order_by('in_qty')
            ob2=WheelMachining.objects.filter(out_qty=dt1).values('sno','wheel_no','out_qty').order_by('out_qty')
            l1=len(ob1)
            l2=len(ob2)
            context={
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':8,
            'ob1':ob1,
            'ob2':ob2,
            'dt1':dt1,
            'l1':l1,'l2':l2,
            }
        if bval=='Proceed7':
            dt1=request.POST.get('datea1')
            dt2=request.POST.get('datea2')
            ob1=WheelMachining.objects.filter(in_qty__range=(dt1,dt2)).values('sno','wheel_no','in_qty').order_by('in_qty')
            ob2=WheelMachining.objects.filter(out_qty__range=(dt1,dt2)).values('sno','wheel_no','out_qty').order_by('out_qty')
            l1=len(ob1)
            l2=len(ob2)
            context={
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':9,
            'ob1':ob1,
            'ob2':ob2,
            'dt1':dt1,'dt2':dt2,
            'l1':l1,'l2':l2,
            }
        if bval=='Proceed10':
            mon=request.POST.get('month')
            ob1=WheelMachining.objects.filter(date__contains=mon).values('sno','wheel_no','in_qty','out_qty','pt_no','date').order_by('date')
            context={
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':11,
            'ob1':ob1,
            'mon':mon,
            }
        if bval=='Proceed20':
            a=1
            datel=request.POST.get('datel')
            ob1=list(WheelMachining.objects.filter(datewhl=datel).values('wheel_no','wheel_heatcaseno','ustwhl','hub_lengthwhl','tread_diawhl','rim_thicknesswhl','bore_diawhl','inspector_namewhl','datewhl'))
            context={
            'a':a,
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':21,
            'ob1':ob1,
            'datel':datel,   
            }
        if bval=='Proceed22':
            datell1=request.POST.get('datell1')
            datell2=request.POST.get('datell2')
            ob1=list(WheelMachining.objects.filter(datewhl__range=(datell1,datell2)).values('wheel_no','wheel_heatcaseno','ustwhl','hub_lengthwhl','tread_diawhl','rim_thicknesswhl','bore_diawhl','inspector_namewhl','datewhl'))
            context={
            'a':a,
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':23,
            'ob1':ob1,
            'datell1':datell1, 
            'datell2':datell2,  
            }
            

    return render(request,'wheelreport.html',context)





@login_required
@role_required(urlpass='/bogiereport/')
def bogiereport(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    context={
       'nav':nav,
       'subnav':subnav,
       'usermaster':usermaster,
       'ip':get_client_ip(request),
       }
    if request.method=="POST":
        bval=request.POST.get('btn')
        if bval=='Date Wise Report':
            context={
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':0,
            }
        if bval=='Date Range Report':
            context={
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':2,
            }
        if bval=='Month Wise Detail':
            context={
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':10,
            }
        if bval=='Proceed1':
            dt=request.POST.get('datew')
            ob1=BogieAssembly.objects.filter(in_date=dt).values('sno','pt_no')
            ob2=BogieAssembly.objects.filter(out_qty=dt).values('sno','pt_no')
            context={
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':1,
            'ob1':ob1,
            'ob2':ob2,
            'dt':dt,
            }
        if bval=='Proceed2':
            dt1=request.POST.get('date1')
            dt2=request.POST.get('date2')
            ob1=BogieAssembly.objects.filter(in_date__range=(dt1,dt2)).values('sno','pt_no','in_date').order_by('in_date')
            ob2=BogieAssembly.objects.filter(out_qty__range=(dt1,dt2)).values('sno','pt_no','out_qty').order_by('out_qty')
            context={
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':3,
            'ob1':ob1,
            'ob2':ob2,
            'dt1':dt1,'dt2':dt2,
            }
        if bval=='Proceed10':
            mon=request.POST.get('month')
            ob1=BogieAssembly.objects.filter(date__contains=mon).values('sno','axle_no','in_qty','out_qty','pt_no','date').order_by('date')
            context={
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':11,
            'ob1':ob1,
            'mon':mon,
            }

    return render(request,'bogiereport.html',context)



@login_required
@role_required(urlpass='/pinionreport/')
def pinionreport(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    context={
       'nav':nav,
       'subnav':subnav,
       'usermaster':usermaster,
       'ip':get_client_ip(request),
       }
    if request.method=="POST":
        bval=request.POST.get('btn')
        if bval=='Date Wise Report':
            context={
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':0,
            }
        if bval=='Date Range Report':
            context={
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':2,
            }
        if bval=="Record of Loco Type (date wise)":
            context={
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':4,
            }
        if bval=='Record of Loco Type (date range)':
            context={
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':10,
            }
        if bval=='Pinion Pressing Detail':
            context={
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':12,
            }
        if bval=='Proceed1':
            pt=[]
            pto=[]
            lt=[]
            lto=[]
            count=[]
            count1=[]
            myval=[]
            myval1=[]
            unique_myval=[]
            unique_myval1=[]
            c1=0
            c2=0
            dt=request.POST.get('datew')
            ob1=list(PinionPressing.objects.filter(in_qty=dt).values('loco_type'))
            ob2=list(PinionPressing.objects.filter(out_qty=dt).values('loco_type'))   
            len2=len(ob2)
            len1=len(ob1)
            for i in range(0,len(ob1)):
                lt.append(ob1[i]['loco_type'])
            for i in range (0,len(lt)):
                for j in range(0,len(lt)):
                    if(lt[i]==lt[j]):
                        c1=c1+1
                count.append(c1)
                c1=0
            for i in range (0,len(lt)):
                myval.append({'loco_type':lt[i], 'count1':count[i],'count2':'0'})

            for i in range(0,len(ob2)):
                lto.append(ob2[i]['loco_type'])
            
            for i in range (0,len(lto)):
                for j in range(0,len(lto)):
                    if(lto[i]==lto[j]):
                        c2=c2+1
                count1.append(c2)
                c2=0
            
            for i in range (0,len(lto)):
                 myval1.append({'loco_type':lto[i],'count1':'0', 'count2':count1[i]})
            id=[]
            final=[]
            unique_final=[]
            c=0
            for i in range(len(myval1)):
                for j in range(len(myval)):
                    if myval1[i]['loco_type']==myval[j]['loco_type']:
                        final.append({'loco_type':lto[i],'count1':myval[j]['count1'], 'count2':count1[i]})
                        id.append(myval1[i]['loco_type'])
                        c=1
                        break
                if c==1:
                    c=0
                    continue
                else:
                    final.append({'loco_type':lto[i],'count1':'0', 'count2':count1[i]})
            
            for j in range(len(myval)):
                if  myval[j]['loco_type'] not in id:
                    final.append({'loco_type':lt[j], 'count1':count[j],'count2':'0'})

            for x in final:  
                if x not in unique_final: 
                    unique_final.append(x)

            context={
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':1,
            'dt':dt,
            'len1':len1,
            'len2':len2,
            'unique_final':unique_final,
            }
        if bval=='Proceed2':
            pt=[]
            pto=[]
            lt=[]
            lto=[]
            count=[]
            count1=[]
            myval=[]
            myval1=[]
            unique_myval=[]
            unique_myval1=[]
            c1=0
            c2=0
            dt1=request.POST.get('date1')
            dt2=request.POST.get('date2')
            ob1=list(PinionPressing.objects.filter(in_qty__range=(dt1,dt2)).values('loco_type'))
            ob2=list(PinionPressing.objects.filter(out_qty__range=(dt1,dt2)).values('loco_type'))
            len2=len(ob2)
            len1=len(ob1)
            for i in range(0,len(ob1)):
                lt.append(ob1[i]['loco_type'])
            for i in range (0,len(lt)):
                for j in range(0,len(lt)):
                    if(lt[i]==lt[j]):
                        c1=c1+1
                count.append(c1)
                c1=0
            for i in range (0,len(lt)):
                myval.append({'loco_type':lt[i], 'count1':count[i],'count2':'0'})

            for i in range(0,len(ob2)):
                lto.append(ob2[i]['loco_type'])
            
            for i in range (0,len(lto)):
                for j in range(0,len(lto)):
                    if(lto[i]==lto[j]):
                        c2=c2+1
                count1.append(c2)
                c2=0
            
            for i in range (0,len(lto)):
                 myval1.append({'loco_type':lto[i],'count1':'0', 'count2':count1[i]})
            id=[]
            final=[]
            unique_final=[]
            c=0
            for i in range(len(myval1)):
                for j in range(len(myval)):
                    if myval1[i]['loco_type']==myval[j]['loco_type']:
                        final.append({'loco_type':lto[i],'count1':myval[j]['count1'], 'count2':count1[i]})
                        id.append(myval1[i]['loco_type'])
                        c=1
                        break
                if c==1:
                    c=0
                    continue
                else:
                    final.append({'loco_type':lto[i],'count1':'0', 'count2':count1[i]})
            
            for j in range(len(myval)):
                if  myval[j]['loco_type'] not in id:
                    final.append({'loco_type':lt[j], 'count1':count[j],'count2':'0'})

            for x in final:  
                if x not in unique_final: 
                    unique_final.append(x)

            context={
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':1,
            'dt1':dt1,
            'dt2':dt2,
            'len1':len1,
            'len2':len2,
            'unique_final':unique_final,
            }
        if bval=='Proceed3':
            dt=request.POST.get('datea')
            ob1=PinionPressing.objects.filter(inspect_date=dt).all()
            l=len(ob1)
            context={
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':5,
            'ob1':ob1,
            'dt':dt,
            'l':l
            }
        if bval=='Proceed10':
            dt1=request.POST.get('datell1')
            dt2=request.POST.get('datell2')
            ob1=PinionPressing.objects.filter(inspect_date__range=(dt1,dt2)).all()
            l=len(ob1)
            context={
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':11,
            'ob1':ob1,
            'dt1':dt1,
            'dt2':dt2,
            'l':l,
            }
        if bval=='Proceed':
            axle_no=request.POST.get('axle_no')
            ob1=PinionPressing.objects.filter(axle_no=axle_no,inspection_status=True).all()
            l1=len(ob1)
            ob2=PinionPressing.objects.filter(axle_no=axle_no,inspection_status=False).all()
            l2=len(ob2)
            context={
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':13,
            'ob1':ob1,
            'ob2':ob2,
            'axle_no':axle_no,
            'l1':l1,
            'l2':l2
            }

    return render(request,'pinionreport.html',context)






@login_required
@role_required(urlpass='/axlepressreport/')
def axlepressreport(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    context={
       'nav':nav,
       'subnav':subnav,
       'usermaster':usermaster,
       'ip':get_client_ip(request),
       }
    if request.method=="POST":
        bval=request.POST.get('btn')
        if bval=='Date Wise Report':
            context={
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':0,
            }
        if bval=='Date Range Report':
            context={
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':2,
            }
        if bval=="Axle Report":
            context={
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':4,
            }
        if bval=='Record of Loco Type (date wise)':
            context={
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':10,
            }
        if bval=='Record of Loco Type (date range)':
            context={
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':12,
            }
        if bval=='Proceed1':
            pt=[]
            pto=[]
            lt=[]
            lto=[]
            count=[]
            count1=[]
            myval=[]
            myval1=[]
            unique_myval=[]
            unique_myval1=[]
            c1=0
            c2=0
            dt=request.POST.get('datew')
            ob1=list(AxleWheelPressing.objects.filter(in_qty=dt).values('pt_no','loco_type','axle_no'))
            ob2=list(AxleWheelPressing.objects.filter(out_qty=dt).values('pt_no','loco_type','axle_no'))   
            len2=len(ob2)
            len1=len(ob1)
            for i in range(0,len(ob1)):
                pt.append(ob1[i]['pt_no'])
            for i in range(0,len(ob1)):
                lt.append(ob1[i]['loco_type'])
            for i in range (0,len(pt)):
                for j in range(0,len(pt)):
                    if(pt[i]==pt[j]):
                        c1=c1+1
                count.append(c1)
                c1=0
            for i in range (0,len(pt)):
                myval.append({'pt_no':pt[i], 'loco_type':lt[i], 'count1':count[i],'count2':'0'})


            for i in range(0,len(ob2)):
                pto.append(ob2[i]['pt_no'])
            
            for i in range(0,len(ob2)):
                lto.append(ob2[i]['loco_type'])
            
            for i in range (0,len(pto)):
                for j in range(0,len(pto)):
                    if(pto[i]==pto[j]):
                        c2=c2+1
                count1.append(c2)
                c2=0

            for i in range (0,len(pto)):
                myval1.append({'pt_no':pto[i], 'loco_type':lto[i],'count1':'0', 'count2':count1[i]})
            
            id=[]
            final=[]
            unique_final=[]
            c=0
            for i in range(len(myval1)):
                for j in range(len(myval)):
                    if myval1[i]['pt_no']==myval[j]['pt_no']:
                        final.append({'pt_no':pto[i], 'loco_type':lto[i],'count1':myval[j]['count1'], 'count2':count1[i]})
                        id.append(myval1[i]['pt_no'])
                        c=1
                        break
                if c==1:
                    c=0
                    continue
                else:
                    final.append({'pt_no':pto[i], 'loco_type':lto[i],'count1':'0', 'count2':count1[i]})
            
            for j in range(len(myval)):
                if  myval[j]['pt_no'] not in id:
                    final.append({'pt_no':pt[j], 'loco_type':lt[j], 'count1':count[j],'count2':'0'})

            for x in final:  
                if x not in unique_final: 
                    unique_final.append(x)
            
            context={
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':1,
            'dt':dt,
            'len1':len1,
            'len2':len2,
            'unique_final':unique_final,
            }
        if bval=='Proceed2':
            dt1=request.POST.get('date1')
            dt2=request.POST.get('date2')
            ob1=AxleWheelPressing.objects.filter(in_qty__range=(dt1,dt2)).values('pt_no','loco_type')
            ob2=AxleWheelPressing.objects.filter(out_qty__range=(dt1,dt2)).values('pt_no','loco_type')
            pt=[] 
            lt=[] 
            pto=[]
            lto=[]
            myval=[]
            myval1=[]
            final=[]
            unique_final=[]
            count=[]
            count1=[]
            c1=0
            c2=0

            len2=len(ob2)
            len1=len(ob1)
            for i in range(0,len(ob1)):
                pt.append(ob1[i]['pt_no'])
            for i in range(0,len(ob1)):
                lt.append(ob1[i]['loco_type'])
            for i in range (0,len(pt)):
                for j in range(0,len(pt)):
                    if(pt[i]==pt[j]):
                        c1=c1+1
                count.append(c1)
                c1=0
            for i in range (0,len(pt)):
                myval.append({'pt_no':pt[i], 'loco_type':lt[i], 'count1':count[i],'count2':'0'})

            for i in range(0,len(ob2)):
                pto.append(ob2[i]['pt_no'])
            
            for i in range(0,len(ob2)):
                lto.append(ob2[i]['loco_type'])
            
            for i in range (0,len(pto)):
                for j in range(0,len(pto)):
                    if(pto[i]==pto[j]):
                        c2=c2+1
                count1.append(c2)
                c2=0

            for i in range (0,len(pto)):
                myval1.append({'pt_no':pto[i], 'loco_type':lto[i],'count1':'0', 'count2':count1[i]})
            id=[]
            final=[]
            unique_final=[]
            c=0
            for i in range(len(myval1)):
                for j in range(len(myval)):
                    if myval1[i]['pt_no']==myval[j]['pt_no']:
                        final.append({'pt_no':pto[i], 'loco_type':lto[i],'count1':myval[j]['count1'], 'count2':count1[i]})
                        id.append(myval1[i]['pt_no'])
                        c=1
                        break
                if c==1:
                    c=0
                    continue
                else:
                    final.append({'pt_no':pto[i], 'loco_type':lto[i],'count1':'0', 'count2':count1[i]})
            
            for j in range(len(myval)):
                if  myval[j]['pt_no'] not in id:
                    final.append({'pt_no':pt[j], 'loco_type':lt[j], 'count1':count[j],'count2':'0'})

            for x in final:  
                if x not in unique_final: 
                    unique_final.append(x)
            context={
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':3,
            'dt1':dt1,
            'dt2':dt2,
            'len1':len1,
            'len2':len2,
            'unique_final':unique_final,
            }
        if bval=='Proceed':
            axle_no=request.POST.get('axle_no')
            ob1=list(AxleWheelPressing.objects.filter(axle_no=axle_no).values('dispatch_to'))
            l=len(ob1)
            ob3=list(AxleWheelPressing.objects.filter(axle_no=axle_no).values('date','loco_type','axle_no','wheelno_de','wheelno_nde','axle_no','bo_no','inspect_date','inspector_name'))
            c=ob1[0]['dispatch_to']
            ob2=[]
            ll1=0
            ll2=0
            if l>0 and c=="Inspected" :
                ob2=list(AxleWheelPressing.objects.filter(axle_no=axle_no).values('loco_type','axle_no','wheelno_de','wheelno_nde','bullgear_make','bullgear_no','wheel_de_make','wheel_nde_make','wheel_nde_pressure','axle_make','msu_unit_no','bullgear_pressure','msu_unit_make','axle_box_no','axle_box_make','axle_box_clearance','suspension_bearing_de_no','suspension_bearing_de_make','suspension_bearing_nde_no','suspension_bearing_nde_make','cru_bearing_no_de','cru_bearing_make_de','cru_bearing_pressure_de','cru_bearing_no_nde','cru_bearing_make_nde','cru_bearing_pressure_nde','inspect_date','inspector_name'))
                ll1=len(ob2)
                ll2=0
            elif l>0 and c=="HHP_Inspected" :
                ob2=list(AxleWheelPressing.objects.filter(axle_no=axle_no).values('loco_type','axle_no','wheelno_de','wheelno_nde','bullgear_make','bullgear_no','wheel_de_make','wheel_nde_make','wheel_nde_pressure','axle_make','msu_unit_no','bullgear_pressure','msu_unit_make','axle_box_no','axle_box_make','axle_box_clearance','suspension_bearing_de_no','suspension_bearing_de_make','suspension_bearing_nde_no','suspension_bearing_nde_make','cru_bearing_no_de','cru_bearing_make_de','cru_bearing_pressure_de','cru_bearing_no_nde','cru_bearing_make_nde','cru_bearing_pressure_nde','journal_no_de','journal_make_de','journal_no_nde','journal_make_nde','inspect_date','inspector_name'))
                ll2=len(ob2)
                ll1=0
            context={
                'nav':nav,
                'subnav':subnav,
                'usermaster':usermaster,
                'ip':get_client_ip(request),
                'sub':11,
                'ob1':ob1,
                'ob2':ob2,
                'ob3':ob3,
                'l':l,
                'll1':ll1,
                'll2':ll2,
            }
        if bval=='Proceed3':
            dt1=request.POST.get('datel1')
            dt2=request.POST.get('datel2')
            ob1=AxleWheelPressing.objects.filter(inspect_date__range=(dt1,dt2)).values('loco_type','axle_no','wheelno_de','wheelno_nde','bullgear_make','bullgear_no','wheel_de_make','wheel_nde_make','wheel_nde_pressure','axle_make','msu_unit_no','bullgear_pressure','msu_unit_make','axle_box_no','axle_box_make','axle_box_clearance','suspension_bearing_de_no','suspension_bearing_de_make','suspension_bearing_nde_no','suspension_bearing_nde_make','cru_bearing_no_de','cru_bearing_make_de','cru_bearing_pressure_de','cru_bearing_no_nde','cru_bearing_make_nde','cru_bearing_pressure_nde','journal_no_de','journal_make_de','journal_no_nde','journal_make_nde','inspect_date','inspector_name')
            l=len(ob1)
            context={
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':5,
            'ob1':ob1,
            'dt1':dt1,
            'dt2':dt2,
            'l':l,
            }
        if bval=='Proceed10':
            dt1=request.POST.get('datea')
            ob1=list(AxleWheelPressing.objects.filter(inspect_date=dt1).values('loco_type','axle_no','wheelno_de','wheelno_nde','bullgear_make','bullgear_no','wheel_de_make','wheel_nde_make','wheel_nde_pressure','axle_make','msu_unit_no','bullgear_pressure','msu_unit_make','axle_box_no','axle_box_make','axle_box_clearance','suspension_bearing_de_no','suspension_bearing_de_make','suspension_bearing_nde_no','suspension_bearing_nde_make','cru_bearing_no_de','cru_bearing_make_de','cru_bearing_pressure_de','cru_bearing_no_nde','cru_bearing_make_nde','cru_bearing_pressure_nde','journal_no_de','journal_make_de','journal_no_nde','journal_make_nde','inspect_date','inspector_name'))
            l=len(ob1)
            context={
            'nav':nav,
            'subnav':subnav,
            'usermaster':usermaster,
            'ip':get_client_ip(request),
            'sub':8,
            'ob1':ob1,
            'dt1':dt1,
            'l':l,
            }
    return render(request,'axlepress.html',context)



@login_required
@role_required(urlpass='/mgrview/')
def mgrview(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    if "Superuser" in rolelist:
        tm=shop_section.objects.all()
        tmp=[]
        for on in tm:
            tmp.append(on.section_code)
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles':tmp
        }
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):
            req = ms_tools_master.objects.all().filter(shop_code=rolelist[i]).values('instrument_number').distinct()
            instrument_number = instrument_number | req
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'instrument_number':instrument_number,
            'nav':nav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist,
            'subnav':subnav,
        }
        
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'nav':nav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist,
            'subnav':subnav,
        }
    if request.method == "POST":
        
        submitvalue = request.POST.get('proceed')
        if submitvalue=='Proceed':
            
            shop_sec = request.POST.get('shop_sec')
            instrument_number = request.POST.get('ins_no')
            obj = ms_tools_master.objects.filter(shop_code=shop_sec,instrument_number=instrument_number).values('calibration_frequency','employee','user_id').distinct()
            obj1 = Mgr.objects.filter(instrument_number=instrument_number).values('tool_des','type_mme','least_count')
            noprint=0
            leng = obj.count()
            leng1 = obj1.count()
            if len(obj1) == 0:
                noprint=1
            
            context = {
                        'obj': obj,
                        'obj1': obj1,
                        'len': leng,
                        'len1': leng1,
                        'shop_sec': shop_sec,
                        'instrument_number':instrument_number,
                        'sub' : 1,
                        'nav':nav,
                        'ip':get_client_ip(request),  
                        'subnav':subnav,
            }
            if "Superuser" in rolelist:
                tm=shop_section.objects.all()
                tmp=[]
                for on in tm:
                    tmp.append(on.section_code)
                context={
                    
                    'lenm' :2,
                    'nav':nav,
                    'subnav':subnav,
                    'ip':get_client_ip(request),
                    'roles':tmp,
                    'obj': obj,
                    'obj1': obj1,
                    'len': leng,
                    'len1': leng1,
                    'shop_sec': shop_sec,
                    'instrument_number':instrument_number,
                    'sub' : 1,
                    'nav':nav,
                    'ip':get_client_ip(request),  
                    'subnav':subnav,
                }
            elif(len(rolelist)==1):
                for i in range(0,len(rolelist)):
                    req = ms_tools_master.objects.all().filter(shop_code=rolelist[i]).values('instrument_number').distinct()
                    instrument_number = instrument_number | req
                context = {
                    
                    'lenm' :len(rolelist),
                    'instrument_number':instrument_number,
                    'nav':nav,
                    'ip':get_client_ip(request),
                    'usermaster':usermaster,
                    'roles' :rolelist,
                    'subnav':subnav,
                    'obj': obj,
                    'obj1': obj1,
                    'len': leng,
                    'len1': leng1,
                    'shop_sec': shop_sec,
                    'instrument_number':instrument_number,
                    'sub' : 1,
                    'nav':nav,
                    'ip':get_client_ip(request),  
                    'subnav':subnav,
                }
        
            elif(len(rolelist)>1):
                context = {
                    
                    'lenm' :len(rolelist),
                    'nav':nav,
                    'ip':get_client_ip(request),
                    'usermaster':usermaster,
                    'roles' :rolelist,
                    'subnav':subnav,
                    'obj': obj,
                    'obj1': obj1,
                    'len': leng,
                    'len1': leng1,
                    'shop_sec': shop_sec,
                    'instrument_number':instrument_number,
                    'sub' : 1,
                    'nav':nav,
                    'ip':get_client_ip(request),  
                    'subnav':subnav,
                }
        if submitvalue =='Submit':
                
                leng=request.POST.get('len')
                now = datetime.datetime.now()
                shop_sec = request.POST.get('shop_sec')
                instrument_number = request.POST.get('ins_no')
                tool_des = request.POST.get('tool_des')
                type_mme = request.POST.get('type_mme')
                least_count = request.POST.get('least_count')
                calibration_frequency = request.POST.get('calibration_frequency')
                employee = request.POST.get('employee')
                mgrobj = Mgr.objects.filter(shop_sec=shop_sec,instrument_number=instrument_number).distinct()
                if len(mgrobj) == 0:
                    
                    Mgr.objects.create(login_id=request.user,shop_sec=str(shop_sec),instrument_number=str(instrument_number),tool_des=str(tool_des),type_mme=str(type_mme),
                    least_count=str(least_count),calibration_frequency=str(calibration_frequency),employee=str(employee),last_modified=str(now))
                
                else:
                    Mgr.objects.filter(shop_sec=shop_sec,instrument_number=instrument_number).update(tool_des=str(tool_des),type_mme=str(type_mme),
                    least_count=str(least_count),calibration_frequency=str(calibration_frequency),employee=str(employee),last_modified=str(now))

                instrument_number=Mgr.objects.all().values('instrument_number').distinct()

        if submitvalue =='Proceed to Report':
            return mgrreports(request)
        

    return render(request,"mgrview.html",context)

def mgrgetinsno(request):
    if request.method == "GET" and request.is_ajax():
        
        shop_sec = request.GET.get('shop_sec')
        instrument_number=list(ms_tools_master.objects.filter(shop_code=shop_sec).values('instrument_number').distinct())
        return JsonResponse(instrument_number, safe = False)
    return JsonResponse({"success":False}, status=400)

@login_required
@role_required(urlpass='/mgrview/')
def mgrreports(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    if "Superuser" in rolelist:
        tm=shop_section.objects.all()
        tmp=[]
        for on in tm:
            tmp.append(on.section_code)
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles':tmp
        }
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):
            req = ms_tools_master.objects.all().filter(shop_code=rolelist[i]).values('instrument_number').distinct()
            instrument_number = instrument_number | req
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'instrument_number':instrument_number,
            'nav':nav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist,
            'subnav':subnav,
        }
        
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'nav':nav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist,
            'subnav':subnav,
        }
    if request.method == "POST":
        
        submitvalue = request.POST.get('proceed')
        if submitvalue=='Proceed to Report':
            
            shop_sec = request.POST.get('shop_sec')
            instrument_number = request.POST.get('ins_no')
            obj = Mgr.objects.filter(shop_sec=shop_sec).values('instrument_number').distinct()
            obj1 = mgrreport.objects.filter(shop_sec=shop_sec,instrument_number=instrument_number).values('tool_des','range','periodicity_check','date_calibration','calibration_status','calibration_due_date')
            noprint=0
            leng = obj.count()
            leng1 = obj1.count()
            if len(obj1) == 0:
                noprint=1
            
            context = {
                        'obj': obj,
                        'obj1': obj1,
                        'len': leng,
                        'len1': leng1,
                        'shop_sec': shop_sec,
                        'instrument_number':instrument_number,
                        'sub' : 1,
                        'noprint':noprint,
                        'nav':nav,
                        'ip':get_client_ip(request),  
                        'subnav':subnav,
            }
            if "Superuser" in rolelist:
                tm=shop_section.objects.all()
                tmp=[]
                for on in tm:
                    tmp.append(on.section_code)
                context={
                    
                    'lenm' :2,
                    'nav':nav,
                    'subnav':subnav,
                    'ip':get_client_ip(request),
                    'roles':tmp,
                    'obj': obj,
                    'obj1': obj1,
                    'len': leng,
                    'len1': leng1,
                    'shop_sec': shop_sec,
                    'instrument_number':instrument_number,
                    'sub' : 1,
                    'noprint':noprint,
                    'nav':nav,
                    'ip':get_client_ip(request),  
                    'subnav':subnav,
                }
            elif(len(rolelist)==1):
                for i in range(0,len(rolelist)):
                    req = ms_tools_master.objects.all().filter(shop_code=rolelist[i]).values('instrument_number').distinct()
                    instrument_number = instrument_number | req
                context = {
                    
                    'lenm' :len(rolelist),
                    'instrument_number':instrument_number,
                    'nav':nav,
                    'ip':get_client_ip(request),
                    'usermaster':usermaster,
                    'roles' :rolelist,
                    'subnav':subnav,
                    'obj': obj,
                    'obj1': obj1,
                    'len': leng,
                    'len1': leng1,
                    'shop_sec': shop_sec,
                    'instrument_number':instrument_number,
                    'sub' : 1,
                    'noprint':noprint,
                    'nav':nav,
                    'ip':get_client_ip(request),  
                    'subnav':subnav,
                }
        
            elif(len(rolelist)>1):
                context = {
                    
                    'lenm' :len(rolelist),
                    'nav':nav,
                    'ip':get_client_ip(request),
                    'usermaster':usermaster,
                    'roles' :rolelist,
                    'subnav':subnav,
                    'obj': obj,
                    'obj1': obj1,
                    'len': leng,
                    'len1': leng1,
                    'shop_sec': shop_sec,
                    'instrument_number':instrument_number,
                    'sub' : 1,
                    'noprint':noprint,
                    'nav':nav,
                    'ip':get_client_ip(request),  
                    'subnav':subnav,
                }
    if request.method == "POST":
        
        submitvalue = request.POST.get('proceed')
        if submitvalue=='Submit':
            now = datetime.datetime.now()
            shop_sec = request.POST.get('shop_sec')
            instrument_number = request.POST.get('ins_no')
            tool_des = request.POST.get('tool_des')
            range = request.POST.get('range')
            periodicity_check = request.POST.get('periodicity_check')
            date_calibration = request.POST.get('date_calibration')
            calibration_status = request.POST.get('calibration_status')
            calibration_due_date = request.POST.get('calibration_due_date')
            

            mgrobj1 = mgrreport.objects.filter(shop_sec=shop_sec,instrument_number=instrument_number).distinct()
            if len(mgrobj1) == 0:
                    
                    mgrreport.objects.create(login_id=request.user,range=str(range),tool_des=str(tool_des),periodicity_check=str(periodicity_check),shop_sec=str(shop_sec),instrument_number=str(instrument_number),
                    date_calibration=str(date_calibration),calibration_status=str(calibration_status),last_modified=str(now),calibration_due_date=str(calibration_due_date))

            else:

                    mgrreport.objects.filter(shop_sec=shop_sec,instrument_number=instrument_number).update(tool_des=str(tool_des),range=str(range),periodicity_check=str(periodicity_check),
                    date_calibration=str(date_calibration),login_id=request.user,last_modified=str(now),calibration_status=str(calibration_status),calibration_due_date=str(calibration_due_date))

            instrument_number=Mgr.objects.all().values('instrument_number').distinct()

        

    return render(request,"mgrREPORT.html",context)





def mg21getstaff(request):
    if request.method == "GET" and request.is_ajax():

        shop_sec = request.GET.get('shop_sec')

        staff = Shemp.objects.filter(shopsec=shop_sec).values('staff_no').exclude(staff_no__isnull=True).distinct()
        staff_no = list(staff)
        return JsonResponse(staff_no, safe=False)
    return JsonResponse({"success": False}, status=400)
 
@login_required
@role_required(urlpass='/mg21report/')
def mg21report(request):
    
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    a=0
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    if "Superuser" in rolelist:
        obj = list(MG21TAB.objects.values('reportno').distinct())

        context={
            'a':a,
            'sub':0,
            'lenm' :2,
            'obj': obj,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
        }
    
    if request.method == "POST":
        
        submitvalue = request.POST.get('Proceed')
        if submitvalue=='Proceed':
            a=1
            shop_sec = request.POST.get('shop_sec')
            staffNo = request.POST.get('staffNo')
            staffName = request.POST.get('staffName')
            staffDesg = request.POST.get('staffDesg')
            reportdate = request.POST.get('reportdate')
            resumedate = request.POST.get('resumedate')
            sse = request.POST.get('sse')
            reportNumber = request.POST.get('reportNumber')
            login_id = request.POST.get('login_id')
            current_date = request.POST.get('current_date')
           
            obj = list(MG21TAB.objects.filter(reportno=reportNumber).values('reportno','shop_sec','staffNo','staffName','staffDesg','reportdate','resumedate','sse','current_date').distinct())
            
            context = {
                        
                        'a':a,
                        'obj': obj,
                        'shop_sec': shop_sec,
                        'staffNo' :staffNo,
                        'staffName' : staffName,
                        'staffDesg':staffDesg,
                        'reportNumber':reportNumber,
                        'resumedate':resumedate,
                        'reportdate':reportdate,
                        'sse':sse,
                        'login_id':login_id,
                        'current_date' : current_date,
                        'subnav':subnav,
            }                       
    return render(request,"mg21report.html",context)




@login_required
@role_required(urlpass='/mg9initialreportviews/')
def mg9initialreportviews(request):
    cuser=request.user
    usermaster=user_master.objects.filter(emp_id=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = user_master.objects.none()
    tool_no = Tools.objects.values('tool_code').exclude(tool_code__isnull=True).distinct()
    prtlist=[]
    for i in tool_no:
        prtlist.append(i['tool_code'])
    ticket_no = empmast.objects.values('ticket_no').exclude(ticket_no__isnull=True).distinct()
    prtticket=[]
    for i in ticket_no:
        prtticket.append(i['ticket_no'])
    empno = empmast.objects.filter(payrate__gt=4200).values('empno').exclude(empno__isnull=True).distinct()
    prtemp=[]
    for i in empno:
        prtemp.append(i['empno'])
    empno = empmast.objects.filter(scalecode__gt=4200).values('empno').exclude(empno__isnull=True).distinct()
    prtsec=[]
    for i in empno:
        prtsec.append(i['empno'])
    if "Superuser" in rolelist:
        tm=M5SHEMP.objects.all().values('shopsec').distinct()
        tmp=[]
        for on in tm:
            tmp.append(on['shopsec'])
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'ip':get_client_ip(request),
           
            'roles':tmp,
            'subnav':subnav,
            'prtlist':prtlist,
            'prtticket':prtticket,
            'prtemp':prtemp,
            'prtsec':prtsec,

        }
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):
            req = M5DOCnew.objects.all().filter(shop_sec=rolelist[i]).values('batch_no').distinct()
            wo_nop =wo_nop | req
        context = {
            'sub':0,
            'subnav':subnav,
            'lenm' :len(rolelist),
            'wo_nop':wo_nop,
            'nav':nav,
            'ip':get_client_ip(request),
            'roles' :rolelist,
            'prtlist':prtlist,
            'prtticket':prtticket,
            'prtemp':prtemp,
            'prtsec':prtsec,
        }
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles' :rolelist,
            'prtlist':prtlist,
            'prtticket':prtticket,    
            'prtemp':prtemp,
            'prtsec':prtsec,
                }

    if request.method == "POST":
        
        submitvalue = request.POST.get('proceed')
        if submitvalue=='Proceed':
            shop_sec = request.POST.get('shop_sec')
            mw_no = request.POST.get('mwno')
            staff_no = request.POST.get('staffno')
        
            obj  = MG9Initial.objects.filter(sec=shop_sec,mw_no=mw_no,staff_no=staff_no).values('sec','mw_no','sl_no','staff_no','handed_date','comp_date','handed_time','comp_time','handed_cmsec','comp_cmsec','handed_cmserv','comp_cmserv','complaint','action').distinct()
            obj1  = MG9Initial.objects.values('id').count()

            leng = obj.count()
            slno=obj1
            slno=slno+1
 
            if "Superuser" in rolelist:
                    tm=M5SHEMP.objects.all().values('shopsec').distinct()
                    tmp=[]
                    for on in tm:
                        tmp.append(on['shopsec'])
                    context={
                        'lenm' :2,
                        'nav':nav,
                        'ip':get_client_ip(request),
                        'roles':tmp,
                        'len':leng,   
                        'obj':obj,
                        'sub': 1,
                        'shop_sec': shop_sec,
                        'mw_no': mw_no,
                        'staff_no': staff_no,
                        'slno':slno,
                        'subnav':subnav,
                        'prtlist':prtlist,
                        'prtticket':prtticket,
                        'prtemp':prtemp,
                        'prtsec':prtsec,



                    }
            elif(len(rolelist)==1):
                    for i in range(0,len(rolelist)):
                        req = M5DOCnew.objects.all().filter(shop_sec=rolelist[i]).values('batch_no').distinct()
                        wo_nop =wo_nop | req
                    context = {
                        'lenm' :2,
                        'nav':nav,
                        'ip':get_client_ip(request),
                        'roles':tmp,
                        'len':leng,
                        'obj':obj,
                        'slno':slno,
                        'sub': 1,
                        'shop_sec': shop_sec,
                        'mw_no': mw_no,
                        'staff_no': staff_no,
                        'subnav':subnav,
                    }
            elif(len(rolelist)>1):
                    context = {
                        'lenm' :len(rolelist),
                        'nav':nav,
                        'subnav':subnav,
                        'ip':get_client_ip(request),
                        'roles' :rolelist,
                        'len':leng,
                        'obj':obj,
                        'slno':slno,
                        'shop_sec': shop_sec,
                        'mw_no': mw_no,
                        'staff_no': staff_no,
                        'subnav':subnav
                    }    
        if submitvalue=='submit':
                    leng=request.POST.get('len')
                    now = datetime.datetime.now()
                    shop_sec=request.POST.get('shop_sec')
                    mw_no = request.POST.get('mw_no')
                    staff_no = request.POST.get('staff_no')
                    comp= request.POST.get('complaint')
                    date_handed=request.POST.get('date_handed')
                    date_com=request.POST.get('date_com')
                    time_handed=request.POST.get('time_handed')
                    time_com=request.POST.get('time_com')
                    sec_handed = request.POST.get('sec_handed')
                    sec_com = request.POST.get('sec_com')
                    serv_com = request.POST.get('serv_com')
                    serv_handed = request.POST.get('serv_handed')
                    action= request.POST.get('action')
                    sl_no = request.POST.get('sl_no')

          

                    mg9obj = MG9Initial.objects.filter(sec=shop_sec,mw_no=mw_no,staff_no=staff_no).distinct()
                    if len(mg9obj) == 0:


                        MG9Initial.objects.create(sec=str(shop_sec),mw_no=str(mw_no),sl_no=str(sl_no),staff_no=str(staff_no),complaint=str(comp),handed_date=str(date_handed),comp_date=str(date_com),handed_time=str(time_handed),comp_time=str(time_com),handed_cmsec=str(sec_handed),comp_cmsec=str(sec_com),handed_cmserv=str(serv_handed),comp_cmserv=str(serv_com),action=str(action),last_modified=str(now),login_id=request.user)
                    else:

                        MG9Initial.objects.filter(sec=shop_sec,mw_no=mw_no,staff_no=staff_no).update(complaint=str(comp),handed_date=str(date_handed),comp_date=str(date_com),handed_time=str(time_handed),comp_time=str(time_com),handed_cmsec=str(sec_handed),comp_cmsec=str(sec_com),handed_cmserv=str(serv_handed),comp_cmserv=str(serv_com),action=str(action),last_modified=str(now))
                      

    return render(request,"mg9initialreportviews.html",context)

def mg9getmw(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        wono = list(Lc1.objects.filter(shop_sec = shop_sec).values('lcno').distinct())
        return JsonResponse(wono, safe = False)        
    return JsonResponse({"success":False}, status=400)

def mg9getstaff(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        staff = list(Shemp.objects.filter(shopsec=shop_sec).values('staff_no').exclude(staff_no__isnull=True).distinct())
        return JsonResponse(staff, safe = False)
    return JsonResponse({"success":False}, status=400)



@login_required
@role_required(urlpass='/mg9compreportviews/')
def mg9compreportviews(request):
    cuser=request.user
    usermaster=user_master.objects.filter(emp_id=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = user_master.objects.none()
    tool_no = Tools.objects.values('tool_code').exclude(tool_code__isnull=True).distinct()
    prtlist=[]
    for i in tool_no:
        prtlist.append(i['tool_code'])
    ticket_no = empmast.objects.values('ticket_no').exclude(ticket_no__isnull=True).distinct()
    prtticket=[]
    for i in ticket_no:
        prtticket.append(i['ticket_no'])
    empno = empmast.objects.filter(payrate__gt=4200).values('empno').exclude(empno__isnull=True).distinct()
    prtemp=[]
    for i in empno:
        prtemp.append(i['empno'])
    empno = empmast.objects.filter(scalecode__gt=4200).values('empno').exclude(empno__isnull=True).distinct()
    prtsec=[]
    for i in empno:
        prtsec.append(i['empno'])
    if "Superuser" in rolelist:
        tm=M5SHEMP.objects.all().values('shopsec').distinct()
        tmp=[]
        for on in tm:
            tmp.append(on['shopsec'])
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'ip':get_client_ip(request),
           
            'roles':tmp,
            'subnav':subnav,
            'prtlist':prtlist,
            'prtticket':prtticket,
            'prtemp':prtemp,
            'prtsec':prtsec,

        }
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):
            req = M5DOCnew.objects.all().filter(shop_sec=rolelist[i]).values('batch_no').distinct()
            wo_nop =wo_nop | req
        context = {
            'sub':0,
            'subnav':subnav,
            'lenm' :len(rolelist),
            'wo_nop':wo_nop,
            'nav':nav,
            'ip':get_client_ip(request),
            'roles' :rolelist,
            'prtlist':prtlist,
            'prtticket':prtticket,
            'prtemp':prtemp,
            'prtsec':prtsec,
        }
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles' :rolelist,
            'prtlist':prtlist,
            'prtticket':prtticket,    
            'prtemp':prtemp,
            'prtsec':prtsec,
                }

    if request.method == "POST":
        
        submitvalue = request.POST.get('proceed')
        if submitvalue=='Proceed':
            shop_sec = request.POST.get('shop_sec')
            mw_no = request.POST.get('mwno')
            staff_no = request.POST.get('staffno')
            
            current_yr=int(datetime.datetime.now().year)

            obj  = MG9Complete.objects.filter(sec=shop_sec,mw_no=mw_no,staff_no=staff_no).values('sec','mw_no','sl_no','staff_no','handed_date','comp_date','handed_time','comp_time','handed_cmsec','comp_cmsec','handed_cmserv','comp_cmserv','complaint','action','total_losthrs','cause_hrs','mp_time','mismp_time','inv_time').distinct()
            obj1  = MG9Complete.objects.values('id').count()

            leng = obj.count()
            slno=obj1
            slno=slno+1
            if "Superuser" in rolelist:
                    tm=M5SHEMP.objects.all().values('shopsec').distinct()
                    tmp=[]
                    for on in tm:
                        tmp.append(on['shopsec'])
                    context={
                        'lenm' :2,
                        'nav':nav,
                        'ip':get_client_ip(request),
                        'roles':tmp,
                        'len':leng,   
                        'obj':obj,
                        'sub': 1,
                        'shop_sec': shop_sec,
                        'mw_no': mw_no,
                        'staff_no': staff_no,
                        'slno':slno,
                        'cyear':current_yr,
                      
                        'subnav':subnav,
                        'prtlist':prtlist,
                        'prtticket':prtticket,
                        'prtemp':prtemp,
                        'prtsec':prtsec,



                    }
            elif(len(rolelist)==1):
                    for i in range(0,len(rolelist)):
                        req = M5DOCnew.objects.all().filter(shop_sec=rolelist[i]).values('batch_no').distinct()
                        wo_nop =wo_nop | req
                    context = {
                        'lenm' :2,
                        'nav':nav,
                        'ip':get_client_ip(request),
                        'roles':tmp,
                        'len':leng,
                        'obj':obj,
                        'slno':slno,
                        'sub': 1,
                        'shop_sec': shop_sec,
                        'mw_no': mw_no,
                        'staff_no': staff_no,
                        'cyear':current_yr,
                        'subnav':subnav,
                    }
            elif(len(rolelist)>1):
                    context = {
                        'lenm' :len(rolelist),
                        'nav':nav,
                        'subnav':subnav,
                        'ip':get_client_ip(request),
                        'roles' :rolelist,
                        'len':leng,
                        'obj':obj,
                        'slno':slno,
                        'shop_sec': shop_sec,
                        'mw_no': mw_no,
                        'staff_no': staff_no,
                        'cyear':current_yr,
                        'subnav':subnav
                    }    
        if submitvalue=='submit':
                    leng=request.POST.get('len')
                    now = datetime.datetime.now()
                    shop_sec=request.POST.get('shop_sec')
                    mw_no = request.POST.get('mw_no')
                    staff_no = request.POST.get('staff_no')
                    comp= request.POST.get('complaint')
                    date_handed=request.POST.get('date_handed')
                    date_com=request.POST.get('date_com')
                    time_handed=request.POST.get('time_handed')
                    time_com=request.POST.get('time_com')
                    sec_handed = request.POST.get('sec_handed')
                    sec_com = request.POST.get('sec_com')
                    serv_com = request.POST.get('serv_com')
                    serv_handed = request.POST.get('serv_handed')
                    action= request.POST.get('action')
                    sl_no = request.POST.get('sl_no')
                    lost_hrs = request.POST.get('lost_hrs')
                    elec = request.POST.get('elec')
                    mech = request.POST.get('mech')
                    mech_ele = request.POST.get('mech_ele')
                    mp = request.POST.get('mp')
                    inv = request.POST.get('inv')
                    mismp = request.POST.get('mismp')
                    inv_time = request.POST.get('inv_time')
                    mismp_time = request.POST.get('mismp_time')
                    mp_time=request.POST.get('mp_time')

                    tmp=""
                    if(elec is not None):
                        tmp=str(elec)+str("   ")
                    if(mech is not None):
                        tmp=tmp+str(mech)+str("   ")
                    if(mech_ele is not None):
                        tmp=tmp+str(mech_ele)+str("   ")
                    if(mp is not None):
                        tmp=tmp+str(mp)+str("   ")
                    if(inv is not None):
                        tmp=tmp+str(inv)+str("   ")
                    if(mp_time is None):
                        mp_time='00:00'
                    if(inv_time is None):
                        inv_time='00:00'
                    if(mismp_time is None):
                        mismp_time='00:00'
                    mg9obj = MG9Complete.objects.filter(sec=shop_sec,mw_no=mw_no,staff_no=staff_no).distinct()
                    if len(mg9obj) == 0:

       
                        MG9Complete.objects.create(sec=str(shop_sec),mw_no=str(mw_no),sl_no=str(sl_no),staff_no=str(staff_no),complaint=str(comp),handed_date=str(date_handed),comp_date=str(date_com),handed_time=str(time_handed),comp_time=str(time_com),handed_cmsec=str(sec_handed),comp_cmsec=str(sec_com),handed_cmserv=str(serv_handed),comp_cmserv=str(serv_com),action=str(action),last_modified=str(now),login_id=request.user,total_losthrs=str(lost_hrs),cause_hrs=str(tmp),mp_time=str(mp_time),inv_time=str(inv_time),mismp_time=str(mismp_time))
                    else:
                        cause=request.POST.get('cause_hrs')

                        MG9Complete.objects.filter(sec=shop_sec,mw_no=mw_no,staff_no=staff_no).update(complaint=str(comp),handed_date=str(date_handed),comp_date=str(date_com),handed_time=str(time_handed),comp_time=str(time_com),handed_cmsec=str(sec_handed),comp_cmsec=str(sec_com),handed_cmserv=str(serv_handed),comp_cmserv=str(serv_com),action=str(action),last_modified=str(now),login_id=str(request.user),total_losthrs=str(lost_hrs),cause_hrs=str(cause),mp_time=str(mp_time),inv_time=str(inv_time),mismp_time=str(mismp_time))
                       
       

    return render(request,"mg9compreportviews.html",context)

def mg9getstaffno(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        staff = list(Shemp.objects.filter(shopsec=shop_sec).values('staff_no').exclude(staff_no__isnull=True).distinct())
        return JsonResponse(staff, safe = False)
    return JsonResponse({"success":False}, status=400)

@login_required
@role_required(urlpass='/partallotement/')
def partallotement(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist) 
    partnew = list(Partnew.objects.all().values('part_no').distinct())
    partgrp = list(Ngr.objects.all().values('mgr').distinct())
    subgrp2 = list(Ngr.objects.all().values('sgr2','sln'))
    it_cat = list(GmCode.objects.filter(cd_type='IT').values('alpha_1').distinct())
    unit = list(GmCode.objects.filter(cd_type='UT').values('alpha_1').distinct())
    MB = list(GmCode.objects.filter(cd_type='MB').values('alpha_1').distinct())

    if "Superuser" in rolelist:
        tm=shop_section.objects.all()
        tmp=[]
        for on in tm:
            tmp.append(on.section_code)
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'ip':get_client_ip(request),
            'roles':tmp,
            'subnav':subnav,
            'partnew' : partnew,
            'partgrp' : partgrp,
            'it_cat' : it_cat,
            'unit' : unit,
            'mb' : MB,
            'subgrp2': subgrp2, 
        }
   
    return render(request,"partallotement.html",context)


def getpartnewdetails(request):
    if request.method == "GET" and request.is_ajax():        
        partno_temp = request.GET.get("partno_temp")
        partnew = list(Partnew.objects.filter(part_no=partno_temp).values('gm_ptno','rev','des','mb','unit','size_pc','mat_specn','ind_buy','it_cat','unit_wt').distinct())
        return JsonResponse(partnew, safe = False)
    return JsonResponse({"success":False}, status=400)

def getpartnewdetails123(request):
    if request.method == "GET" and request.is_ajax():        
        partgrp_temp = request.GET.get("maj_grp_temp")        
        partgrp = list(Ngr.objects.filter(mgr = partgrp_temp).values('sgr1').distinct())
        return JsonResponse(partgrp, safe = False)
    return JsonResponse({"success":False}, status=400)

def getsubgrp2(request):
    if request.method == "GET" and request.is_ajax():
        subgrp_temp_temp = request.GET.get("subgrp_temp_temp")  
        subgrp2 = list(Ngr.objects.filter(sgr1 = subgrp_temp_temp).values('sgr2').exclude(sgr2__isnull=True))
        return JsonResponse(subgrp2, safe = False)
    return JsonResponse({"success":False}, status=400)

def getDiscription(request):
    if request.method == "GET" and request.is_ajax():
        SUB_GROUP2_temp = request.GET.get("SUB_GROUP2_temp")  
        subgrpDesc = list(Ngr.objects.filter(sgr2 = SUB_GROUP2_temp).values('sln','gdes').exclude(sgr2__isnull=True))
        return JsonResponse(subgrpDesc, safe = False)
    return JsonResponse({"success":False}, status=400)

def getpartdecription(request):
    if request.method == "GET" and request.is_ajax():        
        subgrp_temp_temp = request.GET.get("subgrp_temp")        
        partgrp = list(Ngr.objects.filter(gdes = subgrp_temp_temp).values('gdes'))
        return JsonResponse(partgrp, safe = False)
    return JsonResponse({"success":False}, status=400)

def GenerateNewPartNo(request):
    if request.method == "GET" and request.is_ajax():        
        majg = request.GET.get("majg")  
        subg1= request.GET.get("subg1")
        subg2= request.GET.get("subg2")
        sl_no= request.GET.get("sl_no")
        lst=[majg,subg1,subg2,sl_no]
        part=''.join(map(str,lst))
        lst=[]
        for i in range(0,len(part)):
            lst.insert(i,int(part[i]))
        sum=0 
        cal=8
        for i in range(0,7):
            sum=sum + (lst[i] * cal)
            cal= cal - 1
        mod = sum % 11
        lst.insert(len(lst),mod) 
        part=''.join(map(str,lst)) 
        return JsonResponse(part, safe = False)
    return JsonResponse({"success":False}, status=400)



@login_required
@role_required(urlpass='/staff_auth_view/')
def staff_auth_view(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    tm1=empmast.objects.all().filter(payrate__gt='4200').values('empno').distinct()

    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    staff_no = empmast.objects.none()
    if "Superuser" in rolelist:
        tm=Shemp.objects.all().values('shopsec').distinct()
        sh=Shemp.objects.all().values('staff_no','name').distinct()
        
        tmp=[]
        for on in tm:
            tmp.append(on['shopsec'])
        context={
            'sh':sh,
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'ip':get_client_ip(request),
            'roles':tmp,
            'tm1':tm1,
            'subnav':subnav,
        }
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):
            req = Shemp.objects.all().filter(shop_sec=rolelist[i]).values('staff_no').distinct()
            staff_no =staff_no | req
        context = {
            'sub':0,
            'subnav':subnav,
            'lenm' :len(rolelist),
            'staff_no':staff_no,
            'nav':nav,
            'ip':get_client_ip(request),
            'roles' :rolelist
        }
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles' :rolelist
        }
    if request.method == "POST":
        submitvalue = request.POST.get('proceed')

        if submitvalue=='submit':
            shop_sec = request.POST.get('shop_sec')
            totauth = request.POST.get('totauth')
            totstaff = request.POST.get('totstaff')
            empno_shop_mang = request.POST.get('empno_shop_mang')
            empno_sse = request.POST.get('empno_sse')
            date_shop_mang = request.POST.get('date_shop_mang')
            date_sse = request.POST.get('date_sse')
            now = datetime.datetime.now()
            user=request.user
            form=staff_auth.objects.all().values('form_id').distinct().order_by('-form_id')
            if(form.count()==0):
                formid=1
            else:
                formid=form[0]['form_id']
                formid=int(formid)+1
            j=0
            auth=""
            for i in range(0,int(totauth)+1):
                auth1 = request.POST.get('auth'+str(i))
                if(auth1!=None):
                    auth=auth1+", "
                    j=i
                    break
                   
                
            for i in range(j+1,int(totauth)+1):
                auth1 = request.POST.get('auth'+str(i))
                auth=auth+auth1+", "
            auth=auth[:len(auth)-2]
            k=0
            no=0
            for i in range(0,int(totstaff)+1):
                staff_no = request.POST.get('staff_no'+str(i))
                staff_name = request.POST.get('staff_name'+str(i))
                staff_sec = request.POST.get('staff_sec'+str(i))
                mwnoj=""
                for j in range(1,3):
                    mwnoj1 = request.POST.get('mwno'+str(i)+str(j))
                    if mwnoj1 !=None:
                        mwnoj=mwnoj1+", "
                        k=j
                        break
                for j in range(k+1,10):
                    mwnoj1 = request.POST.get('mwno'+str(i)+str(j))
                    if mwnoj1!=None:
                        mwnoj=str(mwnoj)+str(mwnoj1)+", "
                mwnoj=mwnoj[:len(mwnoj)-2]
                if(staff_no!=None):
                    no=no+1
                    staff_auth.objects.create(form_id=str(formid), srno=str(no), shopsec=str(shop_sec),staff_no=str(staff_no),staff_name=str(staff_name), auth=str(auth), mwno=str(mwnoj), empno_shop_mang=str(empno_shop_mang), date_shop_mang=str(date_shop_mang), empno_sse=str(empno_sse), date_sse=str(date_sse), psnt_date=str(now)     ,login_id=str(user), last_modified=str(now))
                
    return render(request,"staff_auth_view.html",context)    
  
def staff_auth_viewgetshop_name(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        shop_name = Shop.objects.filter(shop=shop_sec).values('sh_desc').distinct()
        wono =(shop_name[0].get('sh_desc')).strip()

        mnno=list(Mnp.objects.filter(location=wono).values('mwno').distinct())
        cont ={
            "wono":wono,
            "mno":mnno,
        }
        
        return JsonResponse({"cont":cont}, safe = False)
    return JsonResponse({"success":False}, status=400)
def staff_auth_viewgetstaff_name(request):
    if request.method == "GET" and request.is_ajax():
        staff_no = request.GET.get('staff_no')
        name = list(Shemp.objects.filter(staff_no=staff_no).values('name').distinct())
        wono = name[0]['name']
        cont ={
            "wono":wono,
        }

        return JsonResponse({"cont":cont}, safe = False)
    return JsonResponse({"success":False}, status=400)

def staff_auth_viewgetemp_name(request):
    if request.method == "GET" and request.is_ajax():
        emp_no = request.GET.get('emp_no')
        
        name = list(empmast.objects.filter(empno=emp_no).values('empname','desig_longdesc').distinct())
        wono1 = name[0]['empname']
        wono2= name[0]['desig_longdesc']
        cont ={
            "wono1":wono1,
            "wono2":wono2,
        }

        return JsonResponse({"cont":cont}, safe = False)
    return JsonResponse({"success":False}, status=400)


    

@login_required
@role_required(urlpass='/staff_auth_report_view/')
def staff_auth_report_view(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    tm1=empmast.objects.all().filter(payrate__gt='4200').values('empno').distinct()

    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    staff_no = empmast.objects.none()
    if "Superuser" in rolelist:
        tm=Shemp.objects.all().values('shopsec').distinct()
        sh=Shemp.objects.all().values('staff_no','name').distinct()
        formno=staff_auth.objects.all().values('form_id').distinct().order_by('form_id')
        tmp=[]
        for on in tm:
            tmp.append(on['shopsec'])
        context={
            'sh':sh,
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'ip':get_client_ip(request),
            'roles':tmp,
            'tm1':tm1,
            'formno':formno,
            'subnav':subnav,
        }
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):
            req = Shemp.objects.all().filter(shop_sec=rolelist[i]).values('staff_no').distinct()
            staff_no =staff_no | req
        context = {
            'sub':0,
            'subnav':subnav,
            'lenm' :len(rolelist),
            'staff_no':staff_no,
            'nav':nav,
            'ip':get_client_ip(request),
            'roles' :rolelist
        }
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles' :rolelist
        }
    if request.method == "POST":
        submitvalue = request.POST.get('proceed')
        if(submitvalue=='Proceed'):
            shop_sec = request.POST.get('shop_sec')
            formno = request.POST.get('formno1')
            shop_name = Shop.objects.filter(shop=shop_sec).values('sh_desc').distinct()
            wono =(shop_name[0].get('sh_desc')).strip()
            alldata=staff_auth.objects.filter(form_id=formno,shopsec=shop_sec).values('srno','shopsec','staff_no','staff_name','auth','mwno','empno_shop_mang','date_shop_mang','empno_sse','date_sse').distinct().order_by('form_id')
            auth=alldata[0]['auth']
            empnomanager=alldata[0]['empno_shop_mang']
            datemanager=alldata[0]['date_shop_mang']
            sse=alldata[0]['empno_sse']
            datesse=alldata[0]['date_sse']

            mana =empmast.objects.filter(empno=empnomanager).values('empname').distinct()[0]
            ss =empmast.objects.filter(empno=sse).values('empname').distinct()[0]
            
            context = {
                'alldata':alldata,
                'auth':auth,
                'nav':nav,
                'subnav':subnav,
                'ip':get_client_ip(request),
                'roles' :rolelist,
                'wono':wono,
                'manager':mana,
                'datemanager':datemanager,
                'sse':ss,
                'datesse':datesse,
                'form':formno,
            }
                        
            
    return render(request,"staff_auth_report_view.html",context) 


@login_required
@role_required(urlpass='/logbook_record/')
def logbook_record(request):
    from .models import logbook_record
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    if "Superuser" in rolelist:
        shop_sec=shop_section.objects.all().order_by('section_code')
         
        context={         
        'nav':nav,
        'subnav':subnav,
        'ip':get_client_ip(request),
        'shop_sec':shop_sec 
        }

    if request.method=="POST":
        save=request.POST.get('save')
        if save=='save':
            shop_sec=request.POST.get('shop_sec')
            date=request.POST.get('date')
            tolen=request.POST.get('tolen') 
            for i in range(int(tolen)):      
                obj=logbook_record.objects.create()           
                obj.shop_sec=shop_sec
                obj.date=date
                obj.shift=request.POST.get('shift'+str(i))             
                obj.staff_no=request.POST.get('staff_no'+str(i))
                obj.staffname=request.POST.get('staffname'+str(i))
                obj.attandance=request.POST.get('attandance'+str(i))
                obj.stafftype=request.POST.get('stafftype'+str(i)) 
                obj.flag=0            
                obj.save()    
        else:
            shop_sec=request.POST.get('shop_sec')
            date=request.POST.get('date')
            tolen=request.POST.get('tolen')             
            for i in range(int(tolen)): 
                staff_no=request.POST.get('staff_no'+str(i))                 
                attandance=request.POST.get('attandance'+str(i))                 
                logbook_record.objects.filter(shop_sec=shop_sec,date=date,staff_no=staff_no).update(attandance=attandance )

        messages.success(request, 'Successfully Done!')
    return render(request,"logbook.html",context)

@login_required
@role_required(urlpass='/logbook_record/')
def logbook_assign(request):
    from .models import logbook_record
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    if "Superuser" in rolelist:
        shop_sec=shop_section.objects.all().order_by('section_code')
         
        context={         
        'nav':nav,
        'subnav':subnav,
        'ip':get_client_ip(request),
        'shop_sec':shop_sec ,
        
        }

    if request.method=="POST":         
       
        m_w_no=request.POST.get('mwno')
        pid=request.POST.get('id')
        shop_sec=request.POST.get('shop_sec')
        date=request.POST.get('date')
        opnno=request.POST.get('opn')            
        m5glsno=request.POST.get('m5glno')            
        staff_no=request.POST.get('staffno')
        staffname=request.POST.get('staffname')  
        out_turn=request.POST.get('outturn')
        opn_desc=request.POST.get('asswork') 
        flag=1
        logbook_record.objects.filter(id=pid).update( m_w_no=m_w_no, m5glsno=m5glsno, opnno=opnno,out_turn=out_turn,opn_desc=opn_desc,flag=flag)
       
    return render(request,"logbook_assign.html",context)
 
def logbook_attendence(request):
    from .models import logbook_record
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    if "Superuser" in rolelist:
        shop_sec=shop_section.objects.all().order_by('section_code')
         
        context={         
        'nav':nav,
        'subnav':subnav,
        'ip':get_client_ip(request),
        'shop_sec':shop_sec ,
        
        }

    if request.method=="POST":         
       
        m_w_no=request.POST.get('mwno')
        pid=request.POST.get('id')
        shop_sec=request.POST.get('shop_sec')
        date=request.POST.get('date')
        opnno=request.POST.get('opn')            
        m5glsno=request.POST.get('m5glno')            
        staff_no=request.POST.get('staffno')
        staffname=request.POST.get('staffname')  
        out_turn=request.POST.get('outturn')
        opn_desc=request.POST.get('asswork') 
        flag=1
        logbook_record.objects.filter(id=pid).update( m_w_no=m_w_no, m5glsno=m5glsno, opnno=opnno,out_turn=out_turn,opn_desc=opn_desc,flag=flag)
       
    return render(request,"logbook_attendence.html",context)

def logbook_editdata(request):
    from .models import logbook_record
    if request.method == "GET" and request.is_ajax():
        shop_sec=request.GET.get('shop_sec') 
        pid=request.GET.get('pid') 
        
        date=request.GET.get('date')       
        record = list(logbook_record.objects.filter(id=pid).values('id','workorderno','staff_no' ,'staffname','date','m_w_no','opn_desc','m5glsno','attandance','opnno','shop_sec','out_turn','timein','timeout','shift','stafftype'))
        
        workorderno=record[0]['workorderno'] 
        if workorderno=='tyo' or workorderno=='mis' :
           m5doc=list(logbook_work_desc.objects.filter(work_type=workorderno).values('Work_desc'))
        else:  
           m5doc=list(M5Docnew1.objects.filter(shop_sec=shop_sec,batch_no=workorderno).values('shop_sec','opn_desc','opn','batch_no','m5glsn'))
        
        context={
          'data':record, 
          'm5doc' :m5doc ,
          
               
        }

        return JsonResponse(context, safe = False)
    return JsonResponse({"success":False}, status=400)
def logbook_submitf(request):
    from .models import logbook_record
    if request.method == "GET" and request.is_ajax():
        shop_sec=request.GET.get('shop_sec')
        date=request.GET.get('date')
        pid=request.GET.get('pid') 
        staffno=request.GET.get('staffno')
        staffname=request.GET.get('staffname')
        stafftype=request.GET.get('stafftype')
        shift=request.GET.get('shift')
        m_w_no=request.GET.get('m_w_no')               
        workorderno=request.GET.get('workorderno')            
        m5glsno=request.GET.get('m5glsno')
        timein=request.GET.get('timein')
        timeout=request.GET.get('timeout')
        out_turn=request.GET.get('outturn')
        opnno=request.GET.get('opnno')   
        opn_desc=request.GET.get('opn_desc') 
        flag=1
        if pid == '0':
            logbook_record.objects.create(attandance='P',staff_no=str(staffno),staffname=str(staffname) ,stafftype=str(stafftype),shift=str(shift),shop_sec=str(shop_sec),date=str(date), m_w_no=str(m_w_no),workorderno=str(workorderno),m5glsno=str(m5glsno), opnno=str(opnno),out_turn=str(out_turn),opn_desc=str(opn_desc),timein=str(timein),timeout=str(timeout),flag=str(flag))
        else :
            logbook_record.objects.filter(id=pid).update(m_w_no=m_w_no,workorderno=workorderno,m5glsno=m5glsno, opnno=opnno,out_turn=out_turn,opn_desc=opn_desc,timein=timein,timeout=timeout,flag=flag)
           
        staff_no = list(logbook_record.objects.filter(shop_sec=shop_sec,date=date,attandance='P').values('id','staff_no' ,'staffname','date','shift','stafftype').distinct('staff_no'))
        staffListP = list(logbook_record.objects.filter(shop_sec=shop_sec,date=date,attandance='P',flag=1).values('id','workorderno','staff_no' ,'staffname','date','m_w_no','opn_desc','m5glsno','attandance','opnno','shop_sec','out_turn','timein','timeout','shift','stafftype').order_by('id'))    
        m5docdet=list(M5Docnew1.objects.filter(shop_sec=shop_sec).values('shop_sec','opn_desc','opn','batch_no','m5glsn').distinct('batch_no'))
       
        context={
          'staffListP':staffListP,
          'data':staff_no,
          'm5docdet':m5docdet
        }
        return JsonResponse(context, safe = False)
    return JsonResponse({"success":False}, status=400)
def logbook_getstaff(request):
    from .models import logbook_record
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        date = request.GET.get('date')
        shift = request.GET.get('shift')
        listss = logbook_record.objects.filter(shop_sec=shop_sec,date=date,shift=shift).all()
        if len(listss)==0:
          staff_no = list(roster1.objects.filter(shop_sec=shop_sec,date=date,shift=shift).values('staffNo','staffName', 'shift' ,'date','stafftype').order_by('staffNo').distinct('staffNo'))       
          rt= len(listss)
        else:
           staff_no = list(logbook_record.objects.filter(shop_sec=shop_sec,date=date,shift=shift).values('id','staff_no','staffname', 'shift' ,'attandance').order_by('staff_no').distinct('staff_no'))
           rt= len(listss)
        return JsonResponse({'data':staff_no,'rt':rt}, safe = False)
    return JsonResponse({"success":False}, status=400)

def logbook_getatten(request):
    from .models import logbook_record
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        date = request.GET.get('date')
        shift = request.GET.get('shift')         
        staff_pres= list(logbook_record.objects.filter(shop_sec=shop_sec,date=date,shift=shift ,attandance='P').values('id','staff_no','staffname', 'shift' ,'attandance').order_by('staff_no').distinct('staff_no'))
           
        staff_abs = list(logbook_record.objects.filter(shop_sec=shop_sec,date=date,shift=shift,attandance='A').values('id','staff_no','staffname', 'shift' ,'attandance').order_by('staff_no').distinct('staff_no'))
         
        return JsonResponse({'data':staff_pres,'absent':staff_abs}, safe = False)
    return JsonResponse({"success":False}, status=400)


def logbook_getm5doc(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        batch_no = request.GET.get('batch_no')
        m5glsn   = request.GET.get('m5glsn')
        
        m5doc=list(M5Docnew1.objects.filter(shop_sec=shop_sec,batch_no=batch_no,m5glsn=m5glsn).values('shop_sec','opn_desc','opn','batch_no','m5glsn','scl_cl','part_no', 'm2slno','rm_qty','pa','at','no_off','m5_cd','pr_shopsec','n_shopsec','qty_ord','tot_rm_qty','l_fr','l_to','m5prtdt','brn_no','assly_no','rm_partno','rm_ut','cut_shear','lc_no','seq','mark','del_fl','status','qty_insp' ,'inspector','date','remarks','worker','rej_qty','rev_qty','acc_qty','rej_mat'))
        context={
            'data':m5doc,             
        }
        return JsonResponse(context, safe = False)
    return JsonResponse({"success":False}, status=400)
    

def logbook_getworkdetail(request):
    from .models import logbook_record
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        date = request.GET.get('date')         
        staffListP = list(logbook_record.objects.filter(shop_sec=shop_sec,date=date,attandance='P',flag=1).values('id','workorderno','staff_no' ,'staffname','date','m_w_no','opn_desc','m5glsno','attandance','opnno','shop_sec','out_turn','timein','timeout','shift','stafftype'))      
        staff_no = list(logbook_record.objects.filter(shop_sec=shop_sec,date=date,attandance='P').values('id','staff_no' ,'staffname','date','shift','stafftype').order_by('staff_no').distinct('staff_no'))
        m5docdet=list(M5Docnew1.objects.filter(shop_sec=shop_sec).values('shop_sec','opn_desc','opn','batch_no','m5glsn').order_by('batch_no').distinct('batch_no'))

        context={
            'data':staff_no,
            'm5docdet':m5docdet,
            'staffListP':staffListP,
            
        }
        return JsonResponse(context, safe = False)
    return JsonResponse({"success":False}, status=400)
    

def logbook_getm5glno(request):
    from .models import logbook_record
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        work_no = request.GET.get('workorderno')
         
        if work_no=='tyo' or work_no=='mis' :
           m5doc=list(logbook_work_desc.objects.filter(work_type=work_no).values('Work_desc').distinct('Work_desc'))
        else:
           m5doc=list(M5Docnew1.objects.filter(shop_sec=shop_sec,batch_no=work_no).values('shop_sec','opn_desc','opn','batch_no','m5glsn'))

        context={             
            'm5doc':m5doc,
             
        }
        return JsonResponse(context, safe = False)
    return JsonResponse({"success":False}, status=400)

def logbook_desc(request):
    if request.method == "GET" and request.is_ajax():
        workad = request.GET.get('workad')
        work_no = request.GET.get('workorderno')
        Shop_code=request.GET.get('Shop_code')
        logbook_work_desc.objects.create(work_type =str(work_no),Work_desc=str(workad),Shop_code=str(Shop_code))
        data=list(logbook_work_desc.objects.filter(work_type=work_no).values('Work_desc').distinct('Work_desc'))

        return JsonResponse({'data':data}, safe = False)
    return JsonResponse({"success":False}, status=400)
@login_required
@role_required(urlpass='/logbook_delete/')
def logbook_delete(request):
    from .models import logbook_record

    if request.method=="POST":
        var=request.POST.get('del1')
        obj=logbook_record.objects.filter(m_w_no=var)
        obj.delete()
    return render(request,"logbook_delete.html",{}) 

@role_required(urlpass='/logbook_update/')
def logbook_update(request):

    if request.method=="POST":
        
        obj=logbook_record.objects.create()
        obj.m_w_no=request.POST.get('m_w_no')
        obj.job_booked=request.POST.get('job_booked')
        obj.staff_no=request.POST.get('staff_no')
        obj.attandance=request.POST.get('attandance')
        obj.out_turn=request.POST.get('out_turn')
        obj.remarks=request.POST.get('remarks')
        obj.save()        
        logbook_record.objects.filter(m_w_no=obj.m_w_no).update(job_booked=obj.job_booked,staff_no=obj.staff_no,attandance=obj.attandance,out_turn=obj.out_turn,remarks=obj.remarks)
        context = {
                
                'auth':auth,
                'nav':nav,
                'subnav':subnav,
                'ip':get_client_ip(request),
                'roles' :rolelist,
                
            }

    return render(request,"logbook_update.html",{})


@login_required
@role_required(urlpass='/m2hwview/')
def m2hwview(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = user_master.objects.none()  
    if "Superuser" in rolelist:
        tm=shop_section.objects.all()
        tmp=[]        
        for on in tm:
            tmp.append(on.section_code)
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles':tmp
        }
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):        

            w1 = Oprn.objects.filter(shop_sec=rolelist[i]).values('part_no').distinct()
            req = M2Doc.objects.filter(part_no__in=w1).values('batch_no').distinct()
            wo_nop = wo_nop | req
            context = {
                'sub':0,
                'subnav':subnav,
                'lenm' :len(rolelist),
                'wo_nop':wo_nop,
                'nav':nav,
                'ip':get_client_ip(request),
                'usermaster':usermaster,
                'ip':get_client_ip(request),
                'usermaster':usermaster,
                'roles' :rolelist
        }
    if request.method == "POST":
        submitvalue = request.POST.get('proceed')
        if submitvalue=='Proceed':
            rolelist=usermaster.role.split(", ")
            wo_nop = empmast.objects.none()
            shop_sec = request.POST.get('shop_sec')
            part_no = request.POST.get('part_nop')
            wo_no = request.POST.get('wo_no')
            brn_no = request.POST.get('br_no')
            assembly_no = request.POST.get('assm_no')
            doc_no = request.POST.get('doc_no')
            kkk=Oprn.objects.all()
            obj1 = Part.objects.filter(partno=part_no).values('des', 'drgno').distinct()
            obj2 = Part.objects.filter(partno=assembly_no).values('des').distinct()          
            obj3 = Batch.objects.filter(bo_no=wo_no,brn_no=brn_no,part_no=assembly_no).values('batch_type')
            check_obj=Oprn.objects.all().filter(shop_sec=shop_sec)            
            obj = Oprn.objects.filter(part_no=part_no).values('opn', 'shop_sec', 'lc_no', 'des','pa','at','lot','mat_rej','qtr_accep', 'qty_prod','work_rej').order_by('opn')
            date = M2Doc.objects.filter(m2sln=doc_no).values('m2prtdt','qty').distinct()
            leng = obj.count()
            datel= date.count()

            if "Superuser" in rolelist:
                  tm=shop_section.objects.all()
                  tmp=[]
                  for on in tm:
                      tmp.append(on.section_code)
                  context = {
                        'roles':tmp,
                        'lenm' :2,
                        'nav':nav,
                        'ip':get_client_ip(request),
                        'obj': obj,
                        'obj1': obj1,
                        'obj2': obj2,
                        'obj3': obj3,
                        'sub': 1,
                        'len': leng,
                        'date': date,
                        'datel': datel,
                        'shop_sec': shop_sec,
                        'part_no': part_no,
                        'wo_no': wo_no,
                        'brn_no': brn_no,
                        'assembly_no': assembly_no,
                        'doc_no': doc_no,
                        'subnav':subnav
                  }
            elif(len(rolelist)==1):
                  for i in range(0,len(rolelist)):                        

                        w1 = Oprn.objects.filter(shop_sec=rolelist[i]).values('part_no').distinct()
                        req = M2Doc.objects.filter(part_no__in=w1).values('batch_no').distinct()
                        wo_nop = wo_nop | req

                  context = {
                        'wo_nop':wo_nop,
                        'roles' :rolelist,
                        'usermaster':usermaster,
                        'lenm' :len(rolelist),
                        'nav': nav,
                        'ip': get_client_ip(request),
                        'obj': obj,
                        'obj1': obj1,
                        'obj2': obj2,
                        'obj3': obj3,
                        'sub': 1,
                        'len': leng,
                        'date': date,
                        'datel': datel,
                        'shop_sec': shop_sec,
                        'part_no': part_no,
                        'wo_no': wo_no,
                        'brn_no': brn_no,
                        'assembly_no': assembly_no,
                        'doc_no': doc_no,
                        'subnav':subnav
                  }
            elif(len(rolelist)>1):
                  context = {
                        'lenm' :len(rolelist),
                        'nav':nav,
                        'ip':get_client_ip(request),
                        'usermaster':usermaster,
                        'roles' :rolelist,
                        'obj': obj,
                        'obj1': obj1,
                        'obj2': obj2,
                        'obj3': obj3,
                        'sub': 1,
                        'len': leng,
                        'date': date,
                        'datel': datel,
                        'shop_sec': shop_sec,
                        'part_no': part_no,
                        'wo_no': wo_no,
                        'brn_no': brn_no,
                        'assembly_no': assembly_no,
                        'doc_no': doc_no,
                        'subnav':subnav
                  }
        
        rand = random.choice('0123456789') 
        rand1 = random.choice('0123456789')
        rand2 = random.choice('0123456789')
        rand3 = random.choice('0123456789')
        rand4 = random.choice('0123456789')
        rand5 = random.choice('0123456789')
        num = rand + rand1 + rand2 + rand3 + rand4 + rand5    

        if submitvalue=='Save':
            leng=request.POST.get('len')
              
            for i in range(1, int(leng)+1):           
                
                shopsec= request.POST.get('shopsec')
                partno= request.POST.get('partno')
                prtDate     = request.POST.get('prtDate')                                          
                monthTemp = prtDate.split(' ')[0]            
                dateTemp = prtDate.split(' ')[1]                    
                final1 = monthTemp[0:3]+' '+dateTemp.split(',')[0]+' '+prtDate.split(' ')[2]                              
                date_time_str = final1
                date_time_obj = datetime.datetime.strptime(date_time_str, '%b %d %Y')

                workOrdNo   = request.POST.get('workOrdNo')
                brnNo       = request.POST.get('brnNo')
                orderQuantity= request.POST.get('orderQuantity')
                asmlyPartNo = request.POST.get('asmlyPartNo')
                asmlyDesc   = request.POST.get('asmlyDesc')
                shopSection = request.POST.get('shopSection')
                partNum     = request.POST.get('partNum')
                partDescription= request.POST.get('partDescription')
                drawingNum  = request.POST.get('drawingNum')
                documentNum = request.POST.get('documentNum')
                orderType   = request.POST.get('orderType')          
                number   = num  
                causesofHW  =   request.POST.get('causesofHW')    

                operationNum=request.POST.get('operationNum'+str(i)) 
                shopSecTemp=request.POST.get('shopSecTemp'+str(i)) 
                loadCenter=request.POST.get('loadCenter'+str(i)) 
                operationDescription=request.POST.get('operationDescription'+str(i)) 
                paTemp=request.POST.get('paTemp'+str(i)) 
                taTemp=request.POST.get('taTemp'+str(i))
                noTemp=request.POST.get('noTemp'+str(i))    
                qtypr=request.POST.get('qtypr'+str(i))
                qtyac = request.POST.get('qtyac'+str(i))
                wrrej = request.POST.get('wrrej'+str(i))
                matrej = request.POST.get('matrej'+str(i))               

                M2HW.objects.create(prtDate=str(date_time_obj.date()),workOrdNo=str(workOrdNo),brnNo=str(brnNo),orderQuantity=str(orderQuantity),asmlyPartNo=str(asmlyPartNo),asmlyDesc=str(asmlyDesc),shopSection=str(shopSection),partNum=str(partNum),partDescription=str(partDescription),drawingNum=str(drawingNum),documentNum=str(documentNum),orderType=str(orderType),operationNum=str(operationNum),shopSecTemp=str(shopSecTemp),loadCenter=str(loadCenter),operationDescription=str(operationDescription),paTemp=str(paTemp),taTemp=str(taTemp),noTemp=str(noTemp),qtypr=str(qtypr),qtyac=str(qtyac),wrrej=str(wrrej),matrej=str(matrej),number=str(number),causesofHW=str(causesofHW))

            messages.success(request, 'M2 Card Hand Written generated Successfully, Your Reference number is : '+number)
    return render(request, "m2hwview.html", context)



def m2getwonohw(request):
    if request.method == "GET" and request.is_ajax():
        from.models import Batch
        shop_sec = request.GET.get('shop_sec')
        w1=Oprn.objects.filter(shop_sec=shop_sec).values('part_no').distinct()
        w2=M2Doc.objects.filter(part_no__in=w1).values('batch_no').distinct()
        wono = list(w2)
        return JsonResponse(wono, safe = False)
    return JsonResponse({"success":False}, status=400)

def m2getbrhw(request):
    if request.method == "GET" and request.is_ajax():
        wo_no = request.GET.get('wo_no')
        shop_sec = request.GET.get('shop_sec')
        br_no = list(M2Doc.objects.filter(batch_no =wo_no).values('brn_no').distinct())
        return JsonResponse(br_no, safe = False)
    return JsonResponse({"success":False}, status=400)

def m2getasslyhw(request):
    if request.method == "GET" and request.is_ajax():
        wo_no = request.GET.get('wo_no')
        br_no = request.GET.get('brn_no')
        shop_sec = request.GET.get('shop_sec')
        w2=M2Doc.objects.filter(batch_no=wo_no).values('assly_no').distinct()
        w1=Oprn.objects.filter(part_no__in=w2).values('shop_sec', 'part_no').distinct()
        w3=w1.filter(shop_sec=shop_sec).values('part_no').distinct()
        w4=M2Doc.objects.filter(batch_no=wo_no, f_shopsec=shop_sec, brn_no=br_no).values('assly_no').distinct()
        w5=w3.union(w4)
        w6=w5.distinct()
        assm_no = list(w6)
        return JsonResponse(assm_no, safe=False)
    return JsonResponse({"success":False}, status=400)    

def m2getpart_nohw(request):
    if request.method == "GET" and request.is_ajax():
        wo_no = request.GET.get('wo_no')
        br_no = request.GET.get('brn_no')
        shop_sec = request.GET.get('shop_sec')
        assembly_no = request.GET.get('assm_no')
        w2 = M2Doc.objects.filter(batch_no=wo_no).values('part_no').distinct()
        w1 = Oprn.objects.filter(part_no__in=w2).all().distinct()
        w3= w1.filter(shop_sec=shop_sec).values('part_no').distinct()
        w4 = M2Doc.objects.filter(batch_no=wo_no, f_shopsec=shop_sec, brn_no=br_no,assly_no=assembly_no).values('part_no').distinct()
        w5=w3.union(w4)
        w6=w5.distinct()
        part_no = list(w6)
        return JsonResponse(part_no, safe=False)
    return JsonResponse({"success":False}, status=400)    

def m2getdoc_nohw(request):
    if request.method == "GET" and request.is_ajax():
        wo_no = request.GET.get('wo_no')
        part_no = request.GET.get('part_no')
        doc_no = list(M2Doc.objects.filter(batch_no=wo_no,part_no=part_no).values('m2sln').distinct())

        return JsonResponse(doc_no, safe=False)
    return JsonResponse({"success": False}, status=400) 








@login_required
@role_required(urlpass='/m18aview/')
def m18aview(request):
    cuser=request.user
    usermaster=user_master.objects.filter(emp_id=cuser).first()

    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)

    wo_nop = user_master.objects.none()
  
    if "Superuser" in rolelist:
        tm=shop_section.objects.all()
        tmp=[]
        
        for on in tm:
            tmp.append(on.section_code)
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,

            'ip':get_client_ip(request),
            'roles':tmp,
            'subnav':subnav,
        }
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):
            req = M5DOCnew.objects.all().filter(shop_sec=rolelist[i]).values('batch_no').distinct()
            wo_nop =wo_nop | req

        context = {
            'sub':0,
            'subnav':subnav,
            'lenm' :len(rolelist),
            'wo_nop':wo_nop,
            'nav':nav,
            'ip':get_client_ip(request),
            'roles' :rolelist
        }
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'nav':nav,
            'subnav':subnav,

            'ip':get_client_ip(request),
            'roles' :rolelist
        }
    if request.method == "POST":
        submitvalue = request.POST.get('proceed')
        if submitvalue=='Proceed':
            from decimal import Decimal
            shop_sec = request.POST.get('shop_sec')
            wo_no = request.POST.get('wo_no')
            br_no= request.POST.get('br_no')
            part_no = request.POST.get('part_nop')
            month = request.POST.get('month')
            staff_no = request.POST.get('sse')
            ticket_no = request.POST.get('ticket_no')
            oprn_no = request.POST.get('oprn_no')

            ty=str(staff_no)
            staff=ty[6:11]
            staff=Shemp.objects.filter(shopsec=shop_sec,staff_no=staff).values('cat').exclude(staff_no__isnull=True)[0]
           
            obj3=0
            obj2=0
            p=None
            obj1=M18DOC.objects.filter(shopsec=shop_sec,month=month,staff_no=staff_no).all()
            if len(obj1):
              obj3=M18DOC.objects.filter(shopsec=shop_sec,month=month,staff_no=staff_no).values('req_no')[0]
            obj4=0
            obj2=Oprn.objects.filter(shop_sec=shop_sec,part_no=part_no).values('opn').distinct()

            emp=empmast.objects.filter(empno=staff_no).values('empno').distinct()
            empno=[]
            for i in emp:
                empno.append(i['empno'])

            leng=obj1.count()
            leng2=obj2.count()
            if "Superuser" in rolelist:
                tm=shop_section.objects.all()
                tmp=[]
                for on in tm:
                    tmp.append(on.section_code)
                context={
                    'len' :2,
                    'nav':nav,
                    'subnav':subnav,
                    'ip':get_client_ip(request),
                    'roles':tmp,
                    'obj1': obj1,
                    'obj2':obj2,
                    'obj3':obj3,
                    'obj4':obj4,
                    'len2':leng2,
                    'p':p,
                    'lent': leng,
                    'shop_sec': shop_sec,
                    'wo_no': wo_no,
                    'part_no':part_no,
                    'staff':staff,
                    'ticket_no':ticket_no,
                    'month': month,
                    'empno':empno,
                    'oprn_no':oprn_no,
                    'sub':1,
                }
            elif(len(rolelist)==1):
                for i in range(0,len(rolelist)):
                    w1 = Oprn.objects.filter(shop_sec=rolelist[i]).values('part_no').distinct()
                    req = Batch.objects.filter(part_no__in=w1).values('bo_no').distinct()
                    wo_no =wo_no | req
                context = {
                    'len' :len(rolelist),
                    'wo_no':wo_no,
                    'nav':nav,
                    'subnav':subnav,
                    'ip':get_client_ip(request),
                    'roles' :rolelist,
                    'obj1': obj1,
                    'obj2':obj2,
                    'obj3':obj3,
                    'obj4':obj4,
                    'lent': leng,
                    'len2':leng2,
                    'shop_sec': shop_sec,
                    'wo_no': wo_no,
                    'staff':staff,
                    'oprn_no':oprn_no,
                    'empno':empno,
                    'part_no':part_no,
                    'p':p,
                    'ticket_no':ticket_no,
                    'month': month,
                    'sub':1,
                }
            elif(len(rolelist)>1):
                context = {
                    'len' :len(rolelist),
                    'nav':nav,
                    'subnav':subnav,
                    'ip':get_client_ip(request),
                    'roles' :rolelist,
                    'obj1': obj1,
                    'obj2':obj2,
                    'obj3':obj3,
                    'obj4':obj4,
                    'len2':leng2,
                    'lent': leng,
                    'shop_sec': shop_sec,
                    'wo_no': wo_no,
                    'staff_no':staff_no, 
                    'staff':staff,
                    'p':p,
                    'oprn_no':oprn_no,
                    'ticket_no':ticket_no,
                    'part_no':part_no,
                    'month': month,
                    'empno':empno,
                    'sub':1,
                }

        if submitvalue=='submit':
            leng=request.POST.get('len')
            shopsec = request.POST.get('shopsec')
            month1= request.POST.get('month')
            req_no=request.POST.get('req_no')
            inoutnum=request.POST.get("inoutnum")
           

            for i in range(1, int(inoutnum)+1):
                in1 = request.POST.get('in1add'+str(i))
                
                out = request.POST.get('outadd'+str(i))
                month = request.POST.get('month_add'+str(i))
                total_time = request.POST.get('total_time_add'+str(i))
                in_date = request.POST.get('in_dateadd'+str(i))
                out_date = request.POST.get('out_dateadd'+str(i))
                cat = request.POST.get('catadd'+str(i))
                total_time = request.POST.get('total_time_takenadd'+str(i))
                shift=request.POST.get('shiftadd'+str(i))
                staff_no=request.POST.get('staff_noadd'+str(i))
                staff_name=request.POST.get('staff_nameadd'+str(i))
                ticket_no=request.POST.get('ticket_noadd'+str(i))
                req_no = request.POST.get('req_no')
                
                M18DOC.objects.create(shift_typename=str(shift),shopsec=str(shopsec),name=str(staff_name),staff_no=str(staff_no),in1=str(in1),out=str(out),month=str(month1),in_date=str(in_date),cat=str(cat),total_time_taken=str(total_time),out_date=str(out_date),ticket_no=str(ticket_no),req_no=str(req_no))

    return render(request,"m18aview.html",context)

def m18getempname(request):
    if request.method == "GET" and request.is_ajax():  
        examcode= request.GET.get('two')
        ex= empmast.objects.filter(empno=examcode).all()
      
        exam ={
            "exam_type":ex[0].empname,
            
             
           
           
        }    
       
        return JsonResponse({"exam":exam}, safe = False)
    return JsonResponse({"success":False}, status=400)   

def m18getwono(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        wono = list(M5DOCnew.objects.filter(shop_sec = shop_sec).values('batch_no').exclude(batch_no__isnull=True).distinct())
        return JsonResponse(wono, safe = False)
    return JsonResponse({"success":False}, status=400)
 


def m18getpart_no(request):
    if request.method == "GET" and request.is_ajax():
        wo_no = request.GET.get('wo_no')
        shop_sec = request.GET.get('shop_sec')
        part_no = list(M5DOCnew.objects.filter(batch_no =wo_no,shop_sec=shop_sec).values('part_no').exclude(part_no__isnull=True).distinct())
        return JsonResponse(part_no, safe = False)
    return JsonResponse({"success":False}, status=400)

def m18getoprn_no(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        part_no = request.GET.get('part_nop')
        oprn_no = list(Oprn.objects.filter(part_no=part_no).values('opn').exclude(opn__isnull=True).distinct())
        return JsonResponse(oprn_no, safe = False)
    return JsonResponse({"success":False}, status=400)  


def m18getticket_no(request):
    if request.method == "GET" and request.is_ajax():
        sse=request.GET.get('sse')
        ticket_no = list(empmast.objects.filter(empno=sse).values('ticket_no').exclude(ticket_no__isnull=True).distinct())
        return JsonResponse(ticket_no, safe = False)
    return JsonResponse({"success":False}, status=400)  


def m18getsse(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        staff=Shemp.objects.filter(shopsec=shop_sec).values('staff_no').exclude(staff_no__isnull=True).distinct()
        prtstaff=[]
        for i in staff:
           ty=i['staff_no']
           pop=empmast.objects.filter(empno__contains=ty).values('empno')
           for i in pop:
            prtstaff.append(i['empno'])

        context={
            'prt':prtstaff,
        }
        return JsonResponse({'context':context}, safe = False)
    return JsonResponse({"success":False}, status=400)


@login_required
@role_required(urlpass='/M24views/')
def M24views(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    staff_no = Shemp.objects.values('staff_no').exclude(staff_no__isnull=True).distinct()
    prtlist=[]
    for i in staff_no:
        prtlist.append(i['staff_no'])
    
    desgn = Shemp.objects.values('desgn').exclude(desgn__isnull=True).distinct()
    prtdesgn=[]
    for i in desgn:
        prtdesgn.append(i['desgn'])

    payrate = empmast.objects.values('payrate').exclude(payrate__isnull=True).distinct()
    prtpay=[]
    for i in payrate:
        prtpay.append(i['payrate'])

    superv = empmast.objects.values('empno').exclude(scalecode__isnull=True).distinct()
    prtemp=[]
    for i in superv:
        prtemp.append(i['empno'])

    
    if "Superuser" in rolelist:
        tm=shop_section.objects.all()
        tmp=[]
        
        for on in tm:
            tmp.append(on.section_code)
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles':tmp,
            'prtlist':prtlist,
            'prtpay':prtpay,
            'prtdesgn':prtdesgn,
            'prtemp':prtemp,
        }
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):
            w1 = Oprn.objects.filter(shop_sec=rolelist[i]).values('part_no').distinct()
            req = M24.objects.filter(part_no__in=w1).values('batch_no').distinct()
            wo_nop = wo_nop | req
        context = {
            'sub':0,
            'subnav':subnav,
            'lenm' :len(rolelist),
            'wo_nop':wo_nop,
            'nav':nav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist,
            'prtlist':prtlist,
            'prtpay':prtpay,
            'prtdesgn':prtdesgn,
            'prtemp':prtemp,
        }
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist,
            'prtlist':prtlist,
            'prtpay':prtpay,
            'prtdesgn':prtdesgn,
            'prtemp':prtemp,
        }
        
    if request.method == "POST":
        
        submitvalue = request.POST.get('proceed')
       
        if submitvalue=='Proceed':
            fr_date = request.POST.get('fr_date')
            to_date = request.POST.get('to_date')
            shop_sec = request.POST.get('shop_sec')
            ssfo = request.POST.get('ssfo')
            timekeep = request.POST.get('timekeep')
            workshop = request.POST.get('workshop')
            
            obj1 = M24.objects.filter(shop_sec=shop_sec,staff_no=ssfo).values('sno','fr_date','to_date','timekeep','workshop','staff_no','desgn','payrate','supervise_chrgmn','hrs_wrked','rsn_ovrtym').distinct()
      
            leng=obj1.count()
            
            context = {
                'obj1': obj1,
                'mytry':"rimjhim",
                'lent': leng,
                'leng':leng,
                'shop_sec': shop_sec,
                'to_date': to_date,
                'staff_no':staff_no, 
                'ssfo':ssfo,
                'prtlist':prtlist,
                'prtpay':prtpay,
                'prtdesgn':prtdesgn,
                'prtemp':prtemp,
                'timekeep':timekeep,
                'workshop':workshop,
                'fr_date':fr_date,
                'sub': 1, 
                      
            }
        if submitvalue=='submit':
            leng=request.POST.get('len')
            tot= request.POST.get('total')
            tot = int(tot)+1
            for i in range(1,int(tot)):
                fr_date = request.POST.get('fr_date')
                to_date = request.POST.get('to_date')
                shop_sec= request.POST.get('shop_sec')
                ssfo = request.POST.get('ssfo')    
                timekeep = request.POST.get('timekeep')      
                workshop = request.POST.get('workshop')
                sno = request.POST.get('sno'+str(i))
                staff_no = request.POST.get('staff_no')
                designation = request.POST.get('designation')
                payrate = request.POST.get('payrate')
                supervise = request.POST.get('supervise') 
                             
                hrs_wrkd = request.POST.get('hrs_wrkd'+str(i))
                reason = request.POST.get('reason'+str(i))

                M24.objects.create(shop_sec=str(shop_sec),ssfo=str(ssfo),timekeep=str(timekeep),workshop=str(workshop),sno=str(sno),staff_no=str(staff_no),desgn=str(designation),payrate=str(payrate),supervise_chrgmn=str(supervise),hrs_wrked=str(hrs_wrkd),rsn_ovrtym=str(reason),fr_date=str(fr_date),to_date=str(to_date))

    return render(request,"M24views.html",context)                        


def m24getssfo(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        w1=list(Shemp.objects.filter(shopsec=shop_sec).values('staff_no').distinct())                             
        return JsonResponse(w1, safe = False)
    return JsonResponse({"success":False}, status=400)


def m24getstaff_no(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        staff_no = list(Shemp.objects.filter(shopsec=shop_sec).values('staff_no').distinct())
        return JsonResponse(staff_no, safe = False)
    return JsonResponse({"success":False}, status=400)

def m24getdesgn(request):
    if request.method == "GET" and request.is_ajax():
        staff_no = request.GET.get('staff_no')
        w2=list(Shemp.objects.filter(staff_no=staff_no).values('designation').distinct())
        return JsonResponse(w2, safe = False)
    return JsonResponse({"success":False}, status=400)


def m24getsuprvsr(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        ss_fo = list(Shemp.objects.filter(shopsec=shop_sec).values('staff_no').distinct())
        return JsonResponse(ss_fo, safe = False)
    return JsonResponse({"success":False}, status=400)

@login_required
@role_required(urlpass='/m24report/')
def m24report(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    staff_no = Shemp.objects.values('staff_no').exclude(staff_no__isnull=True).distinct()
    prtlist=[]
    for i in staff_no:
        prtlist.append(i['staff_no'])

    desgn = Shemp.objects.values('desgn').exclude(desgn__isnull=True).distinct()
    prtdesgn=[]
    for i in desgn:
        prtdesgn.append(i['desgn'])

    payrate = empmast.objects.values('payrate').exclude(payrate__isnull=True).distinct()
    prtpay=[]
    for i in payrate:
        prtpay.append(i['payrate'])

    superv = empmast.objects.values('empno').exclude(scalecode__isnull=True).distinct()
    prtemp=[]
    for i in superv:
        prtemp.append(i['empno'])

    
    if "Superuser" in rolelist:
        tm=shop_section.objects.all()
        tmp=[]
        for on in tm:
            tmp.append(on.section_code)
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles':tmp,
            'prtlist':prtlist,
            'prtpay':prtpay,
            'prtdesgn':prtdesgn,
            'prtemp':prtemp,
        }
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):
            w1 = Oprn.objects.filter(shop_sec=rolelist[i]).values('part_no').distinct()
            req = M24.objects.filter(part_no__in=w1).values('batch_no').distinct()
            wo_nop = wo_nop | req
        context = {
            'sub':0,
            'subnav':subnav,
            'lenm' :len(rolelist),
            'wo_nop':wo_nop,
            'nav':nav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist,
            'prtlist':prtlist,
            'prtpay':prtpay,
            'prtdesgn':prtdesgn,
            'prtemp':prtemp,
        }
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist,
            'prtlist':prtlist,
            'prtpay':prtpay,
            'prtdesgn':prtdesgn,
            'prtemp':prtemp,
        }
        
    if request.method == "POST":
        
        submitvalue = request.POST.get('proceed')
       
        if submitvalue=='Proceed':
            fr_date = request.POST.get('fr_date')
            to_date = request.POST.get('to_date')
            shop_sec = request.POST.get('shop_sec')
            ssfo = request.POST.get('ssfo')
            obj1=0
            obj2=0
            leng2=0
            obj = M24.objects.filter(shop_sec=shop_sec,ssfo=ssfo).values('timekeep','workshop').distinct()
            obj1 = M24.objects.filter(shop_sec=shop_sec,ssfo=ssfo).values('sno','staff_no','desgn','payrate','supervise_chrgmn','hrs_wrked','rsn_ovrtym').distinct()
            if len(obj1):
                staff=obj1[0]['supervise_chrgmn']
                obj2 = empmast.objects.filter(empno=staff).values('empname').distinct()
                leng2=obj2.count()
            leth=obj.count()
            leng=obj1.count()
            
            
            context = {
                'obj1': obj1,
                'obj': obj,
                'obj2':obj2,
                'leth':leth,
                'len2':leng2,
                'mytry':"rimjhim",
                'lent': leng,
                'leng':leng,
                'shop_sec': shop_sec,
                'to_date': to_date,
                'staff_no':staff_no, 
                'ssfo':ssfo,
                'prtlist':prtlist,
                'prtpay':prtpay,
                'prtdesgn':prtdesgn,
                'prtemp':prtemp,
                'fr_date':fr_date,
                'sub': 1, 
                      
            }
    
    return render(request,"m24report.html",context)

 
@login_required
@role_required(urlpass='/machineviews/')
def machineviews(request):
    cuser=request.user
    usermaster=user_master.objects.filter(emp_id=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = user_master.objects.none()
    tool_no = Tools.objects.values('tool_code').exclude(tool_code__isnull=True).distinct()
    prtlist=[]
    for i in tool_no:
        prtlist.append(i['tool_code'])
    ticket_no = empmast.objects.values('ticket_no').exclude(ticket_no__isnull=True).distinct()
    prtticket=[]
    for i in ticket_no:
        prtticket.append(i['ticket_no'])
    empno = empmast.objects.filter(payrate__gt=4200).values('empno').exclude(empno__isnull=True).distinct()
    prtemp=[]
    for i in empno:
        prtemp.append(i['empno'])
    empno = empmast.objects.filter(scalecode__gt=4200).values('empno').exclude(empno__isnull=True).distinct()
    prtsec=[]
    for i in empno:
        prtsec.append(i['empno'])
    if "Superuser" in rolelist:
        tm=M5SHEMP.objects.all().values('shopsec').distinct()
        tmp=[]
        for on in tm:
            tmp.append(on['shopsec'])
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'ip':get_client_ip(request),
           
            'roles':tmp,
            'subnav':subnav,
            'prtlist':prtlist,
            'prtticket':prtticket,
            'prtemp':prtemp,
            'prtsec':prtsec,

        }
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):
            req = M5DOCnew.objects.all().filter(shop_sec=rolelist[i]).values('batch_no').distinct()
            wo_nop =wo_nop | req
        context = {
            'sub':0,
            'subnav':subnav,
            'lenm' :len(rolelist),
            'wo_nop':wo_nop,
            'nav':nav,
            'ip':get_client_ip(request),
            'roles' :rolelist,
            'prtlist':prtlist,
            'prtticket':prtticket,
            'prtemp':prtemp,
            'prtsec':prtsec,
        }
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles' :rolelist,
            'prtlist':prtlist,
            'prtticket':prtticket,    
            'prtemp':prtemp,
            'prtsec':prtsec,
                }

    if request.method == "POST":
        
        submitvalue = request.POST.get('proceed')
        if submitvalue=='Proceed':
            shop_sec = request.POST.get('shop_sec')
            mw_no = request.POST.get('mwno')
            cause=request.POST.get('cause')
            lost=request.POST.get('losthrs')
            current_yr=int(datetime.datetime.now().year)

            tmp=str(cause)+str("   ")
        
            obj = Shop.objects.filter(shop=shop_sec).values('sh_desc')[0]
            obj2  = Lc1.objects.filter(shop_sec=shop_sec,lcno=mw_no).values('des')[0]
            obj1 = MG9Complete.objects.filter(sec=shop_sec,mw_no=mw_no,cause_hrs=tmp,total_losthrs__gte=lost).values('sl_no','complaint','handed_date','handed_time','comp_date','comp_time','action','total_losthrs').distinct()
            obj3 = MG9Initial.objects.filter(sec=shop_sec,mw_no=mw_no).values('sl_no','complaint','handed_date','handed_time').distinct()
            pending='pending'
            
            leng1 = obj1.count()
            leng3 = obj3.count()
           

            
            if "Superuser" in rolelist:
                    tm=M5SHEMP.objects.all().values('shopsec').distinct()
                    tmp=[]
                    for on in tm:
                        tmp.append(on['shopsec'])
                    context={
                        'lenm' :2,
                        'nav':nav,
                        'ip':get_client_ip(request),
                        'roles':tmp,
                        'obj':obj,
                        'obj2':obj2,
                        'obj1':obj1,
                        'obj3':obj3,
                        'len3':leng3,
                        'len1':leng1,
                        'p':pending,
                        'sub': 1,
                        'shop_sec': shop_sec,
                        'mw_no': mw_no,
                        'cause':cause,
                        'cyear':current_yr,
                       
                      
                        'subnav':subnav,
                        'prtlist':prtlist,
                        'prtticket':prtticket,
                        'prtemp':prtemp,
                        'prtsec':prtsec,



                    }
            elif(len(rolelist)==1):
                    for i in range(0,len(rolelist)):
                        req = M5DOCnew.objects.all().filter(shop_sec=rolelist[i]).values('batch_no').distinct()
                        wo_nop =wo_nop | req
                    context = {
                        'lenm' :2,
                        'nav':nav,
                        'ip':get_client_ip(request),
                        'roles':tmp,
                        'obj':obj,
                        'obj2':obj2,
                        'obj1':obj1,
                        'p':pending,
                        'obj3':obj3,
                        'len3':leng3,
                        'len1':leng1,
                        'cause':cause,
                        'sub': 1,
                        'shop_sec': shop_sec,
                        'mw_no': mw_no,
                        'cyear':current_yr,
                     
                      
                        'subnav':subnav,
                    }
            elif(len(rolelist)>1):
                    context = {
                        'lenm' :len(rolelist),
                        'nav':nav,
                        'subnav':subnav,
                        'ip':get_client_ip(request),
                        'roles' :rolelist,
                        'len':leng,
                        'obj':obj,
                        'obj1':obj1,
                        'obj3':obj3,
                        'len3':leng3,
                        'obj2':obj2,
                        'len2':leng2,
                        'p':pending,
                        'len1':leng1,
                        'cause':cause,
                        'shop_sec': shop_sec,
                        'mw_no': mw_no,
                        'cyear':current_yr,
                        'subnav':subnav
                    }    
  
    return render(request,"machineviews.html",context)

def machinegetcause(request):
    if request.method == "GET" and request.is_ajax():
        mwno = request.GET.get('mwno')
        wono = list(MG9Complete.objects.filter(mw_no = mwno).values('cause_hrs').distinct())
        return JsonResponse(wono, safe = False)
    return JsonResponse({"success":False}, status=400)  


@login_required
@role_required(urlpass='/m4hwview/')
def m4hwview(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    if "Superuser" in rolelist:
        tm=shop_section.objects.all()
        tmp=[]
        for on in tm:
            tmp.append(on.section_code)
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles':tmp
        }
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):

            w1 = Oprn.objects.filter(shop_sec=rolelist[i]).values('part_no').distinct()
            req = M14M4.objects.filter(assly_no__in=w1).values('bo_no').distinct()
            wo_nop = wo_nop | req

        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'wo_nop':wo_nop,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist
        }
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist
        }
    if request.method == "POST":
        submitvalue = request.POST.get('proceed')
        if submitvalue=='Proceed':
            rolelist=usermaster.role.split(", ")
            wo_nop = empmast.objects.none()
            shop_sec = request.POST.get('shop_sec')
            part_no = request.POST.get('part_nop')
            wo_no = request.POST.get('wo_no')
            brn_no = request.POST.get('br_no')
            assembly_no = request.POST.get('assm_no')
            doc_no = request.POST.get('doc_no')
            kkk=Oprn.objects.all()
            obj1 = Part.objects.filter(partno=part_no).values('des', 'drgno').distinct()
            obj2 = Part.objects.filter(partno=assembly_no).values('des').distinct()
            obj3 = Batch.objects.filter(bo_no=wo_no,brn_no=brn_no,part_no=assembly_no).values('batch_type')
            check_obj=Oprn.objects.all().filter(shop_sec=shop_sec)
            obj = M14M4.objects.filter(doc_no=doc_no,assly_no=assembly_no,brn_no=brn_no,part_no=part_no).values('received_mat', 'issued_qty', 'received_qty', 'laser_pst', 'line', 'closing_bal', 'remarks', 'posted_date', 'wardkp_date', 'shopsup_date', 'posted1_date')

            if len(obj) == 0:
                obj = range(0,1)
            date = M14M4.objects.filter(doc_no=doc_no,assly_no=assembly_no,brn_no=brn_no,part_no=part_no).values('prtdt','qty').distinct()
            leng = obj.count()
            datel = date.count()           
           
            if "Superuser" in rolelist:
                tm=shop_section.objects.all()
                tmp=[]
                for on in tm:
                    tmp.append(on.section_code)
                context = {
                    'roles':tmp,
                    'lenm' :2,
                    'nav':nav,
                    'subnav':subnav,
                    'ip':get_client_ip(request),
                    'obj': obj,
                    'obj1': obj1,
                    'obj2': obj2,
                    'obj3': obj3,
                    'sub': 1,
                    'len': leng,
                    'date': date,
                    'datel': datel,
                    'shop_sec': shop_sec,
                    'part_no': part_no,
                    'wo_no': wo_no,
                    'brn_no': brn_no,
                    'assembly_no': assembly_no,
                    'doc_no': doc_no,
                }
            elif(len(rolelist)==1):
                for i in range(0,len(rolelist)):                    

                    w1 = Oprn.objects.filter(shop_sec=rolelist[i]).values('part_no').distinct()
                    req = M14M4.objects.filter(assly_no__in=w1).values('bo_no').distinct()
                    wo_nop = wo_nop | req

                context = {
                    'wo_nop':wo_nop,
                    'roles' :rolelist,
                    'subnav':subnav,
                    'usermaster':usermaster,
                    'lenm' :len(rolelist),
                    'nav': nav,
                    'ip': get_client_ip(request),
                    'obj': obj,
                    'obj1': obj1,
                    'obj2': obj2,
                    'obj3': obj3,
                    'sub': 1,
                    'len': leng,
                    'date': date,
                    'datel': datel,
                    'shop_sec': shop_sec,
                    'part_no': part_no,
                    'wo_no': wo_no,
                    'brn_no': brn_no,
                    'assembly_no': assembly_no,
                    'doc_no': doc_no,
                }
            elif(len(rolelist)>1):
                context = {
                    'lenm' :len(rolelist),
                    'nav':nav,
                    'subnav':subnav,
                    'ip':get_client_ip(request),
                    'usermaster':usermaster,
                    'roles' :rolelist,
                    'obj': obj,
                    'obj1': obj1,
                    'obj2': obj2,
                    'obj3': obj3,
                    'sub': 1,
                    'len': leng,
                    'date': date,
                    'datel': datel,
                    'shop_sec': shop_sec,
                    'part_no': part_no,
                    'wo_no': wo_no,
                    'brn_no': brn_no,
                    'assembly_no': assembly_no,
                    'doc_no': doc_no,
                }
        if submitvalue=='Save':
            rand  = random.choice('0123456789')           
            rand1 = random.choice('0123456789')        
            rand2 = random.choice('0123456789')           
            rand3 = random.choice('0123456789')         
            rand4 = random.choice('0123456789')          
            rand5 = random.choice('0123456789')           
            num = rand + rand1 + rand2 + rand3 + rand4 + rand5           
            number = num

            prtDate= request.POST.get('prtdt')              
            monthTemp = prtDate.split(' ')[0]            
            dateTemp = prtDate.split(' ')[1]                    
            final1 = monthTemp[0:3]+' '+dateTemp.split(',')[0]+' '+prtDate.split(' ')[2]
            date_time_str = final1
            date_time_obj = datetime.datetime.strptime(date_time_str, '%b %d %Y')
            wo_no= request.POST.get('wo_no')          
            brn_no=request.POST.get('brn_no')         
            qty=request.POST.get('qty')  
            end_prod = request.POST.get('end_prod')         
            epdes = request.POST.get('epdes')        
            shop_section_temp = request.POST.get('shop_section_temp')        
            part_no = request.POST.get('part_no')        
            partdes= request.POST.get('partdes')        
            drgno = request.POST.get('drgno')           
            doc_no = request.POST.get('doc_no')         
            batch_type = request.POST.get('batch_type')          
            received_mat = request.POST.get('received_mat')        
            issued_qty = request.POST.get('issued_qty')        
            received_qty = request.POST.get('received_qty')      
            laser_pst = request.POST.get('laser_pst')        
            line = request.POST.get('line')                  
            closing_bal = request.POST.get('closing_bal')          
            remarks = request.POST.get('remarks')       
            posted_date = request.POST.get('posted_date')        
            wardkp_date = request.POST.get('wardkp_date')            
            shopsup_date = request.POST.get('shopsup_date')        
            posted1_date = request.POST.get('posted1_date')
            causesofHW = request.POST.get('causesofHW')        
            
            M4HW.objects.create(prtdt=str(date_time_obj.date()),doc_no=str(doc_no),part_no=str(part_no),wo_no=str(wo_no),brn_no=str(brn_no),qty=str(qty),end_prod=str(end_prod),epdes=str(epdes),shop_section_temp=str(shop_section_temp),partdes=str(partdes),drgno=str(drgno),batch_type=str(batch_type),received_mat=str(received_mat),issued_qty=str(issued_qty),received_qty=str(received_qty),laser_pst=str(laser_pst),line=str(line),closing_bal=str(closing_bal),remarks=str(remarks),posted_date=str(posted_date),wardkp_date=str(wardkp_date),shopsup_date=str(shopsup_date),posted1_date=str(posted1_date),number=str(number),causesofHW=str(causesofHW))         
            messages.success(request, 'M4 Card Hand Written generated Successfully, Your Reference number is : '+number)
           
    return render(request,"m4hwview.html",context)         


def m4getbrhw(request):
    if request.method == "GET" and request.is_ajax():
        wo_no = request.GET.get('wo_no')
        br_no = list(M14M4.objects.filter(bo_no =wo_no).values('brn_no').exclude(brn_no__isnull=True).distinct())
        return JsonResponse(br_no, safe = False)
    return JsonResponse({"success":False}, status=400)



def m4getwonohw(request):
    if request.method == "GET" and request.is_ajax():
        from.models import Batch
        shop_sec = request.GET.get('shop_sec')
        w1 = Oprn.objects.filter(shop_sec=shop_sec).values('part_no').distinct()
        w2 = M14M4.objects.filter(assly_no__in=w1).values('bo_no').exclude(bo_no__isnull=True).distinct()
        wono = list(w2)
        return JsonResponse(wono, safe = False)
    return JsonResponse({"success":False}, status=400)








def m4getasslyhw(request):
    if request.method == "GET" and request.is_ajax():
        wo_no = request.GET.get('wo_no')
        br_no = request.GET.get('brn_no')
        assm_no = list(M14M4.objects.filter(bo_no =wo_no,brn_no=br_no).values('assly_no').exclude(assly_no__isnull=True).distinct())
        return JsonResponse(assm_no, safe = False)
    return JsonResponse({"success":False}, status=400)



def m4getpart_nohw(request):
    if request.method == "GET" and request.is_ajax():
        wo_no = request.GET.get('wo_no')
        br_no = request.GET.get('brn_no')
        assembly_no = request.GET.get('assm_no')
        part_no = list(M14M4.objects.filter(brn_no=br_no,assly_no=assembly_no,bo_no=wo_no).values('part_no').exclude(part_no__isnull=True).distinct())
        return JsonResponse(part_no, safe = False)
    return JsonResponse({"success":False}, status=400)



def m4getdoc_nohw(request):
    if request.method == "GET" and request.is_ajax():
        wo_no = request.GET.get('wo_no')
        br_no = request.GET.get('brn_no')
        shop_sec = request.GET.get('shop_sec')
        assembly_no = request.GET.get('assm_no')
        part_no = request.GET.get('part_no')
        doc_no = list(M14M4.objects.filter(bo_no =wo_no,brn_no=br_no,assly_no=assembly_no,part_no=part_no).values('doc_no').exclude(doc_no__isnull=True).distinct())
        return JsonResponse(doc_no, safe = False)
    return JsonResponse({"success":False}, status=400)




@login_required
@role_required(urlpass='/mg5view/')
def mg5view(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    idcard_no = empmast.objects.none()
    obj=empmast.objects.all().values('idcard_no').distinct()
    objj=empmast.objects.filter(idcard_no=idcard_no).values('ticket_no').distinct()
    if "Superuser" in rolelist:
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'obj':obj,
        }
    elif(len(rolelist)==1):
        for i in range(0, len(rolelist)):
            req = empmast.objects.all().filter(idcard_no=rolelist[i]).distinct()
            idcard_no =idcard_no | req

        context = {
            'sub':0,
            'subnav':subnav,
            'lenm' :len(rolelist),
            'idcard_no':idcard_no,
            'nav':nav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist
        }
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist
        }
    if request.method == "POST":
        submitvalue = request.POST.get('proceed')
        if submitvalue=='Proceed':
            rolelist=usermaster.role.split(", ")
            wo_nop = empmast.objects.none()
            ti_no = request.POST.get('t_no')
            id_no = request.POST.get('id_no')
            instrument_number= request.POST.get('t_id')
            today = date.today()
            obj = empmast.objects.filter( idcard_no=id_no,ticket_no=ti_no).values('empname','emptype','shopno','empno').distinct()
            obj1 = MG5.objects.filter(id_no=id_no,t_no=ti_no).values('optr','chkr').distinct()
            obj2 = ms_tools_master.objects.values('instrument_number','make').distinct()
            obj3=ms_tools_master.objects.filter(instrument_number=instrument_number).values('make').distinct()
            if len(obj1)== 0:
                obj1=range(0, 1)
            if "Superuser" in rolelist:
                  tm=shop_section.objects.all()
                  tmp=[]
                  for on in tm:
                      tmp.append(on.section_code)
                  context = {
                        'roles':tmp,
                        'lenm' :2,
                        'nav':nav,
                        'ip':get_client_ip(request),
                        'obj': obj,
                        'obj1': obj1,
                        'obj2': obj2,
                        'obj3': obj3,
                        'sub': 1,
                        'date':today,
                        'ticket_no': ti_no,
                        'id_no': id_no,
                        'subnav':subnav,
                  }
            elif(len(rolelist)==1):
                  for i in range(0, len(rolelist)):
                      req = empmast.objects.all().filter(idcard_no=rolelist[i]).distinct()
                      idcard_no =idcard_no | req
                      
                  context = {
                        'roles' :rolelist,
                        'usermaster':usermaster,
                        'lenm' :len(rolelist),
                        'nav': nav,
                        'ip': get_client_ip(request),
                        'obj': obj,
                        'obj1': obj1,
                        'obj3': obj3,
                        'sub': 1,
                        'idcard_no': idcard_no,
                        'subnav':subnav,
                        'date':today, 
                        'ticket_no': ti_no,
                        'obj2': obj2,
                  }
            elif(len(rolelist)>1):
                  context = {
                        'lenm' :len(rolelist),
                        'nav':nav,
                        'ip':get_client_ip(request),
                        'usermaster':usermaster,
                        'roles' :rolelist,
                        'obj': obj,
                        'obj1': obj1,
                        'obj2': obj2,
                        'obj3': obj3,
                        'sub': 1,
                        'ticket_no': ti_no,
                        'id_no': id_no,
                        'subnav':subnav,
                        'date':today, 

                  }
        if submitvalue=='Save':
                shopno= request.POST.get('shop_no')
                empno = request.POST.get('staff_no')
                emp_name= request.POST.get('name')
                super_in = request.POST.get('emptype')
                id_no=request.POST.get('id_no')
                ticket_no=request.POST.get('t_no')
                t_id=request.POST.get('t_id')
                date=request.POST.get('date')
                t_desc=request.POST.get('make1')
                optr=request.POST.get('optr')
                chkr=request.POST.get('chkr')

                now = datetime.datetime.now()
                dt_string = now.strftime("%H:%M:%S")
                MG5.objects.create(id_no=str(id_no),t_id=str(t_id),t_desc=str(t_desc), t_no=str(ticket_no), shop_sec=str(shopno), staff_no=str(empno), name=str(emp_name), super_in=str(super_in), date=str(date), optr=str(optr), chkr=str(chkr), last_modified=str(dt_string) )
                messages.success(request, 'Successfully Done!, Select new values to proceed')

        if submitvalue=='Generate report':
            return mg5report(request)
            
    return render(request, "mg5view.html", context)


def mg5getticket(request):
    if request.method == "GET" and request.is_ajax():

        idcard_no = request.GET.get('id_no')

        ticket = empmast.objects.filter(idcard_no=idcard_no).values('ticket_no').exclude(ticket_no__isnull=True).distinct()
        ticket_no = list(ticket)
        return JsonResponse(ticket_no, safe=False)
    return JsonResponse({"success": False}, status=400)

def mg5gettooldesc(request):
    if request.method == "GET" and request.is_ajax():

        make = request.GET.get('make')

        tool_desc = list(ms_tools_master.objects.filter(instrument_number=make).values('make'))
        return JsonResponse(tool_desc, safe=False)
    return JsonResponse({"success": False}, status=400)


@login_required
@role_required(urlpass='/mg5report/')
def mg5report(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    idcard_no = empmast.objects.none()
    obj=empmast.objects.all().values('idcard_no').distinct()
    objj=empmast.objects.filter(idcard_no=idcard_no).values('ticket_no').distinct()
    if "Superuser" in rolelist:
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'obj':obj,
        }
    elif(len(rolelist)==1):
        for i in range(0, len(rolelist)):
            req = empmast.objects.all().filter(idcard_no=rolelist[i]).distinct()
            idcard_no =idcard_no | req

        context = {
            'sub':0,
            'subnav':subnav,
            'lenm' :len(rolelist),
            'idcard_no':idcard_no,
            'nav':nav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist
        }
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist
        }
    if request.method == "POST":
        submitvalue = request.POST.get('proceed')
        if submitvalue=='Proceed':
            rolelist=usermaster.role.split(", ")
            wo_nop = empmast.objects.none()
            ti_no = request.POST.get('t_no')
            id_no = request.POST.get('id_no')
            instrument_number= request.POST.get('t_id')
            today = date.today()
            obj = MG5.objects.filter( id_no=id_no,t_no=ti_no).values('shop_sec','staff_no', 'name', 'date', 'super_in', 'optr', 'chkr', 'id_no', 't_no', 't_id', 'last_modified', 'to_no', 't_desc').distinct()
            obj1 = MG5.objects.filter(id_no=id_no,t_no=ti_no).values('optr','chkr').distinct()
            obj2 = ms_tools_master.objects.values('instrument_number','make').distinct()
            obj3=  ms_tools_master.objects.filter(instrument_number=instrument_number).values('make').distinct()
            if len(obj1)== 0:
                obj1=range(0, 1)
            if "Superuser" in rolelist:
                  tm=shop_section.objects.all()
                  tmp=[]
                  for on in tm:
                      tmp.append(on.section_code)
                  context = {
                        'roles':tmp,
                        'lenm' :2,
                        'nav':nav,
                        'ip':get_client_ip(request),
                        'obj': obj,
                        'obj1': obj1,
                        'obj2': obj2,
                        'obj3': obj3,
                        'sub': 1,
                        'date':today,
                        'ticket_no': ti_no,
                        'id_no': id_no,
                        'subnav':subnav,
                  }
            elif(len(rolelist)==1):
                  for i in range(0, len(rolelist)):
                      req = empmast.objects.all().filter(idcard_no=rolelist[i]).distinct()
                      idcard_no =idcard_no | req
                      
                  context = {
                        'roles' :rolelist,
                        'usermaster':usermaster,
                        'lenm' :len(rolelist),
                        'nav': nav,
                        'ip': get_client_ip(request),
                        'obj': obj,
                        'obj1': obj1,
                        'obj3': obj3,
                        'sub': 1,
                        'idcard_no': idcard_no,
                        'subnav':subnav,
                        'date':today, 
                        'ticket_no': ti_no,
                        'obj2': obj2,
                  }
            elif(len(rolelist)>1):
                  context = {
                        'lenm' :len(rolelist),
                        'nav':nav,
                        'ip':get_client_ip(request),
                        'usermaster':usermaster,
                        'roles' :rolelist,
                        'obj': obj,
                        'obj1': obj1,
                        'obj2': obj2,
                        'obj3': obj3,
                        'sub': 1,
                        'ticket_no': ti_no,
                        'id_no': id_no,
                        'subnav':subnav,
                        'date':today, 

                  }
        if submitvalue=='Save':
                shopno= request.POST.get('shop_no')
                empno = request.POST.get('staff_no')
                emp_name= request.POST.get('name')
                super_in = request.POST.get('emptype')
                id_no=request.POST.get('id_no')
                ticket_no=request.POST.get('t_no')
                t_id=request.POST.get('t_id')
                
                date=request.POST.get('date')
                t_desc=request.POST.get('make1')
                optr=request.POST.get('optr')
                chkr=request.POST.get('chkr')
                now = datetime.datetime.now()
                dt_string = now.strftime("%H:%M:%S")
                tot = request.POST.get('totaltools')
                
                MG5.objects.create(id_no=str(id_no),t_id=str(t_id),t_desc=str(t_desc), t_no=str(ticket_no), shop_sec=str(shopno), staff_no=str(empno), name=str(emp_name), super_in=str(super_in), date=str(date), optr=str(optr), chkr=str(chkr), last_modified=str(dt_string) )
                
                messages.success(request, 'Successfully Done!, Select new values to proceed')

        if submitvalue=='Generate report':
            return mg5report(request)
            
    return render(request, "mg5report.html", context)

@login_required
@role_required(urlpass='/mg10views/')
def mg10views(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    name = empmast.objects.values('empname').exclude(empname__isnull=True).distinct()
    prtname=[]
    for i in name:
        prtname.append(i['empname'])
        
    shop_sec = request.GET.get('shop_sec')
    w1 = Shemp.objects.filter(shopsec=shop_sec).values('staff_no').exclude(staff_no__isnull=True).distinct()
    prtticket=[] 
    for i in w1:
        ty=i['staff_no']
        pop=empmast.objects.filter(empno__contains=ty).values('ticket_no')
        prtticket.append(pop)

    payrate = empmast.objects.values('payrate').exclude(payrate__isnull=True).distinct()
    prtpay=[]
    for i in payrate:
        prtpay.append(i['payrate'])


    
    if "Superuser" in rolelist:
        tm=shop_section.objects.all()
        tmp=[]
        
        for on in tm:
            tmp.append(on.section_code)
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles':tmp,
            'prtname':prtname,
            'prtpay':prtpay,
            'prtticket':prtticket,
        }
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):

            w1 = Oprn.objects.filter(shop_sec=rolelist[i]).values('part_no').distinct()
            req = mg10.objects.filter(part_no__in=w1).values('batch_no').distinct()
            wo_nop = wo_nop | req
        context = {
            'sub':0,
            'subnav':subnav,
            'lenm' :len(rolelist),
            'wo_nop':wo_nop,
            'nav':nav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist,
            'prtname':prtname,
            'prtpay':prtpay,
            'prtticket':prtticket,
        }
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist,
            'prtname':prtname,
            'prtpay':prtpay,
            'prtticket':prtticket,
        }
        
    if request.method == "POST":

        submitvalue = request.POST.get('proceed')

        if submitvalue=='Proceed':
            date = request.POST.get('date')
            shop_sec = request.POST.get('shop_sec')
            month = request.POST.get('month')
            ticket = request.POST.get('ticket')
            obj1 = mg10.objects.filter(shop_sec=shop_sec,month=month).values('sno','date','ticket_no','name','payrate','cat','eiwdate','remarks').distinct()
     
            obj3=mg10.objects.all().count()
            wer=obj3+1
            w1 = list(Shemp.objects.filter(shopsec=shop_sec).values('staff_no').exclude(staff_no__isnull=True).distinct()) 
            prtticket=[]
            for i in w1:
                ty=i['staff_no']
                pop=empmast.objects.filter(empno__contains=ty).values('ticket_no')
                for i in pop:
                    prtticket.append(i['ticket_no'])

            ticket = request.POST.get('ticket')

            context = {
            'obj1': obj1,
            'mytry':"rimjhim",
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'shop_sec': shop_sec,
            'month':month,
            'date':date,
            'wer':wer,
            'prtname':prtname,
            'prtpay':prtpay,
            'prt':prtticket,
            'prtticket':prtticket,
            'ticket':ticket,
            'sub': 1, 
                    
            }
        if submitvalue=='submit':
            leng=request.POST.get('len')

            tot= request.POST.get('total')            
            tot = int(tot)+1
            for i in range(1,int(tot)):
                date = request.POST.get('date')
                shop_sec = request.POST.get('shop_sec')
                month = request.POST.get('month')
                ticket = request.POST.get('ticket'+str(i))                
                sno = request.POST.get('sno'+str(i))               
                name = request.POST.get('name'+str(i))
                payrate = request.POST.get('payrate'+str(i))
                category = request.POST.get('category'+str(i)) 
                eiwdate = request.POST.get('eiwdate'+str(i))
                remark = request.POST.get('remark'+str(i))
               
                mg10.objects.create(
                    shop_sec=str(shop_sec),
                    month=str(month),
                    date=str(date),
                    sno=str(sno),
                    ticket_no=str(ticket),
                    name=str(name),
                    payrate=str(payrate),
                    cat=str(category),
                    eiwdate=str(eiwdate),
                    remarks=str(remark),                     
                    )

            messages.success(request, 'Successfully Done!, Select new values to proceed')
    return render(request,"mg10views.html",context)

def mg10Submitdata(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        ticket = request.GET.get('ticket1')
        date = request.GET.get('date')         
        month = request.GET.get('month')                      
        sno = request.GET.get('sno1')               
        name = request.GET.get('name1')
        payrate = request.GET.get('payrate1')
        category = request.GET.get('category1') 
        eiwdate = request.GET.get('eiwdate1')
        remark = request.GET.get('remark1')
        mg10.objects.create(
            shop_sec=str(shop_sec),
            month=str(month),
            date=str(date),
            sno=str(sno),
            ticket_no=str(ticket),
            name=str(name),
            payrate=str(payrate),
            cat=str(category),
            eiwdate=str(eiwdate),
            remarks=str(remark),             
            login_id=str(request.user)                
        )
        obj3=mg10.objects.all().count()
        wer=obj3+1

        obj1 =list(mg10.objects.filter(shop_sec=shop_sec,month=month).values('sno','date','ticket_no','name','payrate','cat','eiwdate','remarks').distinct())
        
    
        context={
            'obj1':obj1,
            'wer':wer
        }         
        return JsonResponse({'data':context}, safe = False)
    return JsonResponse({"success":False}, status=400)

def mg10updatedata(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec2')
        ticket = request.GET.get('ticket2')
        date = request.GET.get('date2')         
        month = request.GET.get('month2')                      
        sno = request.GET.get('sno2')               
        name = request.GET.get('name2')
        payrate = request.GET.get('payrate2')
        category = request.GET.get('category2') 
        eiwdate = request.GET.get('eiwdate2')
        remark = request.GET.get('remark2')
        mg10.objects.filter(sno=sno).update(
            shop_sec=str(shop_sec),
            month=str(month),
            date=str(date),
            sno=str(sno),
            ticket_no=str(ticket),
            name=str(name),
            payrate=str(payrate),
            cat=str(category),
            eiwdate=str(eiwdate),
            remarks=str(remark),                     
        ) 
        obj3=mg10.objects.all().count()
        wer=obj3+1
        obj1 =list(mg10.objects.filter(shop_sec=shop_sec,month=month).values('sno','date','ticket_no','name','payrate','cat','eiwdate','remarks').distinct())
        
        context={
            'obj1':obj1,
            'wer':wer
        }         
        return JsonResponse({'data':context}, safe = False)
    return JsonResponse({"success":False}, status=400)

def mg10editdata(request):
    if request.method == "GET" and request.is_ajax():
        sno = request.GET.get('sno')
        obj1=list(mg10.objects.filter(sno=sno).values('month', 'date','sno','date','ticket_no','name','payrate','cat','eiwdate','remarks').distinct())
        
        context={
            'obj1':obj1,             
        }         
        return JsonResponse({'data':context}, safe = False)
    return JsonResponse({"success":False}, status=400)

def mg10checkdate(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        ticket = request.GET.get('ticket')
        d1 = M21.objects.filter(shop_sec=shop_sec).values('date').distinct()
        date_values = []
        return JsonResponse(d1, safe = False)
    return JsonResponse({"success":False}, status=400)
    
           
    

    

def mg10getpayrate(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        ticket = request.GET.get('ticket')
        ticket = list(empmast.objects.filter(ticket_no=ticket).values('payrate').distinct())
        return JsonResponse(ticket, safe = False)
    return JsonResponse({"success":False}, status=400)

def mg10getname(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        ticket = request.GET.get('two')
        wname = empmast.objects.filter(ticket_no=ticket).values('empname').distinct()
        myname = wname[0]['empname']
        context={
            'prt':myname,
        }
        return JsonResponse({'cont':context}, safe = False)
    return JsonResponse({"success":False}, status=400)


def mg10getcat(request):
    if request.method == "GET" and request.is_ajax():
        ticket = request.GET.get('two')
        w1 = list(empmast.objects.filter(ticket_no=ticket).values('empno','payrate').exclude(empno__isnull=True).distinct())
        t=w1[0]['empno']
        payrate=w1[0]['payrate']
        w2=str(t)
        w4=w2[6:11]
        w3= list(Shemp.objects.filter(staff_no=w4).values('cat').exclude(cat__isnull=True).distinct())[0]
        context={
            'prt':w3['cat'],
            'payrate':payrate,
        }
        return JsonResponse({'cont':context}, safe = False)
    return JsonResponse({"success":False}, status=400)


@login_required
@role_required(urlpass='/mg10report/')
def mg10report(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    name = empmast.objects.values('empname').exclude(empname__isnull=True).distinct()
    prtname=[]
    for i in name:
        prtname.append(i['empname'])
        
    shop_sec = request.GET.get('shop_sec')
    w1 = Shemp.objects.filter(shopsec=shop_sec).values('staff_no').exclude(staff_no__isnull=True).distinct()
    prtticket=[] 
    for i in w1:
        ty=i['staff_no']
        pop=empmast.objects.filter(empno__contains=ty).values('ticket_no')
        prtticket.append(pop)

    payrate = empmast.objects.values('payrate').exclude(payrate__isnull=True).distinct()
    prtpay=[]
    for i in payrate:
        prtpay.append(i['payrate'])
    
    if "Superuser" in rolelist:
        tm=shop_section.objects.all()
        tmp=[]
        
        for on in tm:
            tmp.append(on.section_code)
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles':tmp,
            'prtname':prtname,
            'prtpay':prtpay,
            'prtticket':prtticket,
        }
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):

            w1 = Oprn.objects.filter(shop_sec=rolelist[i]).values('part_no').distinct()
            req = mg10.objects.filter(part_no__in=w1).values('batch_no').distinct()
            wo_nop = wo_nop | req
        context = {
            'sub':0,
            'subnav':subnav,
            'lenm' :len(rolelist),
            'wo_nop':wo_nop,
            'nav':nav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist,
            'prtname':prtname,
            'prtpay':prtpay,
            'prtticket':prtticket,
        }
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist,
            'prtname':prtname,
            'prtpay':prtpay,
            'prtticket':prtticket,
        }
        
    if request.method == "POST":

        submitvalue = request.POST.get('proceed')

        if submitvalue=='Proceed':
            date = request.POST.get('date')
            shop_sec = request.POST.get('shop_sec')
            month = request.POST.get('month')
            ticket = request.POST.get('ticket')

            obj1 = mg10.objects.filter(shop_sec=shop_sec,month=month).values('sno','date','ticket_no','name','payrate','cat','eiwdate','remarks').distinct()
        
            tms=shop_section.objects.all()
            tmp=[]        
            for on in tms:
                tmp.append(on.section_code)
            tm=shop_section.objects.filter(section_code=shop_sec).all()
            shop_code=tm[0].shop_code

            w1 = list(Shemp.objects.filter(shopsec=shop_sec).values('staff_no').exclude(staff_no__isnull=True).distinct()) 

            prtticket=[]
            for i in w1:
                ty=i['staff_no']
                pop=empmast.objects.filter(empno__contains=ty).values('ticket_no')
                for i in pop:
                    prtticket.append(i['ticket_no'])

            leng=obj1.count()
            ticket = request.POST.get('ticket')

            context = {
            'obj1': obj1,
            'mytry':"rimjhim",
            'leng':leng,
            'shop_sec': shop_sec,
            'month':month,
            'date':date,
            'prtname':prtname,
            'prtpay':prtpay,
            'prt':prtticket,
            'prtticket':prtticket,
            'ticket':ticket,
            'roles':tmp,
            'sub': 1, 
            'nav':nav,
            'subnav':subnav,
            'shop_code': shop_code[0:3], 
                    
        }

    return render(request,"mg10report.html",context)


@login_required
@role_required(urlpass='/mg11views/')
def mg11views(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    name = empmast.objects.values('empname').exclude(empname__isnull=True).distinct()
    prtname=[]
    for i in name:
        prtname.append(i['empname'])
        
    shop_sec = request.GET.get('shop_sec')
    w1 = Shemp.objects.filter(shopsec=shop_sec).values('staff_no').exclude(staff_no__isnull=True).distinct()
    prtticket=[] 
    for i in w1:
        ty=i['staff_no']
        pop=empmast.objects.filter(empno__contains=ty).values('ticket_no')
        prtticket.append(pop)
    
    if "Superuser" in rolelist:
        tm=shop_section.objects.all()
        tmp=[]
        
        for on in tm:
            tmp.append(on.section_code)
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles':tmp,
            'prtname':prtname,
            'prtticket':prtticket,
        }
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):
            w1 = Oprn.objects.filter(shop_sec=rolelist[i]).values('part_no').distinct()
            req = mg11.objects.filter(part_no__in=w1).values('batch_no').distinct()
            wo_nop = wo_nop | req
        context = {
            'sub':0,
            'subnav':subnav,
            'lenm' :len(rolelist),
            'wo_nop':wo_nop,
            'nav':nav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist,
            'prtname':prtname,
            'prtticket':prtticket,
        }
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist,
            'prtname':prtname,
            'prtticket':prtticket,
        }
        
    if request.method == "POST":

        submitvalue = request.POST.get('proceed')

        if submitvalue=='Proceed':
            date = request.POST.get('date')
            shop_sec = request.POST.get('shop_sec')
            month = request.POST.get('month')

            obj1 = mg11.objects.filter(shop_sec=shop_sec,month=month).values('sno','date','ticket_no','name','remarks').distinct()
           
            obj3=mg11.objects.all().count()

            wer=obj3+1

            w1 = list(Shemp.objects.filter(shopsec=shop_sec).values('staff_no').exclude(staff_no__isnull=True).distinct()) 

            prtticket=[]
            for i in w1:
                ty=i['staff_no']
                pop=empmast.objects.filter(empno__contains=ty).values('ticket_no')
                for i in pop:
                    prtticket.append(i['ticket_no'])

            ticket = request.POST.get('ticket')

            context = {
            'obj1': obj1,
            'mytry':"rimjhim",
            'shop_sec': shop_sec,
            'month':month,
            'date':date,
            'wer':wer,
            'prtname':prtname,
            'prt':prtticket,
            'prtticket':prtticket,
            'ticket':ticket,
            'sub': 1, 
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
                    
        }

        if submitvalue=='submit':
            leng=request.POST.get('len')

            shop_sec= request.POST.get('shop_sec')
            staff_no = request.POST.get('staff_no')
            name = request.POST.get('name')
            tot= request.POST.get('total')
            tot = int(tot)+1

            for i in range(1,int(tot)):
                date = request.POST.get('date')
                shop_sec = request.POST.get('shop_sec')
                month = request.POST.get('month')
                sno = request.POST.get('sno'+str(i))
                ticket = request.POST.get('ticket'+str(i))
                name = request.POST.get('name'+str(i))
                remark = request.POST.get('remark'+str(i))
                mg11.objects.create(shop_sec=str(shop_sec),month=str(month),date=str(date),sno=str(sno),ticket_no=str(ticket),name=str(name),remarks=str(remark))


    return render(request,"mg11views.html",context)

def mg11Submitdata(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        ticket = request.GET.get('ticket')
        date = request.GET.get('date')         
        month = request.GET.get('month')                      
        sno = request.GET.get('sno')               
        name = request.GET.get('name')        
        remark = request.GET.get('remark')
        mg11.objects.create(
            shop_sec=str(shop_sec),
            month=str(month),
            date=str(date),
            sno=str(sno),
            ticket_no=str(ticket),
            name=str(name),           
            remarks=str(remark),             
            login_id=str(request.user)                
        )
        obj3=mg11.objects.all().count()
        wer=obj3+1

        obj1 =list(mg11.objects.filter(shop_sec=shop_sec,month=month).values('sno','date','ticket_no','name','remarks').distinct())
        
        context={
            'obj1':obj1,
            'wer':wer,
            
        }         
        return JsonResponse({'data':context}, safe = False)
    return JsonResponse({"success":False}, status=400)
    
def mg11updatedata(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec2')
        ticket = request.GET.get('ticket2')
        date = request.GET.get('date2')         
        month = request.GET.get('month2')                      
        sno = request.GET.get('sno2')               
        name = request.GET.get('name2')        
        remark = request.GET.get('remark2')
        mg11.objects.filter(sno=sno).update(
            shop_sec=str(shop_sec),
            month=str(month),
            date=str(date),
            sno=str(sno),
            ticket_no=str(ticket),
            name=str(name),            
            remarks=str(remark),                     
        ) 
        obj3=mg11.objects.all().count()
        wer=obj3+1
        obj1 =list(mg11.objects.filter(shop_sec=shop_sec,month=month).values('sno','date','ticket_no','name','remarks').distinct())
        
        context={
            'obj1':obj1,
            'wer':wer
        }         
        return JsonResponse({'data':context}, safe = False)
    return JsonResponse({"success":False}, status=400)

    
 
def mg11editdata(request):
    if request.method == "GET" and request.is_ajax():
        sno = request.GET.get('sno')
        obj1=list(mg11.objects.filter(sno=sno).values('month', 'date','sno','date','ticket_no','name','remarks').distinct())
        
        context={
            'obj1':obj1,             
        }         
        return JsonResponse({'data':context}, safe = False)
    return JsonResponse({"success":False}, status=400)
       

def mg11getname(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        ticket = request.GET.get('two')
        wname = empmast.objects.filter(ticket_no=ticket).values('empname').distinct()
        myname = wname[0]['empname']
        context={
            'prt':myname,
        }
        return JsonResponse({'cont':context}, safe = False)
    return JsonResponse({"success":False}, status=400)

@login_required
@role_required(urlpass='/mg11report/')
def mg11report(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    name = empmast.objects.values('empname').exclude(empname__isnull=True).distinct()
    prtname=[]
    for i in name:
        prtname.append(i['empname'])
        
    shop_sec = request.GET.get('shop_sec')
    w1 = Shemp.objects.filter(shopsec=shop_sec).values('staff_no').exclude(staff_no__isnull=True).distinct()
    prtticket=[] 
    for i in w1:
        ty=i['staff_no']
        pop=empmast.objects.filter(empno__contains=ty).values('ticket_no')
        prtticket.append(pop)
    if "Superuser" in rolelist:
        tm=shop_section.objects.all()
        tmp=[]
        
        for on in tm:
            tmp.append(on.section_code)
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles':tmp,
            'prtname':prtname,
            'prtticket':prtticket,
        }
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):
            w1 = Oprn.objects.filter(shop_sec=rolelist[i]).values('part_no').distinct()
            req = mg11.objects.filter(part_no__in=w1).values('batch_no').distinct()
            wo_nop = wo_nop | req
        context = {
            'sub':0,
            'subnav':subnav,
            'lenm' :len(rolelist),
            'wo_nop':wo_nop,
            'nav':nav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist,
            'prtname':prtname,
            'prtticket':prtticket,
        }
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist,
            'prtname':prtname,
            'prtticket':prtticket,
        }
        
    if request.method == "POST":

        submitvalue = request.POST.get('proceed')

        if submitvalue=='Proceed':
            date = request.POST.get('date')
            shop_sec = request.POST.get('shop_sec')
            month = request.POST.get('month')
            ticket = request.POST.get('ticket')

            obj1 = mg11.objects.filter(shop_sec=shop_sec,month=month).values('sno','date','ticket_no','name','remarks').distinct()

            obj3=mg11.objects.all().count()
            wer=obj3+1

            tm=shop_section.objects.filter(section_code=shop_sec).all()
            shop_code=tm[0].shop_code
            w1 = list(Shemp.objects.filter(shopsec=shop_sec).values('staff_no').exclude(staff_no__isnull=True).distinct()) 

            prtticket=[]
            for i in w1:
                ty=i['staff_no']
                pop=empmast.objects.filter(empno__contains=ty).values('ticket_no')
                for i in pop:
                    prtticket.append(i['ticket_no'])

            leng=obj1.count() 

            context = {
            'obj1': obj1,
            'mytry':"rimjhim",
            'leng':leng,
            'shop_sec': shop_sec,
            'month':month,
            'date':date,
            'wer':wer,
            'prtname':prtname,
            'prt':prtticket,
            'prtticket':prtticket,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'sub': 1, 
            'shop_code': shop_code[0:3], 
                    
        }

    return render(request,"mg11report.html",context)




@login_required
@role_required(urlpass='/m14hwview/')
def m14hwview(request):   
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist) 
    batch1 = list(Batch.objects.filter(status = 'R' , rel_date__isnull=False).values('bo_no').distinct())
    m13ref = list(M13.objects.filter(rej_cat='M14').values('slno').order_by('slno').distinct())
    if "Superuser" in rolelist:
        tm=shop_section.objects.all()
        tmp=[]
        for on in tm:
            tmp.append(on.section_code)

        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'ip':get_client_ip(request),
            'roles':tmp,
            'subnav':subnav,
            'm13ref' :m13ref,
            'batch1' :batch1, 
                   
        }
    return render(request,'m14hwview.html', context)

def m14getdate(request):
    if request.method == 'GET' and request.is_ajax():  
        partno_temp = request.GET.get('partno_temp')
        partnew = list(M13.objects.filter(slno = partno_temp ).values('epc','m13_date','m13_no','wo','wo_rep','reason','part_no','qty_rej','brn_no').distinct())
        s = list(partnew[0]['m13_date'])
        date='' . join(map(str,s))
        date = date[8:10] + "-" + date[5:7] + "-" + date[0:4]
        partnew[0]['m13_date'] = date
        return JsonResponse(partnew, safe = False)
    return JsonResponse({"success":False}, status=400)

def m14hwpart(request):
    if request.method == 'GET' and request.is_ajax():  
        partno_temp = request.GET.get('partno_temp')
        partnew=list(Part.objects.filter(partno = partno_temp).values('des').distinct())
        if str(partno_temp)=='':
            partnew.insert(0,'A')      
        else:
            if len(partnew)<=0:
                partnew.insert(0,'Z')
            elif len(partnew)>0:
                partnew.insert(0,'ZR')
        return JsonResponse(partnew, safe = False)
    return JsonResponse({"success":False}, status=400)



def m14hwbatch_no(request):
    if request.method == 'GET' and request.is_ajax():  
        batch_temp = request.GET.get('batch')
        batchnew=list(Batch.objects.filter(bo_no = batch_temp, status = 'R' , rel_date__isnull=False).values('part_no','ep_type','brn_no','loco_to','loco_fr','rel_date','status','batch_qty').distinct())
        if len(batchnew)<=0:
                batchnew.insert(0,'Z')
        elif len(batchnew)>0:
                batchnew.insert(0,'ZR')
        return JsonResponse(batchnew, safe = False)
    return JsonResponse({"success":False}, status=400)

def m14hwbatch_no1(request):
    if request.method == 'GET' and request.is_ajax():  
        batch_temp = request.GET.get('batch')
        part_temp = request.GET.get('part')
        batchnew=list(M14M4.objects.filter(bo_no = batch_temp,part_no=part_temp).values('assly_no','l_to','l_fr').distinct())
        if len(batchnew)<=0:
                batchnew.insert(0,'Z')
        elif len(batchnew)>0:
                batchnew.insert(0,'ZR')
        return JsonResponse(batchnew, safe = False)
    return JsonResponse({"success":False}, status=400)

def m14hwpm1(request):
    if request.method == 'GET' and request.is_ajax():  
        batch_temp = request.GET.get('batch')
        qty=request.GET.get('qty')
        lt=request.GET.get('lt')
        lf=request.GET.get('lf')
        batchnew=list(M14M4.objects.filter(bo_no = batch_temp,assly_no=qty,l_to=lt,l_fr=lf).values('unit','pm_no','brn_no','qty','epc').distinct())
        return JsonResponse(batchnew, safe = False)
    return JsonResponse({"success":False}, status=400)

def m14hwassly(request):
    if request.method == 'GET' and request.is_ajax():  
        temp = request.GET.get('temp')
        partnew = list(Part.objects.filter(partno = temp ).values('des').distinct())
        return JsonResponse(partnew, safe = False)
    return JsonResponse({"success":False}, status=400)

def m14hwasslyno(request):
    if request.method == 'GET' and request.is_ajax():  
        temp = request.GET.get('part')
        partnew = list(M14M4.objects.filter(bo_no = temp ).values('part_no').distinct())
        return JsonResponse(partnew, safe = False)
    return JsonResponse({"success":False}, status=400)

def m14hwsave(request):
    response_data = {}
    if request.method == 'GET' and request.is_ajax():
        m13_no = request.GET.get('sl_no')
        m13_date = request.GET.get('m13_date')
        char_wo = request.GET.get('char_wo')
        sl_no = request.GET.get('m13_no')
        batch_no = request.GET.get('batch_no')
        epc = request.GET.get('epc')
        brn_no = request.GET.get('brn_no')
        loco_from = request.GET.get('loco_from')
        loco_to = request.GET.get('loco_to')
        assly_no = request.GET.get('assly_no')
        assly_desc = request.GET.get('assly_desc')
        part_no = request.GET.get('part_no')
        part_desc = request.GET.get('part_desc')
        quantity = request.GET.get('quantity')
        unit = request.GET.get('unit')
        pm_no = request.GET.get('pm_no')
        m14_no = request.GET.get('m14_no')
        rforhw = request.GET.get('rforhw')
        loco_no = request.GET.get('loco_no')
        m14_date=datetime.datetime.now().strftime ("%d-%m-%Y")
        
        response_data=m14_no
        M14HW11.objects.create(doc_code='89',m14_no=str(m14_no),m14_date=str(m14_date),m13_no=str(m13_no),m13_date=str(m13_date),char_wo=str(char_wo),sl_no=str(sl_no),batch_no=str(batch_no),brn_no=brn_no,epc=str(epc),l_fr=str(loco_from),l_to=str(loco_to),pm_no=str(pm_no),part_no=str(part_no),part_desc=str(part_desc),qty=quantity,reason=str(rforhw),assly_no=str(assly_no),assly_desc=str(assly_desc),unit=unit,epc_old=str(''),loco_no=str(loco_no))
        Code.objects.filter(cd_type='21',code = 'M14' ).update(num_1=int(m14_no))
        return JsonResponse(response_data, safe = False)
    return JsonResponse({"success":False}, status=400)

def m14getdoc_no(request):
    if request.method == 'GET' and request.is_ajax():  
        temp = request.GET.get('temp')
        c_date = datetime.datetime.now().strftime ("%d-%m-%Y")
        docno = list(Code.objects.filter(cd_type='21',code = 'M14' ).values('num_1').order_by('-num_1').distinct())
        docno.insert(1,c_date)
        return JsonResponse(docno, safe = False)
    return JsonResponse({"success":False}, status=400)




@login_required
@role_required(urlpass='/m338view/')
def m338view(request):
    import datetime
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    if "Superuser" in rolelist:
        shopsec=shop_section.objects.all().distinct()        
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'ip':get_client_ip(request),
            'shopsec':shopsec,
            'subnav':subnav,
        }
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):
            req = M5DOCnew1.objects.all().filter(shop_sec=rolelist[i]).values('batch_no').distinct()
            wo_nop =wo_nop | req
            
        context = {
            'obj1' : obj1,
            'sub':0,
            'subnav':subnav,
            'lenm' :len(rolelist),
            'wo_nop':wo_nop,
            'nav':nav,
            'ip':get_client_ip(request),
            'roles' :rolelist
        }
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles' :rolelist
        }
    if request.method == "POST":
        
        submitvalue = request.POST.get('proceed')
        if submitvalue=='proceed':
            shop_sec = request.GET.get('shop_sec')
            staff_no = request.GET.get('staff_no')
            obj1 = list(empmast.objects.filter(empno = staff_no).values('empname','desig_longdesc','payrate').distinct())
            noprint=0
            context = {
                'obj1': obj1,
                'ran':range(1,32),
                'len': 31,
                'shop_sec': shop_sec,
                'noprint':noprint,
                'staff_no': staff_no,
                'sub':1,
                'nav':nav,
                
                'ip':get_client_ip(request),  
                'subnav':subnav,     
            }



        submitvalue = request.POST.get('final')
        if submitvalue=='final':
             
            obj = Intershop338()
    
            obj.shop_sec        = request.POST.get('shop_sec')
            obj.staffNo          = request.POST.get('staffNo')
            obj.staffName        = request.POST.get('staffName')
            obj.staffDesg      = request.POST.get('staffDesg')
            obj.reference_authority = request.POST.get('reference_authority')
            obj.staffRate = request.POST.get('staffRate')
            obj.toshop_sec    = request.POST.get('toshop_sec')
            d = request.POST.get('date1')
            s = d.split('-')
            month1 = s[1]
            day1 = s[0]
            year1 = s[2]

            date =  year1 + "-" + month1 + "-" + day1
            obj.date1 = datetime.datetime.strptime(date, '%Y-%m-%d')

            obj.login_id = str(request.user)
            obj.status = 'f'

            td = datetime.datetime.now()
            obj.current_date = td.strftime('%Y-%m-%d')
 
            obj.save()
            
        submitvalue = request.POST.get('draft')
        if submitvalue=='Save Draft':
            obj = Intershop338()          
            obj.shop_sec        = request.POST.get('shop_sec')
            obj.staffNo          = request.POST.get('staffNo')
            obj.staffName        = request.POST.get('staffName')
            obj.staffDesg      = request.POST.get('staffDesg')
            obj.reference_authority = request.POST.get('reference_authority')
            obj.staffRate = request.POST.get('staffRate')
            obj.toshop_sec    = request.POST.get('toshop_sec')
            d = request.POST.get('date1')
            s = d.split('-')
            month1 = s[1]
            day1 = s[0]
            year1 = s[2]
            date = day1 + "-" + month1 + "-" + year1 
            obj.date1 = datetime.datetime.strptime(date, '%d-%m-%Y')
            obj.login_id = str(request.user)
            obj.status = 'd'

            td = datetime.datetime.now()
            obj.current_date = td.strftime('%Y-%m-%d')
 
            obj.save()
    

        submitvalue = request.POST.get('viewdraft')
       
        if submitvalue =='viewdraft':      
           
            context = {  
                        'obj': obj, 
            }

    return render(request,"m338view.html",context)

def m338getdraftview(request):
    if request.method == "GET" and request.is_ajax():        
        obj = list(Intershop338.objects.filter(status = 'd').values('shop_sec', 'staffNo','staffName', 'staffDesg', 'reference_authority','staffRate', 'toshop_sec','date1').distinct())
        
        return JsonResponse(obj, safe = False)
    return JsonResponse({"success":False}, status=400)

def m338getempno(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        staff_no=list(empmast.objects.filter(shopno=shop_sec).values('empno').distinct())
          
        return JsonResponse(staff_no, safe = False)
    return JsonResponse({"success":False}, status=400)

def m338authority(request):
    if request.method == "GET" and request.is_ajax():
        reference_authority = request.GET.get('reference_authority')        
        return JsonResponse(reference_authority, safe = False)
    return JsonResponse({"success":False}, status=400)

def edit_status(request):
  
    if request.method == "GET" and request.is_ajax():       
        id = request.GET.get('id1')   
        shopno = request.GET.get('shopno') 
        empmast.objects.filter(empno = id).update(shopno = shopno) 
        Intershop338.objects.filter(staffNo = id).update(status = 'f')
        obj = list(Intershop338.objects.filter(status = 'd').values('shop_sec', 'staffNo','staffName', 'staffDesg', 'reference_authority','staffRate', 'toshop_sec','date1').distinct())
        
        return JsonResponse(obj, safe = False)
    return JsonResponse({"success":False}, status = 400)
def m338report(request):
    if request.method == "GET" and request.is_ajax():
        obj2 = Intershop338.objects.all()
        return JsonResponse(id, safe = False)
    return JsonResponse({"success":False}, status = 400)


def gen_report(request):
    if request.method == "GET" and request.is_ajax():
        dfrom = request.GET.get('date1')
        dto = request.GET.get('date2')

        obj = list(Intershop338.objects.filter(status = 'f',date1__gte=dfrom,date1__lte=dto).values('shop_sec', 'staffNo','staffName', 'staffDesg', 'reference_authority','staffRate', 'toshop_sec','date1').distinct())
       
        return JsonResponse(obj, safe = False)
    return JsonResponse({"success":False}, status = 400)







@login_required
@role_required(urlpass='/sanction_rollview/')

def sanction_rollview(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()                                          
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    if "Superuser" in rolelist:
        tm=Shemp.objects.all().values('shopsec').distinct()
        tmp=[]
        for on in tm:
            tmp.append(on['shopsec'])
            context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'ip':get_client_ip(request),
            'roles':tmp,
            'subnav':subnav,
        }
    elif(len(rolelist)==1):
        context = {
            'sub':0,
            'subnav':subnav,
            'lenm' :len(rolelist),
            'nav':nav,
            'ip':get_client_ip(request),                                                                                  
            'roles' :rolelist
        }
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles' :rolelist
        }
    if request.method == "POST":
        submitvalue = request.POST.get('proceed')
        if submitvalue=='Proceed':
            shop_sec= request.POST.get('shop_sec')
            reqf=list(sanctionSSE.objects.filter(shopsec=shop_sec).values('shopsec','desig','sanc'))
            shopname=list(Shop.objects.filter(shop=shop_sec).values('sh_desc').distinct())
            sub=empmast.objects.annotate(emp=Substr("empno",7,5)).distinct() 
            for i in range(0,len(reqf)):
                c=0
                for j in Shemp.objects.filter(staff_no__in=Subquery(sub.values('emp')),shopsec='2303',desgn__startswith=reqf[i]['desig']).values('name','staff_no').distinct():
                    c=c+1
                reqf[i].update({'roll':c})
            if "Superuser" in rolelist:
                tm=Shemp.objects.all().values('shopsec').distinct()  
                tmp=[]
                for on in tm:
                    tmp.append(on['shopsec'])
                context={
                    'sub':1,
                    'reqf':reqf,
                    'nav':nav,
                    'shop_sec':shop_sec,
                    'lenm' :2,
                    'roles':tmp,
                    'ip':get_client_ip(request),
                    'subnav':subnav,
                    'shopname':shopname,
                    
                }
            elif(len(rolelist)==1):
                context = {
                    'sub':1,
                    'reqf':reqf,
                    'nav':nav,
                    'shop_sec':shop_sec,
                    'lenm' :2,
                    'roles':tmp,
                    'ip':get_client_ip(request),
                    'subnav':subnav,
                    'shopname':shopname,
                }
            elif(len(rolelist)>1):
                context = {
                    'sub':1,
                    'reqf':reqf,
                    'nav':nav,
                    'shop_sec':shop_sec,
                    'lenm' :2,
                    'roles':tmp,
                    'ip':get_client_ip(request),
                    'subnav':subnav,
                    'shopname':shopname,
                }
            
            
        if submitvalue=='Proceed2':
            val2 = request.POST.get('updt_date')
            p=val2.split('-')
            year1=int(p[0])-60
            year=str(year1)
            year=year[2:]
            month=p[1]
            day=p[2]
            dat=day+"-"+month+"-"+year
            s = list(val2)
            date='' . join(map(str,s))
            date = date[8:10] + "-" + date[5:7] + "-" + date[0:4]
            pre_date_time=str(datetime.datetime.now())
            pre_date_time1=pre_date_time.split(' ')
            pre_date=pre_date_time1[0]
            pre=pre_date.split('-')
            pre_day=pre[2]
            pre_mon=pre[1]
            pre_year1=int(pre[0])-60
            pre_year=str(pre_year1)
            pre_year=pre_year[2:]
            pre_date_be_60=pre_day+"-"+pre_mon+"-"+pre_year
            shop_sec= request.POST.get('shop_sec')
            reqf=list(sanctionSSE.objects.filter(shopsec=shop_sec).values('shopsec','desig','sanc'))
            sub=empmast.objects.annotate(emp=Substr("empno",7,5)).distinct()
            for i in range(0,len(reqf)):
                c=0
                for j in Shemp.objects.filter(staff_no__in=Subquery(sub.values('emp')),shopsec='2303',desgn__startswith=reqf[i]['desig']).values('name','staff_no').distinct():
                    c=c+1
                reqf[i].update({'roll':c})
            k=empmast.objects.filter(birthdate__contains="-"+month+"-").filter(birthdate__contains="-"+year).values('empno','empname','birthdate','desig_longdesc')
            shopname=list(Shop.objects.filter(shop=shop_sec).values('sh_desc').distinct())
            context = {
                    'sub':1,
                    'k':k,
                    'nav':nav,
                    'lenm' :2,
                    'roles':tmp,
                    'ip':get_client_ip(request),
                    'subnav':subnav,
                    'shop_sec':shop_sec,
                    'reqf':reqf,
                    'date':date,
                    'shopname':shopname,
                }
    return render(request,"sanction_rollview.html",context)  




@login_required
@role_required(urlpass='/sanction_formview/')

def sanction_formview(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    if "Superuser" in rolelist:
        tm=Shemp.objects.all().values('shopsec').distinct()
        tmp=[]
        for on in tm:
            tmp.append(on['shopsec'])
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'ip':get_client_ip(request),
            'roles':tmp,
            'subnav':subnav,
        }
    elif(len(rolelist)==1):
        context = {
            'sub':0,
            'subnav':subnav,
            'lenm' :len(rolelist),
            'nav':nav,
            'ip':get_client_ip(request),
            'roles' :rolelist
        }
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles' :rolelist
        }
    if request.method == "POST":
        submitvalue = request.POST.get('proceed')
        if submitvalue=='submit':
            shop_sec= request.POST.get('shop_sec')
            totindb=request.POST.get('totmebs')
            now = datetime.datetime.now()
            user=request.user
            for tb in range(1,int(totindb)+1):
                desig=request.POST.get('desig1'+str(tb))
                san_no=request.POST.get('san_no'+str(tb))
                pre=list(sanctionSSE.objects.filter(shopsec=shop_sec,desig=desig).values('id'))
                if(shop_sec==None or desig==None or san_no==None or now==None or user==None):
                    pass
                else:
                    if len(pre)>0:
                        sanctionSSE.objects.filter(shopsec=shop_sec,desig=desig).update(sanc=str(san_no),login_id=str(user), last_modified=str(now))
                    else:
                        sanctionSSE.objects.create(shopsec=str(shop_sec), desig=str(desig), sanc=str(san_no),login_id=str(user), last_modified=str(now))          
    return render(request,"sanction_formview.html",context) 


@login_required
@role_required(urlpass='/IDcertificate/')
def IDcertificate(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    if "Superuser" in rolelist:
        d_id=list(empmast.objects.filter(~Q(desig_longdesc__startswith='CONTRACT'),dept_desc="MEDICAL",decode_paycategory='GAZ').values('empno').distinct())
        tmp=[]
        for on in d_id:
            tmp.append(on['empno'])
        context = {
            'sub':0,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'doctors':tmp
        }
    
    return render(request,"IDcertificate.html",context)        

def certificate(request):
    if request.method == "GET" and request.is_ajax():
        emp= request.GET.get('emp_no')
        obj=list(empmast.objects.filter(empno=emp).values('empname','desig_longdesc','ticket_no').distinct())
        return JsonResponse(obj,safe=False)
    return JsonResponse({"success":False}, status=400)       

def certificate1(request):
    if request.method == "GET" and request.is_ajax():
        demp= request.GET.get('emp_no')
        obj=list(empmast.objects.filter(empno=demp).values('empname','desig_longdesc').distinct())
        return JsonResponse(obj,safe=False)
    
    return JsonResponse({"success":False}, status=400)

def certificate2(request):
    l=[]
    if request.method == "GET" and request.is_ajax():
        no= request.GET.get('mc_no')
        obj=list(table1_id.objects.filter(medical=no).values('empno','demp_no','bookno').distinct())
        obj1=list(table2_id.objects.filter(medicalcno=no).values('accdient','part','nature','disability').distinct())
       
        l.append(obj)
        l.append(obj1)
        return JsonResponse(l,safe=False)
    
    return JsonResponse({"success":False}, status=400)

def save_s(request):
    context={}
    if request.method == "GET" and request.is_ajax():
            eno=request.GET.get('emp_no')
            dno=request.GET.get('demp_no')
            bno=request.GET.get('book_no')
            mcno=request.GET.get('mc_no')
            pb=request.GET.get('inj_part')
            n=request.GET.get('nature')
            dc=request.GET.get('contd')
            ad=request.GET.get('acc_date')
            obj=table1_id.objects.filter(medical=mcno).distinct()
            b=obj
            if len(obj) == 0:
                table1_id.objects.create(bookno=str(bno),medical=str(mcno),empno=str(eno),demp_no=str(dno))
                table2_id.objects.create(accdient=str(ad),part=str(pb),nature=str(n),disability=dc,medicalcno=b)
            else:
                table1_id.objects.filter(medical=mcno).update(bookno=str(bno),medical=str(mcno),empno=str(eno),demp_no=str(dno))
                table2_id.objects.filter(medicalcno=mcno).update(accdient=str(ad),part=str(pb),nature=str(n),disability=dc)
                

            return JsonResponse(context,safe=False)
    return JsonResponse({"success":False}, status=400)

def GenPdf(request, *args, **kwargs):
    date1 = request.GET.get('date1')
    book_no = request.GET.get('book_no')
    mc_no = request.GET.get('mc_no')
    acc_date = request.GET.get('acc_date')
    t_no=request.GET.get('t_no')
    emp_no = request.GET.get('emp_no')
    emp_name = request.GET.get('emp_name')
    emp_des = request.GET.get('emp_des')
    demp_no = request.GET.get('demp_no')
    dname = request.GET.get('dname')
    d_des = request.GET.get('d_des')
    inj_part = request.GET.get('inj_part')
    nature = request.GET.get('nature')
    contd = request.GET.get('contd')
   
    data = {
        'date1':date1,
        'book_no':book_no,
        'mc_no':mc_no,
        'acc_date':acc_date,
        'emp_no':emp_no,
        't_no':t_no,
        'emp_name':emp_name,
        'emp_des':emp_des,
        'demp_no':demp_no,
        'dname':dname,
        'd_des':d_des,
        'inj_part':inj_part,
        'nature':nature,
        'contd':contd,
           
        }
    pdf = render_to_pdf('certi.html', data)
    return HttpResponse(pdf, content_type='application/pdf')
    

@login_required
@role_required(urlpass='/partqry/')
def partqry(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    if "Superuser" in rolelist:
        tm=shop_section.objects.all()
        tmp=[]
        for on in tm:
            tmp.append(on.section_code)
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles':tmp
        }
    return render(request,'partqry.html',context)


def partqry1(request):
    if request.method == 'GET' and request.is_ajax():  
    
        part= request.GET.get('Txtpart_no')
        data_list=list(Partnew.objects.filter(gm_ptno=part).values('gm_ptno','des','part_no','it_cat','um','mb').distinct())        
        if(len(data_list)>0):
            return JsonResponse(data_list,safe = False)
        else:
            data_list=list(Partnew.objects.filter(part_no=part).values('gm_ptno','des','part_no','it_cat','um','mb').distinct())
            if(len(data_list)>0):
                return JsonResponse(data_list,safe = False)                          
    return JsonResponse({"success":False},status=400)




@login_required
@role_required(urlpass='/fitcertificate/')
def fitcertificate(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
   
    if "Superuser" in rolelist:
        tm=MG36.objects.all().values('shop_sec').distinct()
        tmp=[]
        for on in tm:
            tmp.append(on['shop_sec'])
        d_id=empmast.objects.filter(~Q(desig_longdesc__startswith='CONTRACT'),dept_desc="MEDICAL",decode_paycategory='GAZ').values('empno').distinct()
        tmp1=[]
        for on in d_id:
            tmp1.append(on['empno'])
        form=list(FitCertificate.objects.all().values('id').distinct().order_by('-id'))
        
        if(form==[]):
            formid=1
        else:
            formid=form[0]['id']
            formid=int(formid)+1

        context={
            'sub':0,
            'nav':nav,
            'ip':get_client_ip(request),
            'roles':tmp,
            'doctors':tmp1,
            'subnav':subnav,
            'formid':formid,
        }
    elif(len(rolelist)==1):        
        context = {
            'sub':0,
            'subnav':subnav,
            'lenm' :len(rolelist),            
            'nav':nav,
            'ip':get_client_ip(request),
            'roles' :rolelist
        }
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles' :rolelist
        }
       
    return render(request,"fitcertificate.html",context)        


def fitCertificateGetEmp(request):
    if request.method == "GET" and request.is_ajax():  
        
        shop_sec = request.GET.get('shop_sec')
        staff_no = list(MG36.objects.filter(shop_sec = shop_sec).values('staff_no').distinct())
        return JsonResponse(staff_no,safe = False)
    return JsonResponse({"success":False}, status=400)


def fitCertificateGetEmpAllDetails(request):
    if request.method == "GET" and request.is_ajax():   
        shop_sec = request.GET.get('shop_sec')
        
        staff_no = request.GET.get('staff_no')
              
        obj = empmast.objects.all().values('empno')
        
        for staff in obj:
            if staff['empno'][-5:] == staff_no:
                var = staff['empno']
                obj1 =list(empmast.objects.filter(empno=var).values('empname','desig_longdesc','dept_desc','station_des').distinct())

        return JsonResponse(obj1,safe = False)
    return JsonResponse({"success":False}, status=400)

def fitCertificateGetDoctor(request):
    if request.method == "GET" and request.is_ajax():  
        doctor_id = request.GET.get('doctor_id') 
        obj =list(empmast.objects.filter(empno=doctor_id).values('desig_longdesc','empname').distinct())
        return JsonResponse(obj,safe = False)
    return JsonResponse({"success":False}, status=400)

def FitcertificateGetDate(request):
    if request.method == "GET" and request.is_ajax():  
        staff_no = request.GET.get('staff_no')       
        dat=list(MG36.objects.filter(staff_no=staff_no).values('date_app').distinct())
        s=list(dat[0]['date_app'])
        date=''.join(map(str,s))
        date = date[8:10]+"-"+date[5:7]+"-"+date[0:4]
        return JsonResponse(date,safe = False)
    return JsonResponse({"success":False}, status=400)

def FitCertificatePdf(request, *args, **kwargs):
    formno = request.GET.get('formno')
    opdno = request.GET.get('opdno')
    wardno = request.GET.get('wardno')
    namep = request.GET.get('namep')
    desig = request.GET.get('desig')
    dept = request.GET.get('dept')
    station = request.GET.get('station')
    date1 = request.GET.get('date1')
    date2 = request.GET.get('date2')
    date3 = request.GET.get('date3')
    date4 = request.GET.get('date4')
    date5 = request.GET.get('date5')
    date6 = request.GET.get('date6')
    date7 = request.GET.get('date7')
    design = request.GET.get('design')
    named = request.GET.get('named')
    data = {
        'formno':formno,
        'opdno':opdno,
        'wardno':wardno,
        'namep':namep,
        'desig':desig,
        'dept':dept,
        'station':station,
        'date1':date1,
        'date2':date2,
        'date3':date3,
        'date4': date4,
        'date5':date5,
        'date6':date6,
        'date7':date7,
        'design':design, 
        'named':named,
        }
    pdf = render_to_pdf('fitcertificatereport.html', data)
    return HttpResponse(pdf, content_type='application/pdf')


def FitInfoSave(request):
    context={}
    if request.method == "GET" and request.is_ajax():
            form_no=request.GET.get('form_no')
            opd_no=request.GET.get('opd_no')
            ward_no=request.GET.get('ward_no')   
            shop_section=request.GET.get('shop_section')     
            staff_no=request.GET.get('staff_no')         
            date1=request.GET.get('date1')        
            date2=request.GET.get('date2')
            date3=request.GET.get('date3')
            date4=request.GET.get('date4')
            date5=request.GET.get('date5')
            date6=request.GET.get('date6')
            doc_id=request.GET.get('doc_id')
            doc_name=request.GET.get('doc_name')
            desg_doc=request.GET.get('desg_doc')
            date7=request.GET.get('date7')
            formno=str(form_no)+"/"+opd_no+"/"+ward_no
            cuser=request.user
            now = datetime.datetime.now()

            fitcertiobj =FitCertificate.objects.filter(form_no=formno).distinct()
            if len(fitcertiobj) == 0:
                    
                fitcertiobj=FitCertificate.objects.create(form_no=str(formno),shop_section=shop_section,staff_no=staff_no,treatement_start_date=date1,treatement_end_date=date2,
                leave_from =date3 ,leave_to=date4,fail_to_avail_from=date5,fail_to_avail_to=date6,desg_doc=desg_doc,
                date_of_fitcertificate=date7,login_id=str(cuser),doc_employee_id=doc_id,doctor_name=doc_name,last_modified=now)
            else:
                FitCertificate.objects.filter(form_no=formno).update(form_no=str(formno),shop_section=shop_section,staff_no=staff_no,treatement_start_date=date1,treatement_end_date=date2,
                leave_from =date3 ,leave_to=date4,fail_to_avail_from=date5,fail_to_avail_to=date6,desg_doc=desg_doc,
                date_of_fitcertificate=date7,login_id=str(cuser),doc_employee_id=doc_id,doctor_name=doc_name,last_modified=now)
                staff_no=FitCertificate.objects.all().values('staff_no').distinct()

            return JsonResponse(context,safe=False)
    return JsonResponse({"success":False}, status=400)

def FitDetails(request):
    if request.method == "GET" and request.is_ajax():  
        form_no = request.GET.get('formno') 
        l=[]
        obj =list(FitCertificate.objects.filter(form_no = form_no).values('treatement_start_date','treatement_end_date','staff_no','shop_section','leave_from','leave_to','fail_to_avail_from','fail_to_avail_to','doc_employee_id','doctor_name','desg_doc').distinct())
        for i in obj:
            s = i['staff_no']
        temp = empmast.objects.all().values('empno')
        for staff in temp:
            if staff['empno'][-5:] == s:
                var = staff['empno']
                obj1 =list(empmast.objects.filter(empno=var).values('empname','desig_longdesc','dept_desc','station_des').distinct())
        
        l.append(obj)
        l.append(obj1)
        return JsonResponse(l,safe = False)
    return JsonResponse({"success":False}, status=400)

@login_required
@role_required(urlpass='/mg21views/')
def mg21views(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    if "Superuser" in rolelist:
        tm=M5SHEMP.objects.all().values('shopsec').distinct()
        tmp=[]
        for on in tm:
            tmp.append(on['shopsec'])
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'ip':get_client_ip(request),
            'roles':tmp,
            'subnav':subnav,
        }
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):
            req = M5DOCnew.objects.all().filter(shop_sec=rolelist[i]).values('batch_no').distinct()
            wo_nop =wo_nop | req
            
        context = {
            'obj1' : obj1,
            'sub':0,
            'subnav':subnav,
            'lenm' :len(rolelist),
            'wo_nop':wo_nop,
            'nav':nav,
            'ip':get_client_ip(request),
            'roles' :rolelist
        }
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles' :rolelist
        }
    if request.method == "POST":
        
        submitvalue = request.POST.get('save')
        if submitvalue=='proceed':
            shop_sec = request.GET.get('shop_sec')
            staff_no = request.GET.get('staff_no')
            obj1 = list(empmast.objects.filter(empno = staff_no).values('empname','desig_longdesc','payrate').distinct())
            noprint=0
            context = {
                'obj1': obj1,
                'ran':range(1,32),
                'len': 31,
                'shop_sec': shop_sec,
                'noprint':noprint,
                'staff_no': staff_no,
                'sub':1,
                'nav':nav,
                'ip':get_client_ip(request),  
                'subnav':subnav,     
            }


        submitvalue = request.POST.get('SAVE')
        if submitvalue=='SAVE':
             
            obj = MG21TAB()
    
            obj.shop_sec        = request.POST.get('shop_sec')
            obj.staffNo          = request.POST.get('staffNo')
            obj.staffName        = request.POST.get('staffName')
            obj.staffDesg      = request.POST.get('staffDesg')
            obj.reportno      = request.POST.get('sse1')
            obj.reportdate = request.POST.get('date1')
            obj.resumedate = request.POST.get('date2')
            obj.sse    = request.POST.get('sse')
            obj.login_id            = str(request.user)
            obj.current_date     = datetime.datetime.now().strftime("%d-%m-%Y")
            obj.save()

            context = {
                        'obj': obj,
                        'subnav':subnav,
            }

    return render(request,"mg21views.html",context)

def mg21getreportno(request):
    if request.method == "GET" and request.is_ajax():
        reportno = request.GET.get('reportno')
        reportno=list(MG21TAB.objects.filter(reportno=reportno).values('staffNo').distinct())
        return JsonResponse(reportno, safe = False)
    return JsonResponse({"success":False}, status=400)

def m27getWorkOrder(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        wono = list(M5DOCnew.objects.filter(shop_sec = shop_sec).values('batch_no').distinct())
        return JsonResponse(wono, safe = False)
    return JsonResponse({"success":False}, status=400)





def m338get_details(request):
    if request.method == "GET" and request.is_ajax():
        staff_no = request.GET.get('staff_no') 
        shop_sec = request.GET.get('shop_sec')
        obj = empmast.objects.all().values('empno','empname','desig_longdesc') 
        obj1=[]  
        for staff in obj:
            
            if staff['empno'][-5:] == staff_no:
                var = staff['empno']
                obj1 = list(empmast.objects.filter(empno = var).values('empno','empname','desig_longdesc', 'payrate').distinct())
        return JsonResponse(obj1, safe = False)
    return JsonResponse({"success":False}, status=400)

@login_required
@role_required(urlpass='/mg47view/')
def mg47view(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    des=list(empmast.objects.filter(desig_longdesc__startswith="SENIOR SECTION").values('desig_longdesc','empno').distinct() | empmast.objects.filter(desig_longdesc__startswith="Sr.SECTION").values('desig_longdesc','empno').distinct() | empmast.objects.filter(desig_longdesc__startswith="Sr. SECTION ENGINEER").values('desig_longdesc','empno').distinct() | empmast.objects.filter(desig_longdesc__startswith="SECTION").values('desig_longdesc','empno').distinct())
    if "Superuser" in rolelist:
        tm=empmast.objects.all().values('empno').distinct()
        tmp=[]     
        for on in tm:
             tmp.append(on['empno'])
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'ip':get_client_ip(request),
            'roles':des,
            'subnav':subnav,
        }   
    if request.method == "POST":
        submitvalue = request.POST.get('Submit')
        if submitvalue=='Submit':
            to_sse = request.POST.get('to_sse')
            num= request.POST.get('num')
            date = request.POST.get('date')
            allocable_to = request.POST.get('allocable_to')
            issued_on = request.POST.get('issued_on')
            empno = request.POST.get('empno')
            from_sse = request.POST.get('from_sse')
            now = datetime.datetime.now()
            user=request.user
            obj =MG47_table1.objects.filter(num=num).distinct()
            b=num
            if len(obj) == 0:      
                b=MG47_table1.objects.create(to_sse=str(to_sse), num=str(num), date=str(date), allocable_to=str(allocable_to), issued_on=str(issued_on), empno=str(empno), from_sse=str(from_sse), login_id=str(user), current_date=str(now))
            else:
                MG47_table1.objects.filter(num=num).update(to_sse=str(to_sse), num=str(num), date=str(date), allocable_to=str(allocable_to), issued_on=str(issued_on), empno=str(empno), from_sse=str(from_sse), login_id=str(user), current_date=str(now))  
            hidtext=request.POST.get('hidtext')
            obj1 =list(MG47_table2.objects.values('id').filter(num=num).distinct())
            if len(obj1) == 0:    
                for i in range(1,int(hidtext)+1):
                    desc=request.POST.get('desc'+str(i))
                    demand=request.POST.get('demand'+str(i))
                    issued=request.POST.get('issued'+str(i))  
                    c=MG47_table2.objects.create(num=b,desc=str(desc), demand=str(demand), issued=str(issued))
            else:
                for i in range(1,int(hidtext)):
                    desc=request.POST.get('desc'+str(i))
                    demand=request.POST.get('demand'+str(i))
                    issued=request.POST.get('issued'+str(i))  
                    MG47_table2.objects.filter(id=obj1[i-1]['id']).update(num=b, desc=str(desc), demand=str(demand), issued=str(issued))  
    return render(request,'mg47view.html',context)
def mg47getfrom_sse(request):
    if request.method == "GET" and request.is_ajax():   
        empno = request.GET.get('empno')
        from_sse=list(empmast.objects.filter(empno= empno,desig_longdesc__startswith="SENIOR SECTION").values('desig_longdesc').distinct() | empmast.objects.filter(desig_longdesc__startswith="Sr.SECTION",empno= empno).values('desig_longdesc').distinct() | empmast.objects.filter(desig_longdesc__startswith="Sr. SECTION ENGINEER",empno= empno).values('desig_longdesc').distinct() | empmast.objects.filter(desig_longdesc__startswith="SECTION",empno= empno).values('desig_longdesc').distinct())
        return JsonResponse(from_sse,safe = False)
    return JsonResponse({"success":False}, status=400)
    
def mg47reportview(request, *args, **kwargs):
    to_sse = request.GET.get('to_sse')
    num = request.GET.get('num')
    date = request.GET.get('date')
    allocable_to = request.GET.get('allocable_to')
    issued_on = request.GET.get('issued_on')
    empno = request.GET.get('empno')
    from_sse = request.GET.get('from_sse')
    hidtext=request.GET.get('hidtext')
    for i in range(1,int(hidtext)+1):
        desc=request.GET.get('desc'+str(i))
        demand=request.GET.get('demand'+str(i))
        issued=request.GET.get('issued'+str(i))
        data = {
        'to_sse':to_sse,
        'num':num,
        'date':date,
        'desc':desc,
        'demand':demand,
        'issued':issued,
        'allocable_to':allocable_to,
        'issued_on':issued_on,
        'empno':empno,
        'from_sse':from_sse, 
        }
    pdf = render_to_pdf('mg47reportview.html', data)
    return HttpResponse(pdf, content_type='application/pdf')

def ExistingNumDetails(request):
    l=[]
    if request.method=="GET" and request.is_ajax():
        num=request.GET.get('num')
        obj=list(MG47_table1.objects.filter(num=num).values('to_sse','date','allocable_to','issued_on','empno','from_sse').distinct())
        obj1=list(MG47_table2.objects.filter(num=num).values('desc','demand','issued').distinct())
        l.append(obj)
        l.append(obj1)
        return JsonResponse(l,safe=False)
    return JsonResponse({"success":False}, status=400)

@login_required
@role_required(urlpass='/Tools/')
def Tools(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    if "Superuser" in rolelist:
        tm=Shop.objects.all().values('shop').distinct()
        
        tmp=[]
        for on in tm:
            tmp.append(on['shop'])

        tm1=list(empmast.objects.filter(Q(desig_longdesc__contains='WORKSHOP MANAGER')  | Q(desig_longdesc__contains='WORKSHOP  MANAGER')  ).values('empno').distinct())
        tmp1=[]
        for on in tm1:
            tmp1.append(on['empno'])
        tm2=list(empmast.objects.filter(desig_longdesc__contains='SECTION ENGINE').values('empno').distinct())
        
        tmp2=[]
        for on in tm2: 
            tmp2.append(on['empno'])
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'ip':get_client_ip(request),
            'roles':tmp,
            'wm_shop':tmp1,
            'shop':tmp2,
            'subnav':subnav,
        }
    if request.method =="POST":

        submitvalue = request.POST.get('submit')
     

        if submitvalue =='submit':
            form_no=request.POST.get('tool_form')
            sh_no=request.POST.get('sh_no')
            s_sec=request.POST.get('s_sec')
            date1=request.POST.get('date1')
            l_no=request.POST.get('l_no')
            new_req=request.POST.get('new_req')
            mod=request.POST.get('mod')
            add_req=request.POST.get('add_req')
            e_no=request.POST.get('e_no')
            d_no=request.POST.get('d_no')
            m_no=request.POST.get('m_no')
            des1=request.POST.get('des1')
            wm_name=request.POST.get('wm_name')
            wm_contact=request.POST.get('wm_contact')
            sse_name=request.POST.get('sse_name')
            sse_contact=request.POST.get('sse_contact')
            wman=request.POST.get('wman')
            sse=request.POST.get('sse')
            sup_name=request.POST.get('sup_name')
            sup_des=request.POST.get('sup_des')
            sup_mob=request.POST.get('sup_mob')
            obj=machine_tools.objects.filter(letter_no=l_no).distinct()
            b=obj
            if len(obj) == 0:
                machine_tools.objects.create(letter_no=str(l_no),shop_no=str(sh_no),shop_desc=str(s_sec),date=str(date1),new_requirement=str(new_req),modification=str(mod),additional=str(add_req),existing_drawing=e_no,component_drawing=str(d_no),machine_no=str(m_no),machine_description=str(des1),wsm_id=str(wman),sse_id=str(sse),wsm_name=str(wm_name),wsm_mobile=str(wm_contact),sse_name=str(sse_name),sse_mobile=str(sse_contact),name_supervisor=str(sup_name),desig_supervisor=str(sup_des),mobile_supervisor=str(sup_mob))
            else:
                machine_tools.objects.filter(letter_no=l_no).update(letter_no=str(l_no),shop_no=str(sh_no),shop_desc=str(s_sec),date=str(date1),new_requirement=str(new_req),modification=str(mod),additional=str(add_req),existing_drawing=e_no,component_drawing=str(d_no),machine_no=str(m_no),machine_description=str(des1),wsm_id=str(wman),sse_id=str(sse),wsm_name=str(wm_name),wsm_mobile=str(wm_contact),sse_name=str(sse_name),sse_mobile=str(sse_contact),name_supervisor=str(sup_name),desig_supervisor=str(sup_des),mobile_supervisor=str(sup_mob))
                
            hidtext=request.POST.get('hidtext')
            obj1 =list(mdescription.objects.values('id').filter(lno=l_no).distinct())
            if len(obj1) == 0:
                for i in range(2,int(hidtext)+1):                    
                    des=request.POST.get("des"+str(i))
                    quant=request.POST.get('quant'+str(i))
                    mdescription.objects.create(description=str(des),quantity=quant,lno=l_no)
            else:
                hidtext=request.POST.get('hidtext')
                for i in range(1,int(hidtext)):
                    des=request.POST.get('des'+str(i))
                    quant=request.POST.get('quant'+str(i))
                    mdescription.objects.filter(lno=l_no).update(description=str(des),quantity=quant)        
    
    return render(request,"Tools.html",context)

def shop_section_tool(request):
    if request.method == "GET" and request.is_ajax():
        sh_no= request.GET.get('sh_no')
        obj=list(Shop.objects.filter(shop=str(sh_no)).values('sh_desc').distinct())
        return JsonResponse(obj,safe=False)
    
    return JsonResponse({"success":False}, status=400)
def tools1(request):
    if request.method == "GET" and request.is_ajax():
        emp= request.GET.get('wman')
        obj=list(empmast.objects.filter(empno=emp).values('empname','contactno').distinct())
        return JsonResponse(obj,safe=False)
    
    return JsonResponse({"success":False}, status=400)

def tools2(request):
    if request.method == "GET" and request.is_ajax():
        emp= request.GET.get('sse')
        obj=list(empmast.objects.filter(empno=emp).values('empname','contactno').distinct())
        return JsonResponse(obj,safe=False)    
    return JsonResponse({"success":False}, status=400)

def tooling_submit(request):
    context={}
    if request.method == "GET" and request.is_ajax():
        form_no=request.GET.get('tool_form')
        dname=request.GET.get('dname')
        d_date=request.GET.get('d_date')
        gname=request.GET.get('gname')
        g_date=request.GET.get('g_date')
        c_date=request.GET.get('c_date')
        l_date=request.GET.get('l_date')
        ref_date=request.GET.get('ref_date')
        comment1=request.GET.get('comment1')
        comment2=request.GET.get('comment2')
        l_no=request.GET.get('l_no1')
        obj=list(machine_tools.objects.filter(letter_no=l_no).values('letter_no').distinct())
        
        if len(obj)>0:
            tooling1.objects.create( name_designer=str(dname),date_designer=str(d_date),name_guide=str(gname),date_guide=str(g_date),date_completion=str(c_date),date_loading=str(l_date),sno_loading=str(ref_date),commment1=str(comment1),commment2=str(comment2),lno=str(l_no))
        return JsonResponse(context,safe=False)
    return JsonResponse({"success":False}, status=400)    



def toolPdf(request, *args, **kwargs):
    l_no = request.GET.get('l_no1')
    obj=mdescription.objects.filter(lno=l_no).values('description','quantity').distinct()
    obj2=list(machine_tools.objects.filter(letter_no=l_no).values('shop_no','shop_desc','date','new_requirement','modification','additional','existing_drawing','component_drawing','machine_no','machine_description','wsm_id','sse_id','wsm_name','wsm_mobile','sse_name','sse_mobile','name_supervisor','desig_supervisor','mobile_supervisor').distinct())
    dname=request.GET.get('dname')
    d_date=request.GET.get('d_date')
    gname=request.GET.get('gname')
    g_date=request.GET.get('g_date')
    c_date=request.GET.get('c_date')
    l_date=request.GET.get('l_date')
    ref_date=request.GET.get('ref_date')
    comment1=request.GET.get('comment1')
    comment2=request.GET.get('comment2')
    data={
        'l_no':l_no,
        'obj':obj,
        'obj2':obj2,
        'dname':dname,
        'gname':gname,
        'd_date':d_date,
        'g_date':g_date,
        'c_date':c_date,
        'l_date':l_date,
        'ref_date':ref_date,
        'comment1':comment1,
        'comment2':comment2
    }
    pdf = render_to_pdf('toolreport.html', data)
    return HttpResponse(pdf, content_type='application/pdf')

def fetchdetails_tools(request):
    l=[]
    if request.method == "GET" and request.is_ajax():
        no= request.GET.get('l_no')
        obj=list(machine_tools.objects.filter(letter_no=no).values('letter_no','shop_no','shop_desc','date','new_requirement','modification','additional','existing_drawing','component_drawing','machine_no','machine_description','wsm_id','sse_id','wsm_name','wsm_mobile','sse_name','sse_mobile','name_supervisor','desig_supervisor','mobile_supervisor').distinct())
        obj1=list(mdescription.objects.filter(lno=no).values('description','quantity','lno').distinct())
        l.append(obj)
        l.append(obj1)
        return JsonResponse(l,safe=False)
    return JsonResponse({"success":False}, status=400)

@login_required
@role_required(urlpass='/rmqry/')
def rmqry(request):  
    return render(request,"rmqry.html")  

def rm_part_no_checkpartno(request): 
    if request.method == "GET" and request.is_ajax():
        part_no = request.GET.get('rm_part_no')     
        
        rm_part_no=list(Part.objects.filter(partno= part_no).values('des').distinct())
        rm_nstr=list(Nstr.objects.filter(ptc ='R').values('cp_part').distinct() | Nstr.objects.filter(ptc ='Q').values('cp_part').distinct()) 
      
        flag=0
        if(len(rm_part_no)==0):
            rm_part_no.insert(0,'N')
            
        else:
            rm_part_no.insert(0,'P')
            
        if(len(rm_nstr)==0):
            rm_nstr.insert(0,'X')
        else:
            rm_nstr.insert(0, 'W')
        rm_part_no.insert(2, rm_nstr)
        
        return JsonResponse(rm_part_no, safe = False)
    return JsonResponse({"success":False}, status=400)

def rmqry_proceed(request):  
    if request.method == "GET" and request.is_ajax():
        part_no =request.GET.get('proceed')    
        proceed=list(Part.objects.filter(partno=part_no).values('shop_ut').distinct())
        name=proceed[0]
        val=name.get('shop_ut')       
        proceed1=list(Code.objects.filter(code=val).values('alpha_1').distinct() & Code.objects.filter(cd_type='51').values('alpha_1').distinct())
        return JsonResponse(proceed,safe = False)
    return JsonResponse({"success":False}, status=400)


 
def rmqry_rpt(request):
            part_no = request.GET.get('rm_part_no')
            des= request.GET.get('des')   
            epcc=request.GET.get('epc')


            tem_list=[]
            tem_list_des=[]
            tem_list_drgno=[]
            tem_list_shop_ut=[]
            pp_part_from_t_table=[]
            qty_from_t_table=[]
            e_tem_list=[]
            e_tem_list_des=[]
            e_tem_list_drgno=[]
            e_tem_list_shop_ut=[]
            e_pp_part_from_t_table=[]
            e_qty_from_t_table=[]
            unit_list=[]
            
            ls=[]
            
            tt_tables=list(Nstr.objects.filter( ~Q(del_fl ='Y'),cp_part=part_no, l_to='9999').values('pp_part','epc','qty' ).order_by('epc','pp_part').distinct())
            for i in range(len(tt_tables)):
                val1=tt_tables[i].get('pp_part')
                val2=tt_tables[i].get('epc')
                val3=tt_tables[i].get('qty')
                t_tables.objects.create(pp_part=val1,epc=val2,qty=val3) 
            for z in range(len(tt_tables)):
                pp_part_from_t_table.append(tt_tables[z].get('pp_part'))
                
                length_pp_part_ttable=len(pp_part_from_t_table)
           
            for y in range(len(tt_tables)):
                qty_from_t_table.append(tt_tables[y].get('qty') )
                len_qty_from_t_table= len(qty_from_t_table)
            part_table = list(Part.objects.values('partno').distinct())
  
            for k in range(len(pp_part_from_t_table)):
                pp_part_val=pp_part_from_t_table[k]
                final1=list(Part.objects.filter(partno=pp_part_val).values('ptc','des','shop_ut','drgno' ))
            
            for i in range(len(final1)):
                var=final1[i]
                tem=var.get('ptc')
                tem_list.append(tem)
            len_tem_list=len(tem_list)

            for a in range(len(final1)):
                var11=final1[a]
                tem11=var11.get('des')
                tem_list_des.append(tem11)
            len_tem_list_des=len(tem_list_des)

            for s in range(len(final1)):
                var12=final1[s]
                tem12=var12.get('drgno')
                tem_list_drgno.append(tem12)
            len_tem_list_drgno=len(tem_list_drgno)

            for ss in range(len(final1)):
                var13=final1[ss]
                tem13=var13.get('shop_ut')
                tem_list_shop_ut.append(tem13)
            len_tem_list_shop_ut=len(tem_list_shop_ut)       
            for ss in range(len(final1)):
                unit=list(Code.objects.filter(code=tem_list_shop_ut[i]).values('alpha_1').distinct() & Code.objects.filter(cd_type='51').values('alpha_1').distinct())        
                for i in range(len(unit)):
                    f=unit[i].get('alpha_1')

                unit_list.append(f)
                 
            epc=list(Nstr.objects.filter( ~Q(del_fl ='Y'),cp_part=part_no,l_to='9999').values('epc').distinct())
            ct=len(epc)
            for i in range(len(epc)):
                val=epc[i].get('epc')

                ls.append(val)  
            context={
                'rm_part_no':part_no,
                'des': des,
                'epc':ls,
                'count':len_tem_list_des,
                'pp_part_from_t_table': pp_part_from_t_table,
                'length_pp_part_ttable': length_pp_part_ttable,
                'tem_list': tem_list,
                'len_tem_list': len_tem_list,
                'tem_list_des': tem_list_des,
                'len_tem_list_des': len_tem_list_des,
                'tem_list_drgno':tem_list_drgno,
                'len_tem_list_drgno': len_tem_list_drgno,
                'tem_list_shop_ut': tem_list_shop_ut,
                'len_tem_list_shop_ut' : len_tem_list_shop_ut,
                'qty_from_t_table': qty_from_t_table,
                'len_qty_from_t_table': len_qty_from_t_table,
                'unit_list':unit_list,
            } 
            return render(request,"rmqry_rpt.html",context) 

@login_required
@role_required(urlpass='/EpCpm/')
def EpCpm(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()

    my_date=Cpm.objects.all().values('updt_dt').distinct()
    my=[]
    for i in my_date:
        my.append(i['updt_dt'])
    my.sort(reverse= True)

    if "Superuser" in rolelist:
        tm=shop_section.objects.all()
        tmp=[]
        for on in tm:
            tmp.append(on.section_code)
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles':tmp,
            'lblDt': my[0],
        }
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):
            req = M13.objects.all().filter(shop=rolelist[i]).values('wo').distinct()
            wo_nop =wo_nop | req
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'wo_nop':wo_nop,
            'nav':nav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist,
            'subnav':subnav,
            'lblDt': my[0],
        }
        
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'nav':nav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist,
            'subnav':subnav,
            'lblDt': my[0],
        }
    


    return render(request,'EpCpm.html',context)
      

def unbound(request):
    if request.method == "GET" and request.is_ajax():
        Unbound = Code.objects.filter(cd_type='11').values('code').distinct()
        un=[]
        for j in Unbound:
            un.append(j['code'])
        un.sort()
        data =  {
            'un': un
        }
        return JsonResponse(un, safe=False)
    return JsonResponse({"success": False}, status=400)



def btnViewCPM_Click(request):
    lblDt= request.GET.get('lblDt')
    dtEpc= request.GET.get('dtEpc')
    dtPtc= request.GET.get('dtPtc')
    EpcAll= request.GET.get('EpcAll')
    PtcAll= request.GET.get('PtcAll')
    
    
    p=Cpm.objects.values_list('part_no')
    

    monthTemp=lblDt.split(' ')[0]
    dateTemp=lblDt.split(' ')[1]
    final1=monthTemp[0:3]+' '+dateTemp.split(',')[0]+' '+lblDt.split(' ')[2]
    date_time_str=final1
    date_time_obj=datetime.datetime.strptime(date_time_str,'%b %d %Y')
    date_1=date_time_obj.date()
   
    
    len1=len(dtEpc)
    len2=len(dtPtc)

    
    e=[]
    for k in range(0,len1):
        if(dtEpc[k]==" " or dtEpc[k]==","):
            pass
        else:
            e.append(dtEpc[k])

    pt=[]
    for k in range(0,len2):
        if(dtPtc[k]==","):
            pass
        else:
            pt.append(dtPtc[k])
            

    
    elen=len(e)
    plen=len(pt)
    p=[]

    for m in range(0,elen,2):
        epc=str(e[m])+str(e[m+1])

        for j in range(0,plen):

            if(EpcAll=='B' and PtcAll=='B'):
                c=Cpm.objects.filter(epc=epc,ptc=pt[j],qty__gt=0).values('epc','shop_ut','part_no','ptc').order_by('part_no').distinct()
                p.extend(c)
            
            else:
                c=Cpm.objects.filter(epc=epc,ptc=pt[j]).values('epc','shop_ut','part_no','ptc').order_by('part_no').distinct()
                p.extend(c)
    
    seen = set()
    new_l = []
    for d in p:
        t = tuple(d.items())
        if t not in seen:
            seen.add(t)
            new_l.append(d)
    

    ptdes=[]
    epc = [] 
    ptc = [] 
    shop_ut = [] 
    part_no=[]
    part=[]
    
    for x in p:
        epc.append(x['epc'])
        shop_ut.append(x['shop_ut'])
        if x['part_no'] not in part:
            part.append(x['part_no'])
        ptc.append(x['ptc'])
    for x in part:    
        ptdes.append({'part_no':x})
    
        

    for i in range(0,len(ptdes)):
        a =list(Part.objects.filter(partno=ptdes[i]['part_no']).values('des'))
        ptdes[i].update({'sl':(i+1)})
        ptdes[i].update({'ptc':ptc[i]})   
        ptdes[i].update({'des':a[0]['des']})
        ptdes[i].update({'epc':epc[i]})
        ptdes[i].update({'part_no':ptdes[i]['part_no']})
        ptdes[i].update({'shop_ut':shop_ut[i]})

    
    

    M2Eng =Cpm.objects.filter(epc='01',updt_dt=date_1,part_no__in=part,ptc__in=ptc).aggregate(Sum('qty'))
    S6Eng = Cpm.objects.filter(epc='02',updt_dt=date_1,part_no__in=part,ptc__in=ptc).aggregate(Sum('qty'))
    M2cEng = Cpm.objects.filter(epc='1F',updt_dt=date_1,part_no__in=part,ptc__in=ptc).aggregate(Sum('qty'))
    G2Eng = Cpm.objects.filter(epc='1A',updt_dt=date_1,part_no__in=part,ptc__in=ptc).aggregate(Sum('qty'))
    P2Eng = Cpm.objects.filter(epc='1C',updt_dt=date_1,part_no__in=part,ptc__in=ptc).aggregate(Sum('qty'))
    M2Loc = Cpm.objects.filter(epc='03',updt_dt=date_1,part_no__in=part,ptc__in=ptc).aggregate(Sum('qty'))
    M4Loc = Cpm.objects.filter(epc='04',updt_dt=date_1,part_no__in=part,ptc__in=ptc).aggregate(Sum('qty'))
    M2CaLoc = Cpm.objects.filter(epc='1E',updt_dt=date_1,part_no__in=part,ptc__in=ptc).aggregate(Sum('qty'))
    S6Loc = Cpm.objects.filter(epc='08',updt_dt=date_1,part_no__in=part,ptc__in=ptc).aggregate(Sum('qty'))
    G2ALoc = Cpm.objects.filter(epc='1N',updt_dt=date_1,part_no__in=part,ptc__in=ptc).aggregate(Sum('qty'))
    P2ALoc = Cpm.objects.filter(epc='1R',updt_dt=date_1,part_no__in=part,ptc__in=ptc).aggregate(Sum('qty'))
    M2Tra = Cpm.objects.filter(epc='1G',updt_dt=date_1,part_no__in=part,ptc__in=ptc).aggregate(Sum('qty'))
    M4Tra = Cpm.objects.filter(epc='1H',updt_dt=date_1,part_no__in=part,ptc__in=ptc).aggregate(Sum('qty'))
    S6Tra = Cpm.objects.filter(epc='1J',updt_dt=date_1,part_no__in=part,ptc__in=ptc).aggregate(Sum('qty'))
    P1Tra = Cpm.objects.filter(epc='1K',updt_dt=date_1,part_no__in=part,ptc__in=ptc).aggregate(Sum('qty'))
    G2Tra = Cpm.objects.filter(epc='1L',updt_dt=date_1,part_no__in=part,ptc__in=ptc).aggregate(Sum('qty'))
    P2Tra = Cpm.objects.filter(epc='1M',updt_dt=date_1,part_no__in=part,ptc__in=ptc).aggregate(Sum('qty'))




    for value1 in M2Eng.values():
        m2eng=str(value1)

    for value2 in S6Eng.values():
        s6eng=str(value2)

    for value3 in M2cEng.values():
        m2ceng=str(value3)

    for value4 in G2Eng.values():
        g2eng=str(value4)
    
    for value5 in P2Eng.values():
        p2eng=str(value5)

    for value6 in M2Loc.values():
        m2loc=str(value6)

    for value7 in M4Loc.values():
        m4loc=str(value7)

    for value8 in M2CaLoc.values():
        m2caloc=str(value8)
    
    for value9 in S6Loc.values():
        s6loc=str(value9)
    
    for value10 in G2ALoc.values():
        g2aloc=str(value10)

    for value11 in P2ALoc.values():
        p2aloc=str(value11)

    for value12 in M2Tra.values():
        m2tra=str(value12)
    
    for value13 in M4Tra.values():
        m4tra=str(value13)

    for value14 in S6Tra.values():
        s6tra=str(value14)

    for value15 in P1Tra.values():
        p1tra=str(value15)

    for value16 in G2Tra.values():
        g2tra=str(value16)
    
    for value17 in P2Tra.values():
        p2tra=str(value17)

        
    ptdes[0].update({'M2Eng':m2eng})
    ptdes[0].update({'S6Eng':s6eng})
    ptdes[0].update({'M2cEng':m2ceng})
    ptdes[0].update({'G2Eng':g2eng})
    ptdes[0].update({'P2Eng':p2eng})
    ptdes[0].update({'M2Loc':m2loc})
    ptdes[0].update({'M4Loc':m4loc})
    ptdes[0].update({'M2CaLoc':m2caloc})
    ptdes[0].update({'S6Loc':s6loc})
    ptdes[0].update({'G2ALoc':g2aloc})
    ptdes[0].update({'P2ALoc':p2aloc})
    ptdes[0].update({'M2Tra':m2tra})
    ptdes[0].update({'M4Tra':m4tra})
    ptdes[0].update({'S6Tra':s6tra})
    ptdes[0].update({'P1Tra':p1tra})
    ptdes[0].update({'G2Tra':g2tra})
    ptdes[0].update({'P2Tra':p2tra}) 
    today=date.today()
    context={
        'ptdes':ptdes,
        'today': today,
        'EpcAll':EpcAll,
        'PtcAll':PtcAll,
    }
    

    pdf=render_to_pdf('epcpmreport.html',context)
    return HttpResponse(pdf,content_type='application/pdf')


def btnClear_Click(request):
    return render(request,'EpCpm.html')

from django.db.models.functions import Substr
import datetime

@login_required
@role_required(urlpass='/qrycstr/')
def qrycstr(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()


    if "Superuser" in rolelist:
        tm=shop_section.objects.all()
        tmp=[]
        for on in tm:
            tmp.append(on.section_code)
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles':tmp
        }
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):
            req = M13.objects.all().filter(shop=rolelist[i]).values('wo').distinct()
            wo_nop =wo_nop | req
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'wo_nop':wo_nop,
            'nav':nav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist,
            'subnav':subnav,
        }
        
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'nav':nav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist,
            'subnav':subnav,
        }
    return render(request,'qrycstr.html',context)

def qrycstr1(request):
    if request.method == "GET" and request.is_ajax():   
        part_no=request.GET.get('val')
        c=list(Part.objects.filter(partno=part_no).values('des'))
        return JsonResponse(c, safe = False)
    return JsonResponse({"success":False}, status=400)

def qrycstr_ddCn_fun(request):
    if request.method == "GET" and request.is_ajax():   
        ddCn=request.GET.get('val1')
        
        ds=list(Cnote.objects.filter(chg_ind=ddCn).values('reg_no','reg_dt','ppl_cn_no','assly_no','ref_1_dt','updt_dt').annotate(mysubstring1=Substr('assly_desc',1,14),mysubstring2=Substr('ref_1',1,14)).order_by('ppl_cn_no').distinct())
        return JsonResponse(ds, safe = False)
    return JsonResponse({"success":False}, status=400)



def qrycstr_viewstatus(request):
    ddCN= request.GET.get('ddCN')
    rbtnquery= request.GET.get('rbtnquery')
    formateDate= request.GET.get('formateDate')
    
    if(rbtnquery=='3'):
        tbox = datetime.datetime.strptime(formateDate, "%d-%m-%Y")
    else:
        tbox = formateDate
   
    if(rbtnquery=="1"):
        tmpstr=Cstr.objects.values('reg_no','slno','pp_part','cp_part','l_fr','l_to','ptc','epc','qty','cutdia_no','cn_no','cn_date','acd','updt_dt','errmsg').filter(status='U',chg_ind=ddCN,cp_part=tbox).distinct().order_by('chg_ind','cp_part','reg_no')
    elif(rbtnquery=="2"):
        tmpstr=Cstr.objects.values('reg_no','slno','pp_part','cp_part','l_fr','l_to','ptc','epc','qty','cutdia_no','cn_no','cn_date','acd','updt_dt','errmsg').filter(status='U',chg_ind=ddCN,cn_no=tbox).distinct().order_by('chg_ind','cp_part','reg_no')
    elif(rbtnquery=="3"):
        tmpstr=Cstr.objects.values('reg_no','slno','pp_part','cp_part','l_fr','l_to','ptc','epc','qty','cutdia_no','cn_no','cn_date','acd','updt_dt','errmsg').filter(status='U',chg_ind=ddCN,updt_dt=tbox).distinct().order_by('chg_ind','cp_part','reg_no')

    cp_part=[]
    cn_no=[]
    for x in tmpstr:
        cp_part.append(x['cp_part'])
        cn_no.append(x['cn_no'])
    
    tmpstr1=Part.objects.filter(partno__in=cp_part).count()
    

    if tmpstr1 > 0:
        tmp=Part.objects.filter(partno__in=cp_part).values('des').distinct()
    else:
        tmp=[{'des':'null'}]
    
    desc=[]
    for y in tmp:
        desc.append(y['des'])

    

    tmpstr2=Cnote.objects.filter(chg_ind=ddCN,ppl_cn_no__in=cn_no).count()
    
    if tmpstr2 > 0:
        tmp1=Cnote.objects.filter(chg_ind=ddCN,ppl_cn_no__in=cn_no).values('ref_1').distinct()
    else:
        tmp1=[{'ref_1':'null'}]

    design=[]
    for z in tmp1:
        design.append(z['ref_1'])
    
    for j in range(len(tmpstr)):
        tmpstr[j].update({'des':desc[0]})
        if len(tmp1)==len(tmpstr):
            tmpstr[j].update({'design':design[j]})
        else:
            tmpstr[j].update({'design':design[0]})

    today = date.today()
    context={
        'today':today,
        'tmpstr':tmpstr,
    }
    pdf=render_to_pdf('qrycstrreport.html',context)
    return HttpResponse(pdf,content_type='application/pdf')

@login_required
@role_required(urlpass='/railwayshedmastermaintence/')
def railwayshedmastermaintence(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
   
    if "Superuser" in rolelist:
        bono=Batch.objects.filter(Q(bo_no__startswith='21') | Q(bo_no__startswith='24') | Q(bo_no__startswith='69') , status='R').values('bo_no').distinct().order_by('bo_no')
        tmp1=[]
        for on in bono:
            tmp1.append(on['bo_no'])
        context={
            'nav':nav,
            'ip':get_client_ip(request),
            'subnav':subnav,
            'bono':tmp1,

        }
    return render(request, "railwayshedmastermaintence.html",context)


def RailwayMasterGetDetails(request):
    if request.method == "GET" and request.is_ajax():
        bono=request.GET.get('bono')
        obj=list(Rlyshed.objects.filter(bo_no=bono).values('consignee','railway','shed').distinct())
        return JsonResponse(obj,safe=False)
    return JsonResponse({"success":False},status=400)

def SaveInfoRailwayShed(request):
    if request.method == "GET" and request.is_ajax():
        bono=request.GET.get('bono')
        consignee=request.GET.get('consignee')
        railway=request.GET.get('railway')
        shed=request.GET.get('shed')
        obj1=[]
        d1 = date.today()

        temp=Rlyshed.objects.values('bo_no').filter(bo_no=bono).distinct()
        if len(temp) == 0:
            temp=Rlyshed.objects.create(bo_no=str(bono),consignee=str(consignee),railway=str(railway),shed=str(shed),updt_dt=d1)
        else:
            Rlyshed.objects.filter(bo_no=bono).update(bo_no=str(bono),consignee=str(consignee),railway=str(railway),shed=str(shed),updt_dt=d1)
        return JsonResponse(obj1,safe=False)
    return JsonResponse({"success":False},status=400)

@login_required
@role_required(urlpass='/oprnview/')
def oprnview(request):

    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    
    
    if "Superuser" in rolelist:
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'ip':get_client_ip(request),
            'op_opnno' : wo_nop,
            'subnav':subnav,
        }

    return render(request,'oprnview.html',context)


def oprn_part_details(request):
    if request.method == "GET" and request.is_ajax():
        pno = request.GET.get('partno')
        obj = list(Part.objects.filter(partno = pno).values('des','ptc').distinct())
        return JsonResponse(obj, safe = False)
    return JsonResponse({"success":False}, status = 400)

def oprnget_opn(request):
    if request.method == "GET" and request.is_ajax():
        pno = request.GET.get('partno')
        obj = list(Oprn.objects.filter(part_no = pno).values('opn').distinct())
        return JsonResponse(obj, safe = False)
    return JsonResponse({"success":False}, status = 400)

def oprn_opndetails(request):
    
    if request.method == "GET" and request.is_ajax():
        op = request.GET.get('opnno')
        pno = request.GET.get('partno')
        obj = list(Oprn.objects.filter(opn = op, part_no = pno).values('shop_sec','des','lc_no','m5_cd','ncp_jbs','pa','at','lot').distinct())

        return JsonResponse(obj, safe = False)
    return JsonResponse({"success":False}, status = 400)
def oprn_dele_status(request):
    if request.method == "GET" and request.is_ajax():
        pno = request.GET.get('partno')
        op = request.GET.get('opnno')
        d = date.today().isoformat()
        Oprn.objects.filter(opn = op , part_no = pno).update(del_fl = 'y', updt_dt = d)
        return JsonResponse(obj, safe = False)
    return JsonResponse({"success":False}, status = 400)
    
def oprn_dupdate(request):
    if request.method == "GET" and request.is_ajax():
        pno = request.GET.get('partno')     
        obj = list(Oprn.objects.filter( part_no = pno).values('opn').distinct())
        return JsonResponse(obj, safe = False)
    return JsonResponse({"success":False}, status = 400)
def oprn_insert(request):
    if request.method == "GET" and request.is_ajax():
        part_no = request.GET.get('part_no')
        des = request.GET.get('des')
        opn = request.GET.get('opn')
        lc_no = request.GET.get('lc_no')
        shop_sec = request.GET.get('shop_sec')
        m5_cd = request.GET.get('m5_cd')
        ncp_jbs = request.GET.get('ncp_jbs')
        pa = request.GET.get('pa')
        at = request.GET.get('at')
        lot = request.GET.get('lot')
        Oprn.objects.create(part_no = part_no , opn = opn, des = des, lc_no = lc_no, shop_sec = shop_sec, m5_cd = m5_cd, ncp_jbs = ncp_jbs, pa = pa, at = at, lot = lot)
        return JsonResponse(opn, safe = False)
    return JsonResponse({"success":False}, status = 400)  

def oprn_update(request):

    if request.method == "GET" and request.is_ajax():
        part_no = request.GET.get('part_no')
        des = request.GET.get('des')
        opn = request.GET.get('opnno')
        lc_no = request.GET.get('lc_no')
        shop_sec = request.GET.get('shop_sec')
        m5_cd = request.GET.get('m5_cd')
        ncp_jbs = request.GET.get('ncp_jbs')
        pa = request.GET.get('pa')
        at = request.GET.get('at')
        lot = request.GET.get('lot') 
        obj = list(Oprn.objects.filter(part_no = part_no, opn = opn).values('part_no','opn','shop_sec','des','lc_no','m5_cd','ncp_jbs','pa','at','lot').distinct())
        Oprn.objects.filter(part_no = part_no, opn = opn).update(opn = opn, des = des, lc_no = lc_no, shop_sec = shop_sec, m5_cd = m5_cd, ncp_jbs = ncp_jbs, pa = pa, at = at, lot = lot)    
        return JsonResponse(obj, safe = False)
    return JsonResponse({"success":False}, status = 400)     

def oprn_lc_des(request):
    if request.method == "GET" and request.is_ajax():
        lc = request.GET.get('lcno')
        ss = request.GET.get('shopsec')
        obj = list(Lc1.objects.filter(lcno = lc, shop_sec = ss).values('des').distinct())
        return JsonResponse(obj, safe = False)
    return JsonResponse({"success":False}, status = 400)

def oprn_lc_no(request):
    if request.method == "GET" and request.is_ajax():
        ss = request.GET.get('shopsec')
        obj = list(Lc1.objects.filter(shop_sec = ss).values('lcno').distinct())
        return JsonResponse(obj, safe = False)
    return JsonResponse({"success":False}, status = 400)

def oprn_shop_validate(request):
    if request.method == "GET" and request.is_ajax():
        shop = request.GET.get('sec')
        obj = list(Shop.objects.values('shop').order_by('shop').distinct())
        return JsonResponse(obj, safe = False)
    return JsonResponse({"success":False}, status = 400)

def oprn_audit_save(request):
    if request.method == "GET" and request.is_ajax():
        by = str(request.user)
        time = datetime.datetime.now().time()
        val = dict(request.GET)
        k = list(val.keys())
        Oprn_audit.objects.create(updt_by = by, updt_time = time, updt_col = k)
        return JsonResponse(by, safe = False)
    return JsonResponse({"success":False}, status = 400)

@login_required
@role_required(urlpass='/screenforcutdiagramupdation/')
def screenforcutdiagramupdation(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
   
    if "Superuser" in rolelist:
        context={
            'nav' : nav,
            'ip' : get_client_ip(request),
            'subnav' : subnav,
        }
    return render(request,'screenforcutdiagramupdation.html',context)
def ScreenCutGetAllDetails(request):
    if request.method == "GET" and request.is_ajax():
        cno=request.GET.get('cutno')
        temp=list(Part.objects.filter(partno=cno).values('partno').distinct())
        if(len(temp)==0):
            return JsonResponse(temp,safe=False)
        else:

            obj=list(Cutdia.objects.filter(cutdia_no=cno,del_fl__isnull=True).values('ep_part','epc','l_fr','l_to','rm_part','rm_desc','thick_rm','rm_width',
            'rm_len','rm_spec','wt_rm','rm_unit','batch_size','rm_unit').distinct())
            obj1=list(Part.objects.filter(partno=cno).values('des','ptc').distinct())
            i=[]
            v=''
            v1=''
            if len(obj)!=0:
                v=obj[0]['epc']
                v1=obj[0]['rm_part']
            obj2=[]
            obj3=[]
            
            if v != "":
                obj2=list(Code.objects.filter(code=v,cd_type='11').values('alpha_1').distinct())
               
            if v1 != "":
                obj3=list(Part.objects.filter(partno=v1).values('ptc').distinct())
                   
            i.append(obj)
            i.append(obj1)
            i.append(obj2)
            i.append(obj3)
            return JsonResponse(i,safe=False)
    return JsonResponse({"success:False"},status=400)

def ScreenCutDiaValidateEpc(request):
    if request.method == "GET" and request.is_ajax():
        epc=request.GET.get('epc')
        
        obj=list(Code.objects.filter(code=epc,cd_type='11').values('alpha_1','code').distinct())
        if len(obj)==0:
            i=[]
            return JsonResponse(i,safe=False)
        else:    
            return JsonResponse(obj,safe=False)
    return JsonResponse({"success:False"},status=400)

def ScreenCutDiaValidateEpPartNo(request):
    if request.method == "GET" and request.is_ajax():
        eppartno = request.GET.get('eppartno')
        obj=list(Part.objects.filter(partno=eppartno).values('partno').distinct())
        if len(obj)==0:
            i=[]
            return JsonResponse(i,safe=False)
        return JsonResponse(obj,safe=False)
    return JsonResponse({"success:False"},status=400)

def ScreenCutDiaValidateRmPartNo(request):
    if request.method == "GET" and request.is_ajax():
        rmpartno = request.GET.get('rmpartno')
        obj=list(Part.objects.filter(partno=rmpartno).values('ptc','partno').distinct())
        if len(obj)==0:
            i=[]
            return JsonResponse(i,safe=False)
        else:   
            return JsonResponse(obj,safe=False)
    return JsonResponse({"success:False"},status=400)  

def ScreenCutDiaSave(request):
    if request.method == "GET" and request.is_ajax():
        obj=[]
        cutdiano=request.GET.get('cutdiano') 
        epc=request.GET.get('epc')  
        eppartno=request.GET.get('eppartno')
        rmpartno=request.GET.get('rmpartno')
        rmdesc=request.GET.get('rmdesc')
        rmunit=request.GET.get('rmunit')
        rmthick=request.GET.get('rmthick') 
        rmwidth=request.GET.get('rmwidth')
        rmlength=request.GET.get('rmlength')
        rmspec=request.GET.get('rmspec')
        rmweight=request.GET.get('rmweight')
        batchsize=request.GET.get('batchsize')  
        locofr=request.GET.get('locofr')
        locoto=request.GET.get('locoto')
        d1 = date.today()

        temp=Cutdia.objects.values('cutdia_no','del_fl').filter(cutdia_no=cutdiano).distinct()
        if len(temp) == 0:
            temp=Cutdia.objects.create(cutdia_no=str(cutdiano),ep_part=str(eppartno),epc=str(epc),l_fr=str(locofr),
            l_to=str(locoto),rm_part=str(rmpartno),rm_desc=str(rmdesc),thick_rm=rmthick,rm_width=rmwidth,rm_len=rmlength,
            rm_spec=str(rmspec),wt_rm = rmweight,rm_unit=str(rmunit),batch_size=str(batchsize),updt_dt=d1)
        elif temp[0]['del_fl']== 'Y' and len(temp) != 0:
            Cutdia.objects.filter(cutdia_no=cutdiano).update(cutdia_no=str(cutdiano),ep_part=str(eppartno),epc=str(epc),l_fr=str(locofr),
            l_to=str(locoto),rm_part=str(rmpartno),rm_desc=str(rmdesc),thick_rm=rmthick,rm_width=rmwidth,rm_len=rmlength,
            rm_spec=str(rmspec),wt_rm = rmweight,rm_unit=str(rmunit),batch_size=str(batchsize),updt_dt=d1,del_fl=None)
        
        else:
            obj=[1]
        return JsonResponse(obj,safe=False)
    return JsonResponse({"success:False"},status=400) 

def ScreenCutDiaUpdateYes(request):
    if request.method == "GET" and request.is_ajax():
        obj=[]
        cutdiano=request.GET.get('cutdiano') 
        epc=request.GET.get('epc')  
        eppartno=request.GET.get('eppartno')
        rmpartno=request.GET.get('rmpartno')
        rmdesc=request.GET.get('rmdesc')
        rmunit=request.GET.get('rmunit')
        rmthick=request.GET.get('rmthick') 
        rmwidth=request.GET.get('rmwidth')
        rmlength=request.GET.get('rmlength')
        rmspec=request.GET.get('rmspec')
        rmweight=request.GET.get('rmweight')
        batchsize=request.GET.get('batchsize')  
        locofr=request.GET.get('locofr')
        locoto=request.GET.get('locoto')
        d1 = date.today()
        Cutdia.objects.filter(cutdia_no=cutdiano).update(cutdia_no=str(cutdiano),ep_part=str(eppartno),epc=str(epc),l_fr=str(locofr),
            l_to=str(locoto),rm_part=str(rmpartno),rm_desc=str(rmdesc),thick_rm=rmthick,rm_width=rmwidth,rm_len=rmlength,
            rm_spec=str(rmspec),wt_rm = rmweight,rm_unit=str(rmunit),batch_size=str(batchsize),updt_dt=d1)

        return JsonResponse(obj,safe=False)
    return JsonResponse({"success:False"},status=400) 

def ScreenCutDiaDeleteYes(request):
    if request.method == "GET" and request.is_ajax():
        obj=[]
        cutdiano=request.GET.get('cutdiano') 
        d1 = date.today()
        Cutdia.objects.filter(cutdia_no=cutdiano).update(del_fl='Y',updt_dt=d1)

        return JsonResponse(obj,safe=False)
    return JsonResponse({"success:False"},status=400) 
    
def airbox_addloco(request):
    
    if request.method=="GET" and request.is_ajax():
        mybo = request.GET.get('selbo_no')
        myval=list(Batch.objects.filter(bo_no=mybo).values('ep_type').distinct())
        myvalue = list(Code.objects.filter(code=myval[0]['ep_type'],cd_type='11').values('alpha_1'))
        return JsonResponse(myvalue, safe = False)
    return JsonResponse({"success":False}, status=400)

def airbox_addeditloco(request):
    
    if request.method=="GET" and request.is_ajax():
        mybo = request.GET.get('batchNo')
        myval=list(Batch.objects.filter(bo_no=mybo).values('ep_type').distinct())
        myvalue = list(Code.objects.filter(code=myval[0]['ep_type'],cd_type='11').values('alpha_1'))
        return JsonResponse(myvalue, safe = False)
    return JsonResponse({"success":False}, status=400)

def fetchloco(request):
    if request.method=="GET" and request.is_ajax():
        mysno = request.GET.get('sels_no')
        myval1=list(WheelMachining.objects.filter(wheel_no=mysno).values('bo_no').distinct())
        myval2 = list(Batch.objects.filter(bo_no=myval1[0]['bo_no']).values('ep_type').distinct())
        myval3 = list(Code.objects.filter(code=myval2[0]['ep_type'],cd_type='11').values('alpha_1').distinct())
        return JsonResponse(myval3, safe = False)
    return JsonResponse({"success":False}, status=400)

def fetchaxleloco(request):
    if request.method=="GET" and request.is_ajax():
        mysno = request.GET.get('sels_no')
        myval1=list(AxleMachining.objects.filter(axle_no=mysno).values('bo_no').distinct())
        myval2 = list(Batch.objects.filter(bo_no=myval1[0]['bo_no']).values('ep_type').distinct())
        myval3 = list(Code.objects.filter(code=myval2[0]['ep_type'],cd_type='11').values('alpha_1').distinct())
        return JsonResponse(myval3, safe = False)
    return JsonResponse({"success":False}, status=400)

def fetchwheelpartno(request):
    if request.method=="GET" and request.is_ajax():
        mysno = request.GET.get('b_no')
        myval1=list(M2Doc.objects.filter(batch_no=mysno,f_shopsec='2304').values('rm_partno').distinct())
        myval2=''
        l=[]
        if len(myval1)>0:
                for i in range(0,len(myval1)):
                    l.append(myval1[i]['rm_partno'])
        if len(l)!=0:
            myval2 = list(Part.objects.filter(partno__in=l,des__startswith='WHEE').values('partno').distinct())
            msg=myval2[0]['partno']
        else:
             msg="false"
        return JsonResponse(msg, safe = False)
    return JsonResponse({"success":False}, status=400)

def fetchaxlepartno(request):
    if request.method=="GET" and request.is_ajax():
        mysno = request.GET.get('b_no')
        myval1=list(M2Doc.objects.filter(batch_no=mysno,f_shopsec='2304').values('rm_partno').distinct())
        myval2=''
        l=[]
        if len(myval1)>0:
                for i in range(0,len(myval1)):
                    l.append(myval1[i]['rm_partno'])
        if len(l)!=0:
            myval2 = list(Part.objects.filter(partno__in=l,des__startswith='AXL').values('partno').distinct())
            ll=len(myval2)
            if ll>0:
                msg=myval2[0]['partno']
            else :
                msg="false"
        else:
             msg="false"
        return JsonResponse(msg, safe = False)
    return JsonResponse({"success":False}, status=400)

def fetchwheeleditpartno(request):
    if request.method=="GET" and request.is_ajax():
        mysno = request.GET.get('b_no')
        myval1=list(WheelMachining.objects.filter(wheel_no=mysno).values('wheelp_no').distinct())
        myval2=myval1[0]['wheelp_no']
        return JsonResponse(myval1, safe = False)
    return JsonResponse({"success":False}, status=400)

def fetchaxleeditpartno(request):
    if request.method=="GET" and request.is_ajax():
        mysno = request.GET.get('b_no')
        myval1=list(AxleMachining.objects.filter(axle_no=mysno).values('axlep_no').distinct())
        myval2=myval1[0]['axlep_no']
        return JsonResponse(myval1, safe = False)
    return JsonResponse({"success":False}, status=400)

def FetchWheelInspectDetail(request):
    if request.method=="GET" and request.is_ajax():
        mysno = request.GET.get('sels_no')
        myval1=list(WheelMachining.objects.filter(wheel_no=mysno,dispatch_to="Inspected").values('ustwhl','ustwhl_date','ustwhl_status','hub_lengthwhl','tread_diawhl','rim_thicknesswhl','bore_diawhl','inspector_namewhl','datewhl').distinct())
        l=len(myval1)
        if l>0 :
            msg=myval1
        else :
            msg=["false"]
        return JsonResponse(msg, safe = False)
    return JsonResponse({"success":False}, status=400)

def FetchAxleInspectDetail(request):
    if request.method=="GET" and request.is_ajax():
        mysno = request.GET.get('sels_no')
        myval1=list(AxleMachining.objects.filter(axle_no=mysno,dispatch_to="Inspected").values('ustaxle','ustaxle_date','ustaxle_status','axlelength','journalaxle','throweraxle','wheelseataxle','gearseataxle','collaraxle','dateaxle','bearingaxle','abutmentaxle','inspector_nameaxle','journal_surfacefinishGE','wheelseat_surfacefinishGE','gearseat_surfacefinishGE','journal_surfacefinishFE','wheelseat_surfacefinishFE','gearseat_surfacefinishFE').distinct())
        l=len(myval1)
        if l>0 :
            msg=myval1
        else :
            msg=["false"]
        return JsonResponse(msg, safe = False)
    return JsonResponse({"success":False}, status=400)

def FetchPressInspectDetail(request):
    if request.method=="GET" and request.is_ajax():
        mysno = request.GET.get('sels_no')
        myval1=list(AxleWheelPressing.objects.filter(sno=mysno,dispatch_to="Inspected").values('wheelno_de','wheelno_nde','bullgear_make','bullgear_no','inspector_name','wheel_de_make','wheel_nde_make','wheel_nde_pressure','axle_make','msu_unit_no','bullgear_pressure','msu_unit_make','axle_box_no','axle_box_make','axle_box_clearance','suspension_bearing_de_no','suspension_bearing_de_make','suspension_bearing_nde_no','suspension_bearing_nde_make','cru_bearing_no_de','cru_bearing_make_de','cru_bearing_pressure_de','cru_bearing_no_nde','cru_bearing_make_nde','cru_bearing_pressure_nde','date','wheel_nde_pressure').distinct())
        l=len(myval1)
        if l>0 :
            msg=myval1
        else :
            msg=["false"]
        return JsonResponse(msg, safe = False)
    return JsonResponse({"success":False}, status=400)

def FetchPressInspectHHPDetail(request):
    if request.method=="GET" and request.is_ajax():
        mysno = request.GET.get('sels_no')
        myval2=list(AxleWheelPressing.objects.filter(sno=mysno,dispatch_to="HHP_Inspected").values('wheelno_de','wheelno_nde','bullgear_make','bullgear_no','inspector_name','wheel_de_make','wheel_nde_make','wheel_nde_pressure','axle_make','msu_unit_no','bullgear_pressure','msu_unit_make','axle_box_no','axle_box_make','axle_box_clearance','suspension_bearing_de_no','suspension_bearing_de_make','suspension_bearing_nde_no','suspension_bearing_nde_make','cru_bearing_no_de','cru_bearing_make_de','cru_bearing_pressure_de','cru_bearing_no_nde','cru_bearing_make_nde','cru_bearing_pressure_nde','date','wheel_nde_pressure','journal_no_de','journal_make_de','journal_no_nde','journal_make_nde').distinct())
        l1=len(myval2)
        if l1>0 :
            msg=myval2
        else :
            msg=["false"]
        return JsonResponse(msg, safe = False)
    return JsonResponse({"success":False}, status=400)

def FetchPinionInspectDetail(request):
    if request.method=="GET" and request.is_ajax():
        mysno = request.GET.get('sels_no')
        myval2=list(PinionPressing.objects.filter(sno=mysno,dispatch_to="Inspected").values('pinion_no','pinion_make','pinion_pressure','pinion_travel','blue_match').distinct())
        l1=len(myval2)
        if l1>0 :
            msg=myval2
        else :
            msg=["false"]
        return JsonResponse(msg, safe = False)
    return JsonResponse({"success":False}, status=400)

def FetchBogieInspectDetail(request):
    if request.method=="GET" and request.is_ajax():
        mysno = request.GET.get('sels_no')
        myval2=list(BogieAssembly.objects.filter(sno=mysno,dispatch_to="Inspected").values('axle_no','axle_location','traction_motor_no','gear_case_no','gear_case_make','msu_unit_no','break_rigging_make','coil_spring_make','sand_box_make','spheri_block_make','elastic_shop_make','horizontal_damper').distinct())
        l1=len(myval2)
        if l1>0 :
            msg=myval2
        else :
            msg=["false"]
        return JsonResponse(msg, safe = False)
    return JsonResponse({"success":False}, status=400)

def FetchBogieInspectHHPDetail(request):
    if request.method=="GET" and request.is_ajax():
        mysno = request.GET.get('sels_no')
        myval2=list(BogieAssembly.objects.filter(sno=mysno,dispatch_to="HHP_Inspected").values('axle_no','axle_location','traction_motor_no','gear_case_no','gear_case_make','msu_unit_no','break_rigging_make','coil_spring_make','sand_box_make','spheri_block_make','elastic_shop_make','horizontal_damper','secondary_coil_make','thrust_pad_make','break_cylinder_make','lateral_damper').distinct())
        l1=len(myval2)
        if l1>0 :
            msg=myval2
        else :
            msg=["false"]
        return JsonResponse(msg, safe = False)
    return JsonResponse({"success":False}, status=400)

@login_required
@role_required(urlpass='/nstrExpl/')
def nstrExpl(request):

    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    obj = list(Code.objects.filter(cd_type = 'M1').values('cd_type','code','alpha_1').order_by('code').distinct())
    
    if "Superuser" in rolelist:
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'obj':obj,
            'ip':get_client_ip(request),
            'op_opnno' : wo_nop,
            'subnav':subnav,
        }

    return render(request,'nstrExpl.html',context)

def nstrExpl_assdet(request):
    if request.method == "GET" and request.is_ajax():
        cd = request.GET.get('t')
        obj = list(Code.objects.filter(code = cd).values('alpha_2').distinct())
        alpha_2 = str(obj[0]['alpha_2'])
        t ={}
        if alpha_2.find(' ')-1 < 0:
            t['epc'] = alpha_2[:2]
        else:
            t['epc'] = alpha_2[:alpha_2.find(' ')]
        t2 = list(Code.objects.filter(code = cd,cd_type='M1').values('num_1','alpha_1').order_by('code').distinct())
        obj= []
        obj.append(t)
        obj.append(t2)
        return JsonResponse(obj, safe = False)
    return JsonResponse({"success":False}, status = 400) 

def nstrassly_det(request):
    if request.method == "GET" and request.is_ajax():
        epc = request.GET.get('t1')
        assly = request.GET.get('t2')
        o = []
        obj1 = list(Nstr.objects.filter(epc = epc, pp_part = assly).values('pp_part','cp_part','ptc','epc','l_fr','l_to','qty').order_by('cp_part').distinct())
        for i in range(0,len(obj1)):
           p = list(Part.objects.filter(partno = obj1[i]['pp_part']).values('des'))
           if len(p)!=0:
                obj1[i].update({'des':p[0]['des']})
        return JsonResponse(obj1, safe = False)
    return JsonResponse({"success":False}, status = 400)  

def nstrassly_parent(request):
    if request.method == "GET" and request.is_ajax():
        pp = request.GET.get('t1')
        cp = request.GET.get('t2')
        obj1 = list(Nstr.objects.filter( cp_part = pp ).values('pp_part','cp_part','ptc','epc','l_fr','l_to','qty').order_by('cp_part').distinct())
        for i in range(0,len(obj1)):
           p = list(Part.objects.filter(partno = obj1[i]['pp_part']).values('des'))
           if len(p)!=0:
                obj1[i].update({'des':p[0]['des']})
        return JsonResponse(obj1, safe = False)
    return JsonResponse({"success":False}, status = 400)

def nstrassly_child(request):
    if request.method == "GET" and request.is_ajax():
        pp = request.GET.get('t1') 
        cp = request.GET.get('t2') 
        obj1 = list(Nstr.objects.filter( pp_part = cp).values('pp_part','cp_part','ptc','epc','l_fr','l_to','qty').order_by('cp_part').distinct())
        for i in range(0,len(obj1)):
           p = list(Part.objects.filter(partno = obj1[i]['cp_part']).values('des'))
           if len(p)!=0:
                obj1[i].update({'des':p[0]['des']})
        return JsonResponse(obj1, safe = False)
    return JsonResponse({"success":False}, status = 400)  

def nstrassly_back(request):
    if request.method == "GET" and request.is_ajax():
        pp = request.GET.get('t1')
        cp = request.GET.get('t2')
        for i in range(0,len(obj1)):
           p = list(Part.objects.filter(partno = obj1[i]['pp_part']).values('des'))
           if len(p)!=0:
                obj1[i].update({'des':p[0]['des']})
        obj1 = list(Nstr.objects.filter( cp_part = pp).values('pp_part','cp_part','ptc','epc','l_fr','l_to','qty').order_by('cp_part').distinct())
        return JsonResponse(obj1, safe = False)
    return JsonResponse({"success":False}, status = 400)

@login_required
@role_required(urlpass='/partmaster/')
def partmaster(request):
    obj=list(Part.objects.values('ptc').distinct())
    tmp=[]
    for on in obj:
        tmp.append(on['ptc'])
    context={
        'role':tmp,
    }    
    if request.method =="POST":
        submitvalue = request.POST.get('submit')
        if submitvalue =='Save/Update':
            part_no=request.POST.get('partno_id')
            descr_id=request.POST.get('descr_id')
            drng_no_id=request.POST.get('drng_no_id')
            shop_unit_id=request.POST.get('shop_unit_id')
            lbl=request.POST.get('lbl')
            ptc_id=request.POST.get('ptc_id')
            m14split_code_id=request.POST.get('m14split_code_id')
            allowance_id=request.POST.get('allowance_id')
            obj=Part.objects.filter(partno=part_no).distinct()
            if len(obj) == 0:
                Part.objects.create(partno=str(part_no),des=str(descr_id),drgno=str(drng_no_id),shop_ut=str(shop_unit_id),ptc=str(ptc_id),m14splt_cd=str(m14split_code_id),allow_perc=int(allowance_id))
            else:
               Part.objects.filter(partno=part_no).update(des=str(descr_id),drgno=str(drng_no_id),shop_ut=str(shop_unit_id),ptc=str(ptc_id),m14splt_cd=str(m14split_code_id),allow_perc=int(allowance_id))
    return render(request,"partmaster.html",context)

def part_get(request):
    if request.method == "GET" and request.is_ajax():
        no= request.GET.get('partno_id')
        majg =no[0:2]
        subg1=no[2:4] 
        subg2=no[4:6] 
        sl_no=no[6:7] 
        lst=[majg,subg1,subg2,sl_no]
        part=''.join(map(str,lst))
        
        lst=[]
        for i in range(0,len(part)):
            lst.insert(i,int(part[i]))
        sum=0 
        cal=8
        for i in range(0,7):
            sum=sum + (lst[i] * cal)
            cal= cal - 1
        mod = sum % 11
        lst.insert(len(lst),mod) 
        part=''.join(map(str,lst)) 
        obj=list(Part.objects.filter(partno=no).values('des','drgno','shop_ut','ptc','m14splt_cd','allow_perc').distinct())
        obj.append(mod)
        return JsonResponse(obj,safe=False)

    return JsonResponse({"success":False}, status=400)   

def part_label(request):
    if request.method == "GET" and request.is_ajax():
        shop= request.GET.get('shop_unit_id')
        obj=list(Code.objects.filter(cd_type='51',code=shop).values('alpha_1').distinct())
        return JsonResponse(obj,safe=False)
    return JsonResponse({"success":False}, status=400)   

@login_required
@role_required(urlpass='/cnote/')
def cnote(request):

    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    obj = list(Cnote.objects.values('chg_ind').distinct())
    
    if "Superuser" in rolelist:
        context={
            'sub':0,
            'lenm' :len(rolelist),
            'nav':nav,
            'obj':obj,
            'ip':get_client_ip(request),
            'op_opnno' : wo_nop,
            'subnav':subnav,
        }

    return render(request,'cnote.html',context)

def cnote_get_details(request):
    if request.method == "GET" and request.is_ajax():
        cno = request.GET.get('cn')
        cind = request.GET.get('chng_ind')
        obj = list(Cnote.objects.filter(chg_ind = cind, ppl_cn_no = cno).values('reg_no','reg_dt','ref_1','ref_1_dt','cn_reg_dt','cn_dt','status','file_no','page_no','lett_no','assly_no', 'assly_desc').distinct())
        return JsonResponse(obj, safe = False)
    return JsonResponse({"success":False}, status = 400)

def assly_validation(request):
    if request.method == "GET" and request.is_ajax():
        asno = request.GET.get('an')
        obj = list(Part.objects.filter(partno = asno).values('partno','des').distinct())
        return JsonResponse(obj, safe = False)
    return JsonResponse({"success":False}, status = 400)

def allot_update(request):
    if request.method == "GET" and request.is_ajax():
        cn_no = request.GET.get('cn_no')
        chng_ind = request.GET.get('chng_ind')
        num = list(Code.objects.filter(cd_type = '21', code = 'MRG').values('num_1').order_by('cd_type','code').distinct())
        num = num[0]['num_1'] +1
        ref_1 = request.GET.get('ref_1')
        dt_ref = request.GET.get('dt_ref')
        cn_reg_dt = request.GET.get('cn_reg_dt')
        cn_dt = request.GET.get('cn_dt')
        edp_reg_no = request.GET.get('edp_reg_no')
        edp_reg_dt = request.GET.get('edp_reg_dt')
        page_no = request.GET.get('page_no')
        file_no = request.GET.get('file_no')
        ltr_no = request.GET.get('ltr_no')
        assly_no = request.GET.get('assly_no')
        assly_desc = request.GET.get('assly_desc')
        up_dt = request.GET.get('up_dt')
        sts = request.GET.get('sts')
        Code.objects.filter(cd_type = '21' , code = 'MRG').update(num_1 = num, lupd_date = up_dt)
        Cpart.objects.filter(ppl_cn_no = cn_no, reg_no = None).update(reg_no = edp_reg_no)
        Cstr.objects.filter(pp_part = None , cp_part = None).delete()
        Cstr.objects.filter(chg_ind = chng_ind, cn_no = cn_no, reg_no = None).update(reg_no = edp_reg_no)
        if(chng_ind == 'OPN'):
            Copn.objects.filter(part_no = None).delete()
            Copn.objects.filter(cn_no = cn_no, reg_no = None).update(reg_no = edp_reg_no)
        else:
            Cnote.objects.filter(chg_ind = chng_ind, ppl_cn_no = cn_no).update(reg_no = edp_reg_no, reg_dt = edp_reg_dt, file_no = file_no, page_no= page_no, cn_dt= cn_dt, updt_dt = up_dt, lett_no = ltr_no, status = sts, ref_1_dt = dt_ref, assly_no = assly_no, assly_desc = assly_desc, cn_reg_dt=cn_reg_dt)
        return JsonResponse(num, safe = False)
    return JsonResponse({"success":False}, status = 400)

def m5cardgen_getbrn(request):
     if request.method == "GET" and request.is_ajax():
        batch = request.GET.get('batch')
        assly = request.GET.get('assly')
        obj=list(Batch.objects.filter(bo_no=batch,part_no=assly).values('brn_no'))
        return JsonResponse(obj, safe = False)
     return JsonResponse({"success":False}, status = 400)

def cggetBatchNo(request):
     if request.method == "GET" and request.is_ajax():
        batch = request.GET.get('batch')
        mAsslyno = request.GET.get('mAsslyno')
        obj=list(Batch.objects.filter(part_no=mAsslyno).values('bo_no'))
        return JsonResponse(obj, safe = False)
     return JsonResponse({"success":False}, status = 400)

def m5cardgen_getassembly(request):
     if request.method == "GET" and request.is_ajax():
        obj=list(Batch.objects.all().values('part_no').exclude(part_no__isnull=True).distinct().order_by('part_no'))
        return JsonResponse(obj, safe = False)
     return JsonResponse({"success":False}, status = 400)

@login_required
@role_required(urlpass='/correctiveaction/')
def correctiveaction(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    temp=list(Code.objects.filter(cd_type='11').values('alpha_1').distinct())
    tmp1=[]
    for on in temp:
            tmp1.append(on['alpha_1'])   
    
    form=list(CorrectiveAction.objects.all().values('id').distinct().order_by('-id')) 
    if form==[]:
        sno=1
    else:
        sno=form[0]['id']
        sno=int(sno)+1  
    if "Superuser" in rolelist:
        context={
            'nav' : nav,
            'ip' : get_client_ip(request),
            'subnav' : subnav,
            'engtype' : tmp1,
            'sno' :sno,
        }
        if request.method == "POST": 
            submitvalue = request.POST.get('Report')
            past_failure_details=[]
            if submitvalue=='Report':
                sno = request.POST.get('sno')
                obj=list(CorrectiveAction.objects.filter(sno=sno).values('sno','date','pl_no','engine_loco_type','supplier_name',
                'rejection_percentage','past_failure_details','reporting_agency_name','failure_since_last_six_months',
                'probable_cause_redemy','employee_id','ca_regis_no','date_by_mroffice','follow_up','mr_office_decision').distinct())
                v=''
                if len(obj)!=0:
                    v=obj[0]['employee_id']
                obj1=[]
               
                if v != "":   
                    obj1=list(empmast.objects.filter(empno=v).values('empname','desig_longdesc').distinct())
                data={
                    'obj':obj,
                    'obj1' : obj1,
                }
                pdf = render_to_pdf('correctiveactionreport.html', data)
                return HttpResponse(pdf, content_type='application/pdf')
                
    return render(request, "correctiveaction.html",context)  

def CorrectionActionSave(request):
    if request.method == "GET" and request.is_ajax():
        obj=[]
        sno=request.GET.get('sno')
        date=request.GET.get('date')
        plno=request.GET.get('plno')
        engine=request.GET.get('engine')
        suppliername=request.GET.get('suppliername')
        perrejection=request.GET.get('perrejection')
        pastfailure=request.GET.get('pastfailure')
        reportagencyname=request.GET.get('reportagencyname')
        failure=request.GET.get('failure')
        cause=request.GET.get('cause')
        employee=request.GET.get('employee')
        caregisno=request.GET.get('caregisno')
        date2=request.GET.get('date2')
        followup=request.GET.get('followup')
        decision_mr=request.GET.get('decision_mr')
        cuser=request.user
        now = datetime.datetime.now()
        temp=CorrectiveAction.objects.filter(sno=sno).values('sno').distinct()
        if len(temp) == 0:
            temp=CorrectiveAction.objects.create(sno=str(sno),date=str(date),pl_no=str(plno),engine_loco_type=str(engine),
            supplier_name=str(suppliername),rejection_percentage=str(perrejection),past_failure_details=str(pastfailure),
            reporting_agency_name=str(reportagencyname),failure_since_last_six_months=str(failure),
            probable_cause_redemy=str(cause),employee_id=str(employee),ca_regis_no=str(caregisno),date_by_mroffice=str(date2),
            follow_up=str(followup),mr_office_decision=str(decision_mr),login_id=str(cuser),last_modified=now)
        
        else:
            obj=[1]
        return JsonResponse(obj,safe=False) 
    return JsonResponse({"success:False"},status=400) 

def CorrectiveActionValidatePlno(request):
    if request.method == "GET" and request.is_ajax():
        plno = request.GET.get('plno')
        obj=list(Part.objects.filter(partno=plno).values('partno').distinct())
        if len(obj)==0:
            i=[]
            return JsonResponse(i,safe=False)
        else:
            return JsonResponse(obj,safe=False)
    return JsonResponse({"success:False"},status=400)

def CorrectiveActionValidateEid(request):
    if request.method == "GET" and request.is_ajax():
        employee = request.GET.get('employee')
        obj=list(empmast.objects.filter(empno=employee).values('empname','desig_longdesc').distinct())
        if len(obj)==0:
            i=[]
            return JsonResponse(i,safe=False)
        else:
            return JsonResponse(obj,safe=False)
    return JsonResponse({"success:False"},status=400)

def CorrectiveActionGetAllDetails(request):
    if request.method == "GET" and request.is_ajax():
        sno = request.GET.get('sno')
        i=[]
        obj=list(CorrectiveAction.objects.filter(sno=sno).values('date','pl_no','engine_loco_type','supplier_name',
        'rejection_percentage','past_failure_details','reporting_agency_name','failure_since_last_six_months',
        'probable_cause_redemy','employee_id','ca_regis_no','date_by_mroffice','follow_up','mr_office_decision').distinct())
        v=''
        if len(obj)!=0:
            v=obj[0]['employee_id']
                
        obj1=[]
          
        if v != "":      
            obj1=list(empmast.objects.filter(empno=v).values('empname','desig_longdesc').distinct())
        i.append(obj)
        i.append(obj1)
        return JsonResponse(i,safe=False)
    return JsonResponse({"success:False"},status=400)

def CorrectionActionUpdate(request):
    if request.method == "GET" and request.is_ajax():
        obj=[]
        sno=request.GET.get('sno')
        date=request.GET.get('date')
        plno=request.GET.get('plno')
        engine=request.GET.get('engine')
        suppliername=request.GET.get('suppliername')
        perrejection=request.GET.get('perrejection')
        pastfailure=request.GET.get('pastfailure')
        reportagencyname=request.GET.get('reportagencyname')
        failure=request.GET.get('failure')
        cause=request.GET.get('cause')
        employee=request.GET.get('employee')
        caregisno=request.GET.get('caregisno')
        date2=request.GET.get('date2')
        followup=request.GET.get('followup')
        decision_mr=request.GET.get('decision_mr')
        cuser=request.user
        now = datetime.datetime.now()
        CorrectiveAction.objects.filter(sno=str(sno)).update(sno=str(sno),date=str(date),pl_no=str(plno),engine_loco_type=str(engine),
        supplier_name=str(suppliername),rejection_percentage=str(perrejection),past_failure_details=str(pastfailure),
        reporting_agency_name=str(reportagencyname),failure_since_last_six_months=str(failure),
        probable_cause_redemy=str(cause),employee_id=str(employee),ca_regis_no=str(caregisno),date_by_mroffice=str(date2),
        follow_up=str(followup),mr_office_decision=str(decision_mr),login_id=str(cuser),last_modified=now)

        return JsonResponse(obj,safe=False)
    return JsonResponse({"success:False"},status=400)





     
@login_required
@role_required(urlpass='/prodqry/')
def prodqry(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()


    if "Superuser" in rolelist:
        tm=shop_section.objects.all()
        tmp=[]
        for on in tm:
            tmp.append(on.section_code)
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles':tmp
        }
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):
            req = M13.objects.all().filter(shop=rolelist[i]).values('wo').distinct()
            wo_nop =wo_nop | req
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'wo_nop':wo_nop,
            'nav':nav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist,
            'subnav':subnav,
        }
        
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'nav':nav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist,
            'subnav':subnav,
        }
    return render(request,'prodqry.html',context)



def sel_main(request):
    if request.method == "GET" and request.is_ajax():   
        sel_val=request.GET.get('val')
    

        if(sel_val=="11"):
            bno=request.GET.get('val1')
            pno=request.GET.get('val2')
            bono=Batch.objects.values('bo_no')
            x=[]
            for i in bono:
                x.append(i['bo_no'])
            if pno is None and bno in x:
                qry=Batch.objects.filter(bo_no=bno).values('part_no','bo_no','ep_type','loco_fr','loco_to','batch_qty','batch_type','seq','brn_no','status','so_no').order_by('bo_no','part_no','seq').distinct()
                BT=qry
                if(BT.count()>0):
                    print(BT)
                else:
                    BT=list(BT)
                    BT.insert(0,'B')
            else:
                qry=Batch.objects.filter(bo_no=bno,part_no=pno).values('part_no','bo_no','ep_type','loco_fr','loco_to','batch_qty','batch_type','seq','brn_no','status','so_no').order_by('bo_no','part_no','seq').distinct()
                BT=qry
                if(BT.count()>0):
                    print(BT)
                else:
                    BT=list(BT)
                    BT.insert(0,'BP')


        if(sel_val=="12"):
            pno=request.GET.get('val1')
            qry=Batch.objects.filter(part_no=pno).values('part_no','bo_no','ep_type','loco_fr','loco_to','batch_qty','batch_type','seq','brn_no','status','so_no').order_by('bo_no','part_no','seq').distinct()
            BT=qry
            if(BT.count()>0):
                print(BT)
            else:
                BT=list(BT)
                BT.insert(0,'P')

        
        if(sel_val=="13"):
            brn=request.GET.get('val1')
            qry=Batch.objects.filter(brn_no=brn).values('part_no','bo_no','ep_type','loco_fr','loco_to','batch_qty','batch_type','seq','brn_no','status','so_no').order_by('brn_no').distinct()
            BT=qry
            if(BT.count()>0):
                print(BT)
            else:
                BT=list(BT)
                BT.insert(0,'Brn')


        if(sel_val=="21"):
            bno=request.GET.get('val1')
            asno=request.GET.get('val2')
            if asno is not None:
                qry=M2Docnew1.objects.filter(batch_no=bno,assly_no=asno).values('scl_cl','part_no','epc','f_shopsec','qty','ptc','assly_no','rm_partno','rm_qty','rm_ptc','m4_no','brn_no','m2sln','m2prtdt','cut_shear').order_by('batch_no','assly_no','seq','scl_cl','f_shopsec','part_no').distinct()
                BT=qry
                if(BT.count()>0):
                    print(BT)
                else:
                    BT=list(BT)
                    BT.insert(0,'BA')
            else:
                qry=M2Docnew1.objects.filter(batch_no=bno).values('scl_cl','part_no','epc','f_shopsec','qty','ptc','assly_no','rm_partno','rm_qty','rm_ptc','m4_no','brn_no','m2sln','m2prtdt','cut_shear').order_by('batch_no','assly_no','seq','scl_cl','f_shopsec','part_no').distinct()
                BT=qry
                if(BT.count()>0):
                    print(BT)
                else:
                    BT=list(BT)
                    BT.insert(0,'B')


        if(sel_val=="22"):
            rcno=request.GET.get('val1')
            qry=M2Docnew1.objects.filter(m2sln=rcno).values('scl_cl','part_no','epc','f_shopsec','qty','ptc','assly_no','rm_partno','rm_qty','rm_ptc','m4_no','brn_no','m2sln','m2prtdt','cut_shear').order_by('brn_no').distinct()
            BT=qry
            if(BT.count()>0):
                print(BT)
            else:
                BT=list(BT)
                BT.insert(0,'Brn')


        if(sel_val=="23"):
            pno=request.GET.get('val1')
            bno=request.GET.get('val2')
            
            if bno is not None:
                qry=M2Docnew1.objects.filter(batch_no=bno).values('brn_no').order_by('batch_no','assly_no','seq','scl_cl','f_shopsec','part_no').distinct()
                JOIN=qry
                if(JOIN.count()>0):
                    brn_no=JOIN[0]['brn_no']
                qry=M2Docnew1.objects.filter(part_no=pno,brn_no=brn_no).values('scl_cl','part_no','epc','f_shopsec','qty','ptc','assly_no','rm_partno','rm_qty','rm_ptc','m4_no','brn_no','m2sln','m2prtdt','cut_shear').order_by('brn_no').distinct()
            else:
                qry=M2Docnew1.objects.filter(part_no=pno).values('scl_cl','part_no','epc','f_shopsec','qty','ptc','assly_no','rm_partno','rm_qty','rm_ptc','m4_no','brn_no','m2sln','m2prtdt','cut_shear').order_by('brn_no').distinct()
            BT=qry
            if pno is None:
                BT=list(BT)
                BT.insert(0,'EP')
            if(len(BT)>0):
                print(BT)
            else:   
                BT=list(BT)
                BT.insert(0,'BP')
            

        if(sel_val=="24"):
            brn=request.GET.get('val1')
            qry=M2Docnew1.objects.filter(brn_no=brn).values('scl_cl','part_no','epc','f_shopsec','qty','ptc','assly_no','rm_partno','rm_qty','rm_ptc','m4_no','brn_no','m2sln','m2prtdt','cut_shear').order_by('brn_no').distinct()
            BT=qry
            if(BT.count()>0):
                _a=''
            else:
                BT=list(BT)
                BT.insert(0,'Brn')


        if(sel_val=="31"):
            bno=request.GET.get('val1')
            asno=request.GET.get('val2')
            if asno is not None:
                qry=list(M5Docnew1.objects.filter(batch_no=bno,assly_no=asno).values('scl_cl','part_no','qty_ord','assly_no','rm_partno','rm_qty','cut_shear','m5glsn','brn_no','m2slno','m5prtdt','shop_sec','lc_no','opn').order_by('batch_no','assly_no','scl_cl','shop_sec','part_no','opn','l_fr').distinct())
                for j in range(len(qry)):
                    qry[j].update({'des':None})
                BT=qry
                if(len(BT)>0):
                    for i in range(len(BT)):
                        part=BT[i]['part_no']
                        qry=Oprn.objects.filter(part_no=part).values('des').order_by('part_no','opn').distinct()
                        OP=qry
                        if(OP.count()>0):
                            BT[i]['des']=OP[0]['des'][0:37]
                    
                else:
                    BT=list(BT)
                    BT.insert(0,'BA')
            else:
                qry=list(M5Docnew1.objects.filter(batch_no=bno).values('scl_cl','part_no','qty_ord','assly_no','rm_partno','rm_qty','cut_shear','m5glsn','brn_no','m2slno','m5prtdt','shop_sec','lc_no','opn').order_by('batch_no','assly_no','scl_cl','shop_sec','part_no','opn','l_fr').distinct())
                for j in range(len(qry)):
                    qry[j].update({'des':None})
                BT=qry
                if(len(BT)>0):
                    for i in range(len(BT)):
                        part=BT[i]['part_no']
                        qry=Oprn.objects.filter(part_no=part).values('des').order_by('part_no','opn').distinct()
                        OP=qry
                        if(OP.count()>0):
                            BT[i]['des']=OP[0]['des'][0:37]
                    
                else:
                    BT=list(BT)
                    BT.insert(0,'B')




        
        if(sel_val=="32"):
            rcn=request.GET.get('val1')
            batchno=''
            if rcn is not None:
                qry=M2Docnew1.objects.filter(m2sln=rcn).values('batch_no').order_by('m2sln').distinct()
                DOC=qry
                if(DOC.count()>0):
                    batchno=DOC[0]['batch_no']

                oprn_sub=Oprn.objects.all().distinct()
                qry=M5Docnew1.objects.filter(batch_no=batchno,opn__in=Subquery(oprn_sub.values('opn')),part_no__in=Subquery(oprn_sub.values('part_no'))).values('scl_cl', 'part_no', 'batch_no', 'qty_ord', 'assly_no', 'rm_partno', 'rm_qty', 'cut_shear', 'm5glsn', 'brn_no', 'm2slno', 'm5prtdt', 'shop_sec', 'lc_no', 'opn_desc').order_by('batch_no','assly_no','scl_cl','shop_sec','part_no','opn','l_fr').distinct()
                BT=qry
                if(BT.count()>0):
                    _a=''
                else:
                    BT=list(BT)
                    BT.insert(0,'N')
                
        
        if(sel_val=="33"):
            jcn=request.GET.get('val1')
            oprn_sub=Oprn.objects.all().distinct()
            qry=M5Docnew1.objects.filter(m5glsn=jcn,opn__in=Subquery(oprn_sub.values('opn')),part_no__in=Subquery(oprn_sub.values('part_no'))).values('scl_cl', 'part_no', 'batch_no', 'qty_ord', 'assly_no', 'rm_partno', 'rm_qty', 'cut_shear', 'm5glsn', 'brn_no', 'm2slno', 'm5prtdt', 'shop_sec', 'lc_no', 'opn_desc').order_by('m5glsn').distinct()
            BT=qry
            if(BT.count()>0):
                _a=''
            else:
                BT=list(BT)
                BT.insert(0,'N')

       

        if(sel_val=="34"):
            pno=request.GET.get('val1')
            bno=request.GET.get('val2')
            if bno is not None:
                qry=M5Docnew1.objects.filter(batch_no=bno).values('brn_no').order_by('batch_no','assly_no','scl_cl','shop_sec','part_no','opn','l_fr').distinct()
                JOIN=qry
                brnno=''
                if(JOIN.count()>0):
                    brnno=JOIN[0]['brn_no']
                oprn_sub=Oprn.objects.all().distinct()
                qry=M5Docnew1.objects.filter(part_no=pno,brn_no=brnno,opn__in=Subquery(oprn_sub.values('opn')),part_no__in=Subquery(oprn_sub.values('part_no'))).values('scl_cl', 'part_no', 'batch_no', 'qty_ord', 'assly_no', 'rm_partno', 'rm_qty', 'cut_shear', 'm5glsn', 'brn_no', 'm2slno', 'm5prtdt', 'shop_sec', 'lc_no', 'opn_desc').order_by('part_no','brn_no','scl_cl').distinct()
            else:
                oprn_sub=Oprn.objects.all().distinct()
                qry=M5Docnew1.objects.filter(part_no=pno,opn__in=Subquery(oprn_sub.values('opn')),part_no__in=Subquery(oprn_sub.values('part_no'))).values('scl_cl', 'part_no', 'batch_no', 'qty_ord', 'assly_no', 'rm_partno', 'rm_qty', 'cut_shear', 'm5glsn', 'brn_no', 'm2slno', 'm5prtdt', 'shop_sec', 'lc_no', 'opn_desc').order_by('part_no','brn_no','scl_cl').distinct()
            BT=qry
            if(BT.count()>0):
                _a=''
            else:
                BT=list(BT)
                BT.insert(0,'BP')
            


        if(sel_val=="35"):
            brno=request.GET.get('val1')
            if brno is not None:
                qry=list(M5Docnew1.objects.filter(brn_no=brno).values('scl_cl','part_no','qty_ord','assly_no','rm_partno','rm_qty','cut_shear','m5glsn','batch_no','m2slno','m5prtdt','shop_sec','lc_no','opn').order_by('m5glsn').distinct())
                for j in range(len(qry)):
                    qry[j].update({'des':None})
                BT=qry
                if(len(BT)>0):
                    for i in range(len(BT)):
                        part=BT[i]['part_no']
                        qry=Oprn.objects.filter(part_no=part).values('des').order_by('part_no','opn')
                        OP=qry
                        if(OP.count()>0):
                            if(len(OP[0]['des'])>=37):
                                BT[i]['des']=OP[0]['des'][0:37]
                            else:
                               BT[i]['des']=OP[0]['des'] 
                   
                else:
                    BT=list(BT)
                    BT.insert(0,'Brn')


        if(sel_val=="41"):
            bno=request.GET.get('val1')
            pno=request.GET.get('val2')
            if bno is not None:
                qry=Batch.objects.filter(bo_no=bno).values('brn_no').order_by('bo_no','part_no','seq').distinct()
                JOIN=qry
                if(JOIN.count()>0):
                    brn_no=JOIN[0]['brn_no']
                qry=M14M4new1.objects.filter(part_no=pno,brn_no=brn_no).values('part_no','bo_no','pm_no','qty','l_fr','l_to','assly_no','brn_no','doc_no').order_by('doc_no').distinct()
            else:
                qry=M14M4new1.objects.filter(part_no=pno).values('part_no','bo_no','pm_no','qty','l_fr','l_to','assly_no','brn_no','doc_no').order_by('l_fr').distinct()
            BT=qry
            if(BT.count()>0):
                _a=''
            else:        
                BT=list(BT)
                BT.insert(0,'BP')


        if(sel_val=="42"):
            brno=request.GET.get('val1')
            qry=M14M4new1.objects.filter(brn_no=brno,doc_code='89').values('part_no','bo_no','pm_no','qty','l_fr','l_to','assly_no','brn_no','doc_no').order_by('brn_no','assly_no','kit_ind','station','stg','sub_kit','part_no').distinct()
            BT=qry
            if(BT.count()>0):
                _a=''
            else:   
                BT=list(BT)
                BT.insert(0,'Brn')



        if(sel_val=="71"):
            bno=request.GET.get('val1')
            pno=request.GET.get('val2')
            qry=Batch.objects.filter(bo_no=bno).values('brn_no').order_by('bo_no','part_no','seq').distinct()
            JOIN=qry
            
            if((bno is not None) and (JOIN.count()>0)):
                sub=Batch.objects.values('brn_no').distinct()
                qry=Altdoc.objects.filter(part_no=pno,brn_no__in=Subquery(sub.values('brn_no'))).values('brn_no', 'part_no', 'l_fr', 'l_to', 'm2_fr', 'm2_to', 'm5_fr', 'm5_to', 'm14_fr', 'm14_to','m4_fr', 'm4_to','expl_dt','prt_dt').order_by('brn_no','alt_link','l_fr','l_to').distinct()
            else:
                sub=Batch.objects.all().distinct()
                qry=Altdoc.objects.filter(part_no=pno,brn_no__in=Subquery(sub.values('brn_no'))).values('brn_no', 'part_no', 'l_fr', 'l_to', 'm2_fr', 'm2_to', 'm5_fr', 'm5_to', 'm14_fr', 'm14_to','m4_fr', 'm4_to','expl_dt','prt_dt').order_by('brn_no','alt_link','l_fr','l_to').distinct()
            BT=qry
            if(BT.count()>0):
                _a=''
            else:
                BT=list(BT)
                BT.insert(0,'BrP')

        return JsonResponse(list(BT), safe = False)
    return JsonResponse({"success":False}, status=400)


def wheelreport_validate(request):
    if request.method=="GET" and request.is_ajax():
        wheel_no = request.GET.get('wheel_no')
        ob1=list(WheelMachining.objects.filter(wheel_no=wheel_no).values('wheel_no','loco_type','date','bo_no','wheel_heatcaseno','ustwhl','hub_lengthwhl','tread_diawhl','rim_thicknesswhl','bore_diawhl','inspector_namewhl','datewhl'))
        l=len(ob1)
        if l>0 :
            msg=ob1
        else :
            msg=["false"]
        return JsonResponse(msg, safe = False)
    return JsonResponse({"success":False}, status=400)  

def axlereport_validate(request):
    if request.method=="GET" and request.is_ajax():
        axle_no = request.GET.get('axle_no')
        ob1=list(AxleMachining.objects.filter(axle_no=axle_no).values('axle_no'))
        l=len(ob1)
        if l>0 :
            msg=ob1
        else :
            msg=["false"]
        return JsonResponse(msg, safe = False)
    return JsonResponse({"success":False}, status=400) 

def validate_axleno(request):
    if request.method=="GET" and request.is_ajax():
        w=request.GET.get('x')
        axle_no = request.GET.get('axle_no')
        ob1=list(AxleMachining.objects.filter(axle_no=axle_no,axleinspection_status=True).values('axle_no'))
        l=len(ob1)
        if l>0 :
            msg=ob1
        else :
            msg=["false"]
        return JsonResponse(msg, safe = False)
    return JsonResponse({"success":False}, status=400)

def validate_wheelnode(request):
    if request.method=="GET" and request.is_ajax():
        wheelno_de = request.GET.get('wheelno_de')
        w=request.GET.get('x')
        ob1=list(WheelMachining.objects.filter(wheel_no=wheelno_de,wheelinspection_status=True).values('wheel_no'))
        l=len(ob1)
        if l>0 and wheelno_de!=w:
            msg=ob1
        else :
            msg=["false"]
        return JsonResponse(msg, safe = False)
    return JsonResponse({"success":False}, status=400)

def validate_wheelnonde(request):
    if request.method=="GET" and request.is_ajax():
        wheelno_nde = request.GET.get('wheelno_nde')
        w=request.GET.get('x')
        ob1=list(WheelMachining.objects.filter(wheel_no=wheelno_nde,wheelinspection_status=True).values('wheel_no'))
        l=len(ob1)
        if l>0 and wheelno_nde!=w:
            msg=ob1
        else :
            msg=["false"]
        return JsonResponse(msg, safe = False)
    return JsonResponse({"success":False}, status=400)


@login_required
@role_required(urlpass='/tool_report/')
def tool_report(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    if "Superuser" in rolelist:
        obj=Shop.objects.all().values('shop').distinct()
        temp=[]
        for i in obj:
             temp.append(i['shop'])
        context={
            'trlocation': temp,
            'nav':nav,
            'ip':get_client_ip(request),
            'subnav':subnav,

        }
    return render(request,'tool_report.html',context)

def  getShopDesc(request):
    if request.method == "GET" and request.is_ajax():
        shopdesc = request.GET.get('tr_location')
        sd = list(Shop.objects.filter(shop =shopdesc).values('sh_desc').distinct())
        return JsonResponse(sd, safe = False)
    return JsonResponse({"success":False}, status=400)


def addInfo(request):
    if request.method == "GET" and request.is_ajax():
        tr_toolnum = request.GET.get('tr_toolnum')
        tr_dgnum = request.GET.get('tr_dgnum')
        tr_tooldesc = request.GET.get('tr_tooldesc')
        tr_plnum = request.GET.get('tr_plnum')
        sh_locn=request.GET.get('tr_location')
        doe = request.GET.get('doe')
        po_no = request.GET.get('po_no')
        make = request.GET.get('make')
        model = request.GET.get('model')
        cost = request.GET.get('cost')
        rangee = request.GET.get('rangee')
        uom = request.GET.get('uom')
        cal_freq = request.GET.get('cal_freq')
        acc_cri = request.GET.get('acc_cri')
        cali_link = request.GET.get('cali_link')
        pro_tol = request.GET.get('pro_tol')
        perror = request.GET.get('perror')
        merror = request.GET.get('merror')
        refstdno = request.GET.get('refstdno')
        win = request.GET.get('win')
        tr_shopdesc=request.GET.get('tr_shopdesc')
        today = str(date.today().strftime('%d-%m-%y'))
        cuser=request.user
        toolmdata.objects.create(TOOL_NUM=tr_toolnum,uom=uom,dg_num=tr_dgnum,tl_desc=tr_tooldesc,pl_num=tr_plnum,doe=doe,make=make,model=model,cost=cost,cal_freq=cal_freq,rangee=rangee,perror=perror,merror=merror,rsn=refstdno,win=win,acc_cri=acc_cri,cal_link=cali_link,pro_tol=pro_tol,po_no=po_no,sh_locn=sh_locn,tr_shopdesc=tr_shopdesc,flag='y',lastupddate=today,user=cuser)
        a=[]
        return JsonResponse(a, safe = False)
    return JsonResponse({"success":False}, status=400)


def delInfo(request):
    if request.method == "GET" and request.is_ajax():
        tr_toolnum = request.GET.get('tr_toolnum')
        toolmdata.objects.filter(TOOL_NUM=tr_toolnum).update(flag='n')
        a=[]
        return JsonResponse(a, safe = False)
    return JsonResponse({"success":False}, status=400)

def updateInfo(request):
    if request.method == "GET" and request.is_ajax():
        tr_toolnum = request.GET.get('tr_toolnum')
        a=list(toolmdata.objects.filter(TOOL_NUM=tr_toolnum).values())
        return JsonResponse(a, safe = False)
    return JsonResponse({"success":False}, status=400)

def updatetool(request):
    cuser=request.user
    if request.method == "GET" and request.is_ajax():
        tr_toolnum = request.GET.get('tr_toolnum')
        tr_dgnum = request.GET.get('tr_dgnum')
        tr_tooldesc = request.GET.get('tr_tooldesc')
        tr_plnum = request.GET.get('tr_plnum')
        sh_locn=request.GET.get('tr_location')
        doe = request.GET.get('doe')
        po_no = request.GET.get('po_no')
        make = request.GET.get('make')
        model = request.GET.get('model')
        cost = request.GET.get('cost')
        rangee = request.GET.get('rangee')
        uom = request.GET.get('uom')
        cal_freq = request.GET.get('cal_freq')
        acc_cri = request.GET.get('acc_cri')
        cali_link = request.GET.get('cali_link')
        pro_tol = request.GET.get('pro_tol')
        perror = request.GET.get('perror')
        merror = request.GET.get('merror')
        refstdno = request.GET.get('refstdno')
        win = request.GET.get('win')
        tr_shopdesc=request.GET.get('tr_shopdesc')
        today = str(date.today().strftime('%d-%m-%y'))
        b=list(toolmdata.objects.filter(TOOL_NUM=tr_toolnum).values('flag'))
        if(b[0]['flag']=='n'):
            toolmdata.objects.filter(TOOL_NUM=tr_toolnum).update(TOOL_NUM=tr_toolnum,uom=uom,dg_num=tr_dgnum,tl_desc=tr_tooldesc,pl_num=tr_plnum,doe=doe,make=make,model=model,cost=cost,cal_freq=cal_freq,rangee=rangee,perror=perror,merror=merror,rsn=refstdno,win=win,acc_cri=acc_cri,cal_link=cali_link,pro_tol=pro_tol,po_no=po_no,sh_locn=sh_locn,tr_shopdesc=tr_shopdesc,flag='y',lastupddate=today,user=str(cuser))
        elif(b[0]['flag']=='y'):
            toolmdata.objects.filter(TOOL_NUM=tr_toolnum).update(TOOL_NUM=tr_toolnum,dg_num=tr_dgnum,tl_desc=tr_tooldesc,pl_num=tr_plnum,doe=doe,make=make,model=model,cost=cost,cal_freq=cal_freq,rangee=rangee,perror=perror,merror=merror,rsn=refstdno,win=win,acc_cri=acc_cri,cal_link=cali_link,pro_tol=pro_tol,po_no=po_no,sh_locn=sh_locn,tr_shopdesc=tr_shopdesc,flag='y',uom=uom,lastupddate=today,user=str(cuser))
        a=[]
        return JsonResponse(a, safe = False)
    return JsonResponse({"success":False}, status=400)


@login_required
@role_required(urlpass='/m5hwview/')
def m5hwview(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    tempLength = 0
    if "Superuser" in rolelist:
        tm=shop_section.objects.all()
        tmp=[]
        for on in tm:
            tmp.append(on.section_code)
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'ip':get_client_ip(request),
            'roles':tmp,
            'subnav':subnav,
            'cuser':cuser
        }
         
    if request.method=="POST":
        submit = request.POST.get('userNameGo')  
        submitSelectOPN = request.POST.get('selectOPN')  
        submitproceed = request.POST.get('proceed')  
        submitSelectOPNBack = request.POST.get('selectFianlBack')  
        submitbackSelectOPN = request.POST.get('backSelectOPN')  
        submitBackMultiplaRowData = request.POST.get('backMultiplaRowData')  
        SubmitMultipleRowData = request.POST.get('SubmitMultipleRowData') 
        SubmitSaveAndUpdate = request.POST.get('saveAndUpdate') 
        submitInbox = request.POST.get('submitInbox')  
        backSubmitMultipleRowData =request.POST.get('backSubmitMultipleRowData')          
        SubmitMultipleRowDataInbox = request.POST.get('SubmitMultipleRowDataInbox')  
        SubmitMultipleRowDatadecision = request.POST.get('SubmitMultipleRowDatadecision')  
        SubmitSelectDocs = request.POST.get('selectDocs')  
        SubmitCreateM5M18 = request.POST.get('createM5M18')  
        printApprovalList = request.POST.get('printApprovalList')  

        if SubmitCreateM5M18=="Create M5/M18":
            context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'ip':get_client_ip(request),
            'roles':tmp,
            'subnav':subnav,
            'cuser':cuser        
           
            }
            return render(request,"m5hwviewFinal.html",context) 


        if SubmitSelectDocs=="Select Docs":
            batchQty=request.POST.get('batchQty') 
            batchNo=request.POST.get('batchNo')  
            temp=list(Hwm5Inbox.objects.all().filter(sel_sw='Y').exclude(cardstatus='Y'))
            context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'ip':get_client_ip(request),
            'roles':tmp,
            'subnav':subnav,
            'cuser':cuser,
            'temp':temp,
            'batchQty':batchQty,
            'batchNo':batchNo
            }
            return render(request,"m5hwviewInboxDecision.html",context) 


        if submitInbox=="Submit":
            batchQty=request.POST.get('batchQty')
            batchNo=request.POST.get('batchNo')  
            temp=list(Hwm5Inbox.objects.all().filter(sel_sw='Y').exclude(cardstatus='Y'))
            context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'ip':get_client_ip(request),
            'roles':tmp,
            'subnav':subnav,
            'cuser':cuser,
            'temp':temp,
            'batchQty':batchQty,
            'batchNo':batchNo
            }
            return render(request,"m5hwviewInboxDecision.html",context) 

        if backSubmitMultipleRowData=="back": 
            return render(request,"m5hwview.html",context) 

        if submit=="GO":   
            context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'ip':get_client_ip(request),
            'roles':tmp,
            'subnav':subnav,
            'cuser':cuser
        }         
            return render(request,"m5hwviewFinal.html",context)
        if submitbackSelectOPN=="back":
            context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'ip':get_client_ip(request),
            'roles':tmp,
            'subnav':subnav,
            'cuser':cuser
        }
            return render(request,"m5hwviewFinal.html",context)     
        if submitSelectOPN=="Select OPN":
            context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'ip':get_client_ip(request),
            'roles':tmp,
            'subnav':subnav,
            'cuser':cuser
        }
            return render(request,"m5hwViewSelectOPN.html",context)              
        if submitBackMultiplaRowData=="back":
            context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'ip':get_client_ip(request),
            'roles':tmp,
            'subnav':subnav,
            'cuser':cuser
        }
            return render(request,"m5hwViewSelectOPN.html",context)   
        if submitSelectOPNBack=="back":
            context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'ip':get_client_ip(request),
            'roles':tmp,
            'subnav':subnav,
            'cuser':cuser
        }
            return render(request,"m5hwview.html",context)  

        if submitproceed=="Proceed":
            partNo  = request.POST.get('partNo')
            batchNo = request.POST.get('batchNo')
            batchQty= request.POST.get('batchQty')
            locoFrom= request.POST.get('locoFrom')
            locoTo  = request.POST.get('locoTo')
            m4Req   = request.POST.get('m4Req')
            selectOPNForm= request.POST.get('selectOPNForm')
            totDetails = list(Hwm5.objects.filter(part_no = partNo,batch_no=batchNo).values('hw_cd','part_no','des','sel_sw','opn','opn_desc','shop_sec','lc_no','pa','at','time_pcpls','tot_hrspls','batch_no','org_batch','epc','seq','l_fr','l_to','m13_no','m13_date','brn_no','org_brnno','m5_cd','ncp_jbs','okmrq','rm_partno','rm_desc','rm_qty','rm_ut','sn','plregno','pr_shopsec','n_shopsec','usr_cd'))           
            context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'ip':get_client_ip(request),
            'roles':tmp,
            'subnav':subnav,
            'cuser':cuser,
            'totDetails':totDetails,
            'batchQty':batchQty,
            'batchNo':batchNo
            }
            return render(request,"m5hwViewMultipelRowData.html",context)  
        
        
        if printApprovalList=="View/Print Approval List":       
            temp=list(Hwm5Inbox.objects.all().filter(cardstatus='Y'))
            countemp=Hwm5Inbox.objects.all().filter(cardstatus='Y').count()
            userNameTemp  = request.POST.get('userName')
            context={  
            'nav':nav,
            'ip':get_client_ip(request),           
            'subnav':subnav,
            'temp':temp,
            'userNameTemp':userNameTemp,
            'countemp':countemp            
            }                     
            return render(request,"m5hwViewPrint.html",context) 


        if SubmitMultipleRowDatadecision=="Submit":             
            dataFormTemp  = request.POST.get('dataForm')
            mID1          = request.POST.get('id')
            batchQty      = request.POST.get('batchQty')
            batchNo       = request.POST.get('batchNo')
            tempID        = dataFormTemp.split(',')[35]
            
            Hwm5Inbox.objects.filter(id=tempID).update(cardstatus=str("Y"))  
            temp=list(Hwm5Inbox.objects.all().filter(sel_sw='Y').exclude(cardstatus='Y'))

            context={
            'mID1':mID1,   
            'nav':nav,
            'ip':get_client_ip(request),           
            'subnav':subnav,
            'batchQty' : batchQty,
            'hwcdTemp' : dataFormTemp.split(',')[0],
            'partNoTemp' : dataFormTemp.split(',')[1],
            'desTemp' : dataFormTemp.split(',')[2],
            'selTemp' : dataFormTemp.split(',')[3],
            'opnNoTemp' : dataFormTemp.split(',')[4],
            'opn_descTemp' : dataFormTemp.split(',')[5],
            'shop_secTemp' : dataFormTemp.split(',')[6],
            'lc_noTemp' : dataFormTemp.split(',')[7],
            'paTemp' : dataFormTemp.split(',')[8],
            'atTemp' : dataFormTemp.split(',')[9],
            'time_pcplsTemp' : dataFormTemp.split(',')[10],
            'tot_hrsplsTemp' : dataFormTemp.split(',')[11],
            'batchNo' : dataFormTemp.split(',')[13],
            'org_batchTemp' : dataFormTemp.split(',')[12],
            'epcTemp' : dataFormTemp.split(',')[14],
            'seqTemp' : dataFormTemp.split(',')[17],
            'l_frTemp' : dataFormTemp.split(',')[18],
            'l_toTemp' : dataFormTemp.split(',')[19],
            'm13_noTemp' : dataFormTemp.split(',')[16],
            'm13_dateTemp' : dataFormTemp.split(',')[15],
            'brn_noTemp' : dataFormTemp.split(',')[20],
            'org_brnnoTemp' : dataFormTemp.split(',')[21],
            'm5_cdTemp' : dataFormTemp.split(',')[22],
            'ncp_jbsTemp' : dataFormTemp.split(',')[23],
            'okmrqTemp' : dataFormTemp.split(',')[26],
            'rm_partnoTemp' : dataFormTemp.split(',')[28],
            'rm_descTemp' : dataFormTemp.split(',')[24],
            'rm_qtyTemp' : dataFormTemp.split(',')[29],
            'rm_utTemp' : dataFormTemp.split(',')[30],
            'snTemp' : dataFormTemp.split(',')[27],
            'plregnoTemp' : dataFormTemp.split(',')[25],
            'pr_shopsecTemp' : dataFormTemp.split(',')[31],
            'n_shopsecTemp' : dataFormTemp.split(',')[32],
            'temp':temp,
            'testTemp':1
            }       
                    
            return render(request,"m5hwviewInboxDecision.html",context) 

        if SubmitMultipleRowDataInbox=="Submit":             
            dataFormTemp  = request.POST.get('dataForm')
            mID1          = request.POST.get('id')
            batchQty      = request.POST.get('batchQty')
            batchNo       = request.POST.get('batchNo')
            context={
            'mID1':mID1,   
            'nav':nav,
            'ip':get_client_ip(request),           
            'subnav':subnav,
            'batchQty' : batchQty,
            'batchNo' : batchNo,
            'hwcdTemp' : dataFormTemp.split(',')[0],
            'partNoTemp' : dataFormTemp.split(',')[1],
            'desTemp' : dataFormTemp.split(',')[2],
            'selTemp' : dataFormTemp.split(',')[3],
            'opnNoTemp' : dataFormTemp.split(',')[4],
            'opn_descTemp' : dataFormTemp.split(',')[5],
            'shop_secTemp' : dataFormTemp.split(',')[6],
            'lc_noTemp' : dataFormTemp.split(',')[7],
            'paTemp' : dataFormTemp.split(',')[8],
            'atTemp' : dataFormTemp.split(',')[9],
            'time_pcplsTemp' : dataFormTemp.split(',')[10],
            'tot_hrsplsTemp' : dataFormTemp.split(',')[11],
            'org_batchTemp' : dataFormTemp.split(',')[12],
            'epcTemp' : dataFormTemp.split(',')[14],
            'seqTemp' : dataFormTemp.split(',')[17],
            'l_frTemp' : dataFormTemp.split(',')[18],
            'l_toTemp' : dataFormTemp.split(',')[19],
            'm13_noTemp' : dataFormTemp.split(',')[16],
            'm13_dateTemp' : dataFormTemp.split(',')[15],
            'brn_noTemp' : dataFormTemp.split(',')[20],
            'org_brnnoTemp' : dataFormTemp.split(',')[21],
            'm5_cdTemp' : dataFormTemp.split(',')[22],
            'ncp_jbsTemp' : dataFormTemp.split(',')[23],
            'okmrqTemp' : dataFormTemp.split(',')[26],
            'rm_partnoTemp' : dataFormTemp.split(',')[28],
            'rm_descTemp' : dataFormTemp.split(',')[24],
            'rm_qtyTemp' : dataFormTemp.split(',')[29],
            'rm_utTemp' : dataFormTemp.split(',')[30],
            'snTemp' : dataFormTemp.split(',')[27],
            'plregnoTemp' : dataFormTemp.split(',')[25],
            'pr_shopsecTemp' : dataFormTemp.split(',')[31],
            'n_shopsecTemp' : dataFormTemp.split(',')[32],
            'id' : dataFormTemp.split(',')[37]
            }           
            return render(request,"m5hwviewFinal.html",context) 

        if SubmitMultipleRowData=="Submit":             
            dataFormTemp  = request.POST.get('dataForm')
            mID1          = request.POST.get('id')
            batchQty      = request.POST.get('batchQty')
            batchNo      = request.POST.get('batchNo')
            context={
            'mID1':mID1,   
            'nav':nav,
            'ip':get_client_ip(request),           
            'subnav':subnav,
            'batchQty' : batchQty,
            'batchNo' :batchNo,
            'hwcdTemp' : dataFormTemp.split(',')[0],
            'partNoTemp' : dataFormTemp.split(',')[1],
            'desTemp' : dataFormTemp.split(',')[2],
            'selTemp' : dataFormTemp.split(',')[3],
            'opnNoTemp' : dataFormTemp.split(',')[4],
            'opn_descTemp' : dataFormTemp.split(',')[5],
            'shop_secTemp' : dataFormTemp.split(',')[6],
            'lc_noTemp' : dataFormTemp.split(',')[7],
            'paTemp' : dataFormTemp.split(',')[8],
            'atTemp' : dataFormTemp.split(',')[9],
            'time_pcplsTemp' : dataFormTemp.split(',')[10],
            'tot_hrsplsTemp' : dataFormTemp.split(',')[11],
            'org_batchTemp' : dataFormTemp.split(',')[12],
            'epcTemp' : dataFormTemp.split(',')[14],
            'seqTemp' : dataFormTemp.split(',')[17],
            'l_frTemp' : dataFormTemp.split(',')[18],
            'l_toTemp' : dataFormTemp.split(',')[19],
            'm13_noTemp' : dataFormTemp.split(',')[16],
            'm13_dateTemp' : dataFormTemp.split(',')[15],
            'brn_noTemp' : dataFormTemp.split(',')[20],
            'org_brnnoTemp' : dataFormTemp.split(',')[21],
            'm5_cdTemp' : dataFormTemp.split(',')[22],
            'ncp_jbsTemp' : dataFormTemp.split(',')[23],
            'okmrqTemp' : dataFormTemp.split(',')[26],
            'rm_partnoTemp' : dataFormTemp.split(',')[28],
            'rm_descTemp' : dataFormTemp.split(',')[24],
            'rm_qtyTemp' : dataFormTemp.split(',')[29],
            'rm_utTemp' : dataFormTemp.split(',')[30],
            'snTemp' : dataFormTemp.split(',')[27],
            'plregnoTemp' : dataFormTemp.split(',')[25],
            'pr_shopsecTemp' : dataFormTemp.split(',')[31],
            'n_shopsecTemp' : dataFormTemp.split(',')[32]
            }           
            return render(request,"m5hwviewFinal.html",context) 

        if SubmitSaveAndUpdate=="Save/Update":          
                                             
            hwcd            = request.POST.get('hwcd')
            partNoTemp      = request.POST.get('partNoTemp')
            desTemp         = request.POST.get('desTemp')
            if(hwcd == ''):
                sel         = ''
            else:
                sel         = 'Y'
            opnNoTemp       = request.POST.get('opnNoTemp')
            opn_descTemp    = request.POST.get('opn_descTemp')
            shop_secTemp    = request.POST.get('shop_secTemp')
            lc_noTemp       = request.POST.get('lc_noTemp')
            paTemp          = request.POST.get('paTemp')
            atTemp          = request.POST.get('atTemp')
            noOff           = request.POST.get('noOff')
            time_pcplsTemp  = request.POST.get('time_pcplsTemp')
            tot_hrsplsTemp  = request.POST.get('tot_hrsplsTemp')
            batchNo         = request.POST.get('batchNo')
            org_batchTemp   = request.POST.get('org_batchTemp')
            epcTemp         = request.POST.get('epcTemp')
            seq             = request.POST.get('seq')
            qtyOrder        = request.POST.get('qtyOrder')
            locoFrom        = request.POST.get('locoFrom')
            locoTo          = request.POST.get('locoTo')
            m13_noTemp      = request.POST.get('m13_noTemp')
            m13_dateTemp    = request.POST.get('m13_dateTemp')
            brn_noTemp      = request.POST.get('brn_noTemp')
            org_brnnoTemp   = request.POST.get('org_brnnoTemp')
            pShop           = request.POST.get('pShop')               
            nShop           = request.POST.get('nShop')
            m5cd            = request.POST.get('m5cd')
            ncp_jbsTemp     = request.POST.get('ncp_jbsTemp')
            okmrq           = request.POST.get('okmrq')
            snTemp          = request.POST.get('snTemp')            
            rm_partnoTemp   = request.POST.get('rm_partnoTemp')
            rm_qtyTemp      = request.POST.get('rm_qtyTemp')
            rm_utTemp       = request.POST.get('rm_utTemp')
            pr_shopsecTemp  = request.POST.get('pr_shopsecTemp')
            n_shopsecTemp   = request.POST.get('n_shopsecTemp')
            remarkM5CD      = request.POST.get('remarkM5CD')
            mID1           = request.POST.get('mID1')
            id           = request.POST.get('id')

            if id!="":
                if m5cd=="5":
                    qtyOrder = qtyOrder
                    for i in range(0, int(qtyOrder)):   
                        locoTo=locoFrom                               
                        Hwm5Inbox.objects.filter(id=id).update(hw_cd=str(hwcd), part_no=str(partNoTemp),  des=str(desTemp),  sel_sw=str(sel),  opn=str(opnNoTemp),  opn_desc=str(opn_descTemp), shop_sec=str(shop_secTemp),  lc_no=str(lc_noTemp), pa=str(paTemp),  at=str(atTemp),  no_off=str(noOff), time_pcpls=str(time_pcplsTemp), tot_hrspls=str(tot_hrsplsTemp), batch_no=str(batchNo), org_batch=str(org_batchTemp), epc=str(epcTemp),  seq=str(seq),  qty_ord=str(qtyOrder),  l_fr=str(locoFrom), l_to=str(locoTo), m13_no=str(m13_noTemp), brn_no=str(brn_noTemp), org_brnno=str(org_brnnoTemp), pr_shopsec=str(pShop), n_shopsec=str(nShop), m5_cd=str(m5cd), ncp_jbs=str(ncp_jbsTemp), okmrq=str(okmrq), sn=str(snTemp), rm_partno=str(rm_partnoTemp), rm_qty=str(rm_qtyTemp), rm_ut=str(rm_utTemp), remarks=str(remarkM5CD))
                        locoFrom=int(locoFrom)+1 
                else:
                    Hwm5Inbox.objects.filter(id=id).update(hw_cd=str(hwcd), part_no=str(partNoTemp),  des=str(desTemp),  sel_sw=str(sel),  opn=str(opnNoTemp),  opn_desc=str(opn_descTemp), shop_sec=str(shop_secTemp),  lc_no=str(lc_noTemp), pa=str(paTemp),  at=str(atTemp),  no_off=str(noOff), time_pcpls=str(time_pcplsTemp), tot_hrspls=str(tot_hrsplsTemp), batch_no=str(batchNo), org_batch=str(org_batchTemp), epc=str(epcTemp),  seq=str(seq),  qty_ord=str(qtyOrder),  l_fr=str(locoFrom), l_to=str(locoTo), m13_no=str(m13_noTemp), brn_no=str(brn_noTemp), org_brnno=str(org_brnnoTemp), pr_shopsec=str(pShop), n_shopsec=str(nShop), m5_cd=str(m5cd), ncp_jbs=str(ncp_jbsTemp), okmrq=str(okmrq), sn=str(snTemp), rm_partno=str(rm_partnoTemp), rm_qty=str(rm_qtyTemp), rm_ut=str(rm_utTemp), remarks=str(remarkM5CD))
            else:               
                if m5cd=="5":
                    qtyOrder = qtyOrder
                    for i in range(0, int(qtyOrder)):   
                        locoTo=locoFrom                               
                        Hwm5Inbox.objects.create(hw_cd=str(hwcd), part_no=str(partNoTemp),  des=str(desTemp),  sel_sw=str(sel),  opn=str(opnNoTemp),  opn_desc=str(opn_descTemp), shop_sec=str(shop_secTemp),  lc_no=str(lc_noTemp), pa=str(paTemp),  at=str(atTemp),  no_off=str(noOff), time_pcpls=str(time_pcplsTemp), tot_hrspls=str(tot_hrsplsTemp), batch_no=str(batchNo), org_batch=str(org_batchTemp), epc=str(epcTemp),  seq=str(seq),  qty_ord=str(qtyOrder),  l_fr=str(locoFrom), l_to=str(locoTo), m13_no=str(m13_noTemp), brn_no=str(brn_noTemp), org_brnno=str(org_brnnoTemp), pr_shopsec=str(pShop), n_shopsec=str(nShop), m5_cd=str(m5cd), ncp_jbs=str(ncp_jbsTemp), okmrq=str(okmrq), sn=str(snTemp), rm_partno=str(rm_partnoTemp), rm_qty=str(rm_qtyTemp), rm_ut=str(rm_utTemp), remarks=str(remarkM5CD))
                        locoFrom=int(locoFrom)+1 
                else:
                    Hwm5Inbox.objects.create(hw_cd=str(hwcd), part_no=str(partNoTemp),  des=str(desTemp),  sel_sw=str(sel),  opn=str(opnNoTemp),  opn_desc=str(opn_descTemp), shop_sec=str(shop_secTemp),  lc_no=str(lc_noTemp), pa=str(paTemp),  at=str(atTemp),  no_off=str(noOff), time_pcpls=str(time_pcplsTemp), tot_hrspls=str(tot_hrsplsTemp), batch_no=str(batchNo), org_batch=str(org_batchTemp), epc=str(epcTemp),  seq=str(seq),  qty_ord=str(qtyOrder),  l_fr=str(locoFrom), l_to=str(locoTo), m13_no=str(m13_noTemp), brn_no=str(brn_noTemp), org_brnno=str(org_brnnoTemp), pr_shopsec=str(pShop), n_shopsec=str(nShop), m5_cd=str(m5cd), ncp_jbs=str(ncp_jbsTemp), okmrq=str(okmrq), sn=str(snTemp), rm_partno=str(rm_partnoTemp), rm_qty=str(rm_qtyTemp), rm_ut=str(rm_utTemp), remarks=str(remarkM5CD))
            temp = Hwm5Inbox.objects.all()
                           
            context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'ip':get_client_ip(request),
            'roles':tmp,
            'subnav':subnav,
            'cuser':cuser,
            'temp':temp,
            'tempLength':tempLength,
            'batchQty':qtyOrder,
            'batchNo' : batchNo
            }
            return render(request,"m5hwviewInbox.html",context)        
            
    return render(request,"m5hwview.html",context)


def HWM5Validate(request):
    if request.method == "GET" and request.is_ajax():
        
        partNoTemp = request.GET.get('partNoTemp')   
        batchNo = request.GET.get('batchNo')       
        shop_secTemp = request.GET.get('shop_secTemp')          
    
        bono_Temp = list(M13.objects.filter(shop=shop_secTemp, part_no=partNoTemp,wo=batchNo).values('qty_rej').distinct())
        return JsonResponse(bono_Temp, safe = False)
    return JsonResponse({"success":False}, status=400)


def m5hwGetbatchNo(request):
    if request.method == "GET" and request.is_ajax():
        partNo = request.GET.get('partNo')
        msgSet = 'False'
        mob_temp=[]
        bono_Temp = Batch.objects.filter(part_no = partNo).values('bo_no').exclude(part_no__isnull=True).distinct()                  
        for i in bono_Temp: 
            mob_temp.append(i['bo_no'])
        for j in range(len(mob_temp)):
            if len(mob_temp[j]):
                msgSet = "True"
        return JsonResponse(msgSet, safe = False)
    return JsonResponse({"success":False}, status=400)

def m5hwGetbatchQtyDetails(request):
    if request.method == "GET" and request.is_ajax():
        partNo = request.GET.get('partNo')
        batchNo = request.GET.get('batchNo')             
        mob_temp=[]
        b_qty=0
        bono_Temp = Batch.objects.filter(part_no = partNo, bo_no = batchNo).values('loco_fr','loco_to').distinct() 
        qty=Batch.objects.filter(part_no = partNo, bo_no = batchNo).aggregate(Sum('batch_qty'))
        
        if len(qty)!=0:
            b_qty=qty['batch_qty__sum']
        for i in bono_Temp: 
            mob_temp.append(i['loco_fr'])
            mob_temp.append(i['loco_to'])
            mob_temp.append(b_qty)
            break
                      
        return JsonResponse(mob_temp, safe = False)
    return JsonResponse({"success":False}, status=400)

@login_required
@role_required(urlpass='/screenforloadmasterupdation/')
def screenforloadmasterupdation(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    if "Superuser" in rolelist:
        context={
            'nav' : nav,
            'ip' : get_client_ip(request),
            'subnav' : subnav,
        }
    return render(request, "screenforloadmasterupdation.html",context) 

def ScreenLoadMasterUpdateValidShop(request):
    if request.method == "GET" and request.is_ajax():
        shopsec = request.GET.get('shopsec')
        obj=list(Lc1.objects.filter(shop_sec=shopsec).exclude(del_fl='Y').values('shop_sec'))
        return JsonResponse(obj,safe=False)
    return JsonResponse({"success=false"},status=400)

def ScreenLoadMasterUpdateGetAll(request):
    if request.method == "GET" and request.is_ajax():
        shopsec = request.GET.get('shopsec')
        loadcentre = request.GET.get('loadcentre')
        obj=list(Lc1.objects.filter(shop_sec=shopsec,lcno=loadcentre).exclude(del_fl='Y').values('des','no_men','no_mcs1','no_mcs2','no_mcs3').distinct())
        return JsonResponse(obj,safe=False)
    return JsonResponse({"success=false"},status=400)

def ScreenLoadMasterUpdateSave(request):
    if request.method == "GET" and request.is_ajax():
        obj=[]
        shopsec=request.GET.get('shopsec')
        loadcentre=request.GET.get('loadcentre')
        desc=request.GET.get('desc')
        noman=request.GET.get('noman')
        nomcs1=request.GET.get('nomcs1')
        nomcs2=request.GET.get('nomcs2')
        nomcs3=request.GET.get('nomcs3')
        mwno=request.GET.get('mwno')
        mcgr=request.GET.get('mcgr')
        d1 = date.today()
        temp=list(Lc1.objects.filter(shop_sec=shopsec,lcno=loadcentre).exclude(del_fl='Y').values('shop_sec').distinct())
        if len(temp) == 0:
            temp=Lc1.objects.create(shop_sec=str(shopsec),lcno=str(loadcentre),des=str(desc),
            no_men=noman,no_mcs1=nomcs1,no_mcs2=nomcs2,no_mcs3=nomcs3,updt_dt=d1)
        
        else:
            obj=[1]
        return JsonResponse(obj,safe=False) 
    return JsonResponse({"success:False"},status=400) 

def ScreenLoadMasterUpdateUYes(request):
    if request.method == "GET" and request.is_ajax():
        obj=[]
        shopsec=request.GET.get('shopsec')
        loadcentre=request.GET.get('loadcentre')
        desc=request.GET.get('desc')
        noman=request.GET.get('noman')
        nomcs1=request.GET.get('nomcs1')
        nomcs2=request.GET.get('nomcs2')
        nomcs3=request.GET.get('nomcs3')
        d1 = date.today()
        Lc1.objects.filter(shop_sec=shopsec,lcno=loadcentre).update(shop_sec=str(shopsec),lcno=str(loadcentre),des=str(desc),
            no_men=noman,no_mcs1=nomcs1,no_mcs2=nomcs2,no_mcs3=nomcs3,updt_dt=d1)

        return JsonResponse(obj,safe=False) 
    return JsonResponse({"success:False"},status=400) 

def ScreenLoadMasterUpdateDelete(request):
    if request.method == "GET" and request.is_ajax():
        obj=[]
        shopsec=request.GET.get('shopsec')
        loadcentre=request.GET.get('loadcentre')
        d1 = date.today()
        Lc1.objects.filter(shop_sec=shopsec,lcno=loadcentre).update(del_fl='Y',updt_dt=d1)   
        return JsonResponse(obj,safe=False) 
    return JsonResponse({"success:False"},status=400) 

    
def ScreenLoadMasterUpdateAddMwNo(request):
    if request.method == "GET" and request.is_ajax():
        shopsec=request.GET.get('shopsec')
        loadcentre=request.GET.get('loadcentre')
        mwno=request.GET.get('mwno')
        mcgr=request.GET.get('mcgr')
        desc=request.GET.get('desc')
        obj2=list(Mp.objects.filter(shop_sec=shopsec,lcno=loadcentre,mwno=mwno,mc_gr=mcgr).exclude(del_fl='Y').values('mwno','mc_gr').distinct())
        d1 = date.today()
        if len(obj2) == 0:
            temp=Mp.objects.create(shop_sec=str(shopsec),lcno=str(loadcentre),des=str(desc),
            mwno=str(mwno),mc_gr=str(mcgr),updt_dt=d1)
        
        return JsonResponse(obj2,safe=False) 
    return JsonResponse({"success:False"},status=400) 

def ScreenLoadMasterUpdateDelMwNo(request):
    if request.method == "GET" and request.is_ajax():
        shopsec=request.GET.get('shopsec')
        loadcentre=request.GET.get('loadcentre')
        mwno=request.GET.get('mwno')
        mcgr=request.GET.get('mcgr')
        obj2=list(Mp.objects.filter(shop_sec=shopsec,lcno=loadcentre,mwno=mwno,mc_gr=mcgr).exclude(del_fl='Y').values('mwno').distinct())
        d1 = date.today()
        if len(obj2) != 0:
            Mp.objects.filter(shop_sec=shopsec,lcno=loadcentre,mwno=mwno,mc_gr=mcgr).update(del_fl='Y',updt_dt=d1)   

        return JsonResponse(obj2,safe=False) 
    return JsonResponse({"success:False"},status=400) 

def ScreenLoadMasterUpdateView(request):
    if request.method == "GET" and request.is_ajax():
        loadcentre=request.GET.get('loadcentre')
        obj=list(Lc1.objects.filter(lcno=loadcentre).exclude(del_fl='Y').values('lcno','des').distinct())
        return JsonResponse(obj,safe=False) 
    return JsonResponse({"success:False"},status=400) 

@login_required
@role_required(urlpass='/updsh/')
def updsh(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()


    if "Superuser" in rolelist:
        tm=shop_section.objects.all()
        tmp=[]
        for on in tm:
            tmp.append(on.section_code)
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles':tmp
        }
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):
            req = M13.objects.all().filter(shop=rolelist[i]).values('wo').distinct()
            wo_nop =wo_nop | req
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'wo_nop':wo_nop,
            'nav':nav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist,
            'subnav':subnav,
        }
        
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'nav':nav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist,
            'subnav':subnav,
        }
    return render(request,'updsh.html',context)


def updshsave(request):
    if request.method == "GET" and request.is_ajax():
        txtshop=request.GET.get('shop_val')
        cat_value=request.GET.get('cat_value')
        lr_1=request.GET.get('lr_1')
        lr_2=request.GET.get('lr_2')
        lr_3=request.GET.get('lr_3')
        lr_4=request.GET.get('lr_4')
        up_dt=request.GET.get('up_dt')
        ls=up_dt.split('-')
        dt=ls[2]+"-"+ls[1]+"-"+ls[0]
        ovd_per=request.GET.get('ovd_per')
        if(txtshop==""):
            return JsonResponse({"success":False}, status = 400)
        shop_list=list(Shop.objects.values('shop'))
        shop_lt=[d['shop'] for d in shop_list]
        for i in range(0,len(shop_lt)):
            if shop_lt[i][0:2] == txtshop:
                Shop.objects.filter(shop=shop_lt[i]).update(cat_02=cat_value,lr1=lr_1,lr2=lr_2,lr3=lr_3,lr4=lr_4,updt_dt=dt,ovhd_perc=ovd_per)
        obj=[]
        return JsonResponse(obj, safe = False)
    return JsonResponse({"success":False}, status = 400)


def updsh1(request):
    if request.method == 'GET' and request.is_ajax():  
        shop_val= request.GET.get('Txt_shop')
        shop_list=list(Shop.objects.values('shop'))
        shop_lt=[d['shop'] for d in shop_list]
        data_list=None
        for i in range(0,len(shop_lt)):
            
            if(shop_lt[i][0:2]==shop_val):
                
                data_list=list(Shop.objects.filter(shop=shop_lt[i]).values('cat_02','lr1','lr2','lr3','lr4','updt_dt','ovhd_perc','sh_desc'))   

        if(len(data_list)>0):
            return JsonResponse(data_list,safe = False)
    return JsonResponse({"success":False}, status = 400)

@login_required
@role_required(urlpass='/roster/')
def roster(request): 
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    if "Superuser" in rolelist:
        tm=shop_section.objects.all()
         
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'ip':get_client_ip(request),
            'roles':tm,
            'subnav':subnav,
        }
        d1=[]
    if request.method == "POST":
            submitvalue = request.POST.get('save')
            if submitvalue=='save':
                noofemployee=request.POST.get('hide3')
                noofdays=request.POST.get('hide2')
                for j in range(int(noofemployee)):
                    shop_sec = request.POST.get('shop_sec')
                    staffNo = request.POST.get(str('staff'+str(j+1)))
                    staffName=request.POST.get(str('staffname'+str(j+1)))
                    stafftype=request.POST.get(str('stafftype'+str(j+1)))
                    for i in range(int(noofdays)):
                        fromdate=request.POST.get('from')
                        fromdate1=fromdate[6:] + "/" + fromdate[3:5] + "/" + fromdate[:2]
                        date = datetime.datetime.strptime(fromdate1, "%Y/%m/%d")
                        modified_date = date + timedelta(days=i)
                        datee=datetime.datetime.strftime(modified_date, "%d-%m-%Y")
                        d1.append(datee)
                        shift=request.POST.get(str(j+1)+str(i))
                        roster1.objects.filter(shop_sec=shop_sec,staffNo=staffNo,date=datee).delete()
                        roster1.objects.create(shop_sec=shop_sec,staffNo=staffNo,stafftype=stafftype,staffName=staffName,shift=shift,date=datee)
                            
    return render(request, 'roster.html',context)
                
def rosterempno(request):
    context={}
    if request.method == "GET" and request.is_ajax():

        shop_sec = request.GET.get('shop_sec')

        staff_no = list(empmast.objects.filter(shopno = shop_sec).values('empno','empname','emp_inctype').distinct())
      
        return JsonResponse(staff_no, safe = False)
    return JsonResponse({"success":False}, status=400)

def rosterempname(request):
    if request.method == "GET" and request.is_ajax():
        
        staffNo = request.GET.get('staffNo')        
        getdetail = list(Shemp.objects.filter(staff_no = staffNo).values('name','desgn').exclude(name__isnull=True).distinct())
        return JsonResponse(getdetail, safe = False)
    return JsonResponse({"success":False}, status=400)

def rosterempdesg(request):
    if request.method == "GET" and request.is_ajax():
        staffNo = request.GET.get('staffNo')    
        staffName = request.GET.get('staffName')      
        getdetaildesgn = list(Shemp.objects.filter(staff_no = staffNo, name = staffName).values('desgn').exclude(staff_no__isnull=True).distinct())
        return JsonResponse(getdetaildesgn, safe = False)
    return JsonResponse({"success":False}, status=400)


    
@login_required
@role_required(urlpass='/rosterreport/')
def rosterreport(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()

    if "Superuser" in rolelist:
        tm=shop_section.objects.all()
        tmp=[]
        for on in tm:
            tmp.append(on.section_code)
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'ip':get_client_ip(request),
            'roles':tmp,
            'subnav':subnav,
        }
    return render(request, 'rosterreport.html',context)

def getrosterreport(request):
    if request.method=="GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        noofday=request.GET.get('leng')

        datee=request.GET.get('sdate')
        datew=datee[6:] + "-" + datee[3:5] + "-" + datee[:2]
        lst=[]
        ls=[]
        tdate = datetime.datetime.strptime(datee, "%d-%m-%Y")
        x=int(noofday)
        d1=[]

        for i in range(0,x):
            modified_date = tdate + timedelta(days=i)
            fdate=datetime.datetime.strftime(modified_date, "%d-%m-%Y")
            d1.append(fdate)
        tmpstr1=list(roster1.objects.filter(shop_sec=shop_sec,date__in=d1).values('staffNo','staffName','shift'))
        c=-1
        for j in range(len(tmpstr1)):
            a=[]
            if tmpstr1[j]['staffNo'] not in ls:
                ls.append(tmpstr1[j]['staffNo'])
                lst.append({'staffNo': tmpstr1[j]['staffNo'],'staffName':tmpstr1[j]['staffName']})
                c=c+1
                for i in range(len(tmpstr1)):
                    if tmpstr1[j]['staffNo']==tmpstr1[i]['staffNo']:
                        a.append(tmpstr1[i]['shift'])
                lst[c].update({'shift':a})
        return JsonResponse(lst, safe = False)
    return JsonResponse({"success":False}, status=400)

def genrosterpdf(request, *args, **kwargs):

    date1 = request.GET.get('date1')
    date2 = request.GET.get('date2')
    shop_sec = request.GET.get('shop_sec')
    noofday=request.GET.get('hide2')
    datew=date1[6:] + "/" + date1[3:5] + "/" + date1[:2]
    lst=[]
    ls=[]
    tdate = datetime.datetime.strptime(date1, "%d-%m-%Y")
    x=int(noofday)
    d1=[]
    d2=[]
    for i in range(0,x):
        modified_date = tdate + timedelta(days=i)
        fdate=datetime.datetime.strftime(modified_date,"%d-%m-%Y")
        fdate1=datetime.datetime.strftime(modified_date,"%d-%m-%Y")
        d1.append(fdate)
        d2.append(fdate1)
    tmpstr1=list(roster1.objects.filter(shop_sec=shop_sec, date__in=d2).values('staffNo','staffName','shift'))
    c=-1
    sft=[]
    for j in range(len(tmpstr1)):
        a=[]
        if tmpstr1[j]['staffNo'] not in ls:
            ls.append(tmpstr1[j]['staffNo'])
            lst.append({'staffNo': tmpstr1[j]['staffNo'],'staffName':tmpstr1[j]['staffName']})
            c=c+1
            for i in range(len(tmpstr1)):
                if tmpstr1[j]['staffNo']==tmpstr1[i]['staffNo']:
                    a.append(tmpstr1[i]['shift'])
            sft.append(a)   
            lst[c].update({'shift':a})

    context={
        'date3':date1,
        'date4':date2,
        'shop_sec':shop_sec,
        'lst':lst,
        'd2':d2,
        'noofday':noofday,
        'sft':sft,
    }

    pdf = render_to_pdf('rosterpdf.html',context)
    return HttpResponse(pdf, content_type='application/pdf')


@login_required
@role_required(urlpass='/CardGenerationreport/')
def CardGenerationreport(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    context = {
        'ip':get_client_ip(request),
        'nav':nav,
        'subnav':subnav,
    }
    if request.method=="POST":
        batch = request.POST.get('batchno')
        bval=request.POST.get('cardbutton')
        asmno=request.POST.get('asslyno')
        card = request.POST.get('cardno')
        bno1 = request.POST.get('brn_no')
        if bval=="Generate Cards" and card=="M2":
            ades=list(Part.objects.filter(partno = asmno).values('des').distinct()) 

            m2=list(M2Docnew1.objects.filter(assly_no=asmno,batch_no=batch,brn_no=bno1).all())
            if len(m2)==0:
                messages.error(request,'Card is Not Generated Yet!')
                return render(request,"CardGenerationreport.html",context)

            ades=ades[0]['des']
            data ={
                'asl':asmno,
                'ades':ades,
                'batch':batch,
                'brn':bno1,
                'm2':m2,
            }
            pdf = render_to_pdf('cardpdf.html', data)
            return HttpResponse(pdf, content_type='application/pdf')
        elif bval=="Generate Cards" and card=="M4":
            ades=list(Part.objects.filter(partno = asmno).values('des').distinct()) 
            m4=list(M14M4new1.objects.filter(assly_no=asmno,bo_no=batch,brn_no=bno1).all())
            if len(m4)==0:
                messages.error(request,'Card is Not Generated Yet!')
                return render(request,"CardGenerationreport.html",context)
            ades=ades[0]['des']
            data ={
                'asl':asmno,
                'ades':ades,
                'batch':batch,
                'brn':bno1,
                'm4':m4,
            }
            pdf = render_to_pdf('m4cardpdf.html', data)
            return HttpResponse(pdf, content_type='application/pdf')

        elif bval=="Generate Cards" and card=="M14":
            messages.error(request,'This Module is under Development')
            return render(request,"CardGenerationreport.html",context)
              
        elif bval=="Generate Cards" and card=="M5":
            ades=list(Part.objects.filter(partno = asmno).values('des').distinct()) 
            m5=list(M5Docnew1.objects.filter(assly_no=asmno,batch_no=batch,brn_no=bno1).all())
            if len(m5)==0:
                messages.error(request,'Card is Not Generated Yet!')
                return render(request,"CardGenerationreport.html",context)
            ades=ades[0]['des']
            data ={
                'asl':asmno,
                'ades':ades,
                'batch':batch,
                'brn':bno1,
                'm5':m5,
                
            }
            return render(request,"m5cardpdf.html",data)
    return render(request,"CardGenerationreport.html",context)
            

            

@login_required
@role_required(urlpass='/tool_reportedit/')
def tool_reportedit(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    if "Superuser" in rolelist:
        tool=list(toolmdata.objects.values())
        obj=Shop.objects.all().values('shop').distinct()
        temp=[]
        for i in obj:
                temp.append(i['shop'])
        context={
            'nav':nav,
            'ip':get_client_ip(request),
            'subnav':subnav,
            'tool':tool,
        }
    if request.method == "POST":       
        SubmitMultipleRowData = request.POST.get('SubmitMultipleRowData')
        dataForm = request.POST.get('dataForm')
        if SubmitMultipleRowData=="Submit":
            dataFormTemp  = request.POST.get('dataForm')
            TOOL_NUM=dataFormTemp.split(',')[0]
            context={
            'trlocation': temp,
            'nav':nav,
            'ip':get_client_ip(request),           
            'subnav':subnav,
            'TOOL_NUM' : TOOL_NUM,
            'dg_num':dataFormTemp.split(',')[1],
            'tl_desc':dataFormTemp.split(',')[2],
            'pl_num':dataFormTemp.split(',')[3],
            'sh_locn':dataFormTemp.split(',')[4],
            'tr_shopdesc':dataFormTemp.split(',')[5],
            'po_no':dataFormTemp.split(',')[7],
            'doe':dataFormTemp.split(',')[6],
            'make':dataFormTemp.split(',')[8],
            'model':dataFormTemp.split(',')[9],
            'cost':dataFormTemp.split(',')[10],
            'rangee':dataFormTemp.split(',')[11],
            'uom':dataFormTemp.split(',')[12],
            'cal_freq':dataFormTemp.split(',')[13],
            'acc_cri':dataFormTemp.split(',')[14],
            'cal_link':dataFormTemp.split(',')[15],
            'pro_tol':dataFormTemp.split(',')[16],
            'perror':dataFormTemp.split(',')[17],
            'merror':dataFormTemp.split(',')[18],
            'rsn':dataFormTemp.split(',')[19],
            'win':dataFormTemp.split(',')[21],
            'flag':dataFormTemp.split(',')[20],
            }
            return render(request,'tool_report.html',context)
    return render(request,'tool_reportedit.html',context)


def axlepressreport_validate(request):
    if request.method=="GET" and request.is_ajax():
        axle_no = request.GET.get('axle_no')
        ob1=list(AxleWheelPressing.objects.filter(axle_no=axle_no).values('axle_no'))
        l=len(ob1)
        if l>0 :
            msg=ob1
        else :
            msg=["false"]
        return JsonResponse(msg, safe = False)
    return JsonResponse({"success":False}, status=400)

def pinionaxle_validate(request):
    if request.method=="GET" and request.is_ajax():
        axle_no = request.GET.get('axle_no')
        ob1=list(PinionPressing.objects.filter(axle_no=axle_no).values('axle_no'))
        l=len(ob1)
        if l>0 :
            msg=ob1
        else :
            msg=["false"]
        return JsonResponse(msg, safe = False)
    return JsonResponse({"success":False}, status=400)


def m9getmw(request):
    if request.method == "GET" and request.is_ajax():
        mwno = request.GET.get('mw')
        mw_no=list(MG9Initial.objects.filter(id=mwno).values('mw_no').distinct())
        return JsonResponse(mw_no, safe = False)
    return JsonResponse({"success":False}, status=400)

def m9getsbc(request):
    if request.method == "GET" and request.is_ajax():
        sbc = request.GET.get('sbc')
        sbc_no=list(M5DOCnew.objects.filter(m5glsn=sbc).values('m5glsn').distinct())
        if len(sbc_no)!=0:
            return JsonResponse(sbc_no, safe = False)
        else:
            i=[]
            return JsonResponse(i, safe = False)
    return JsonResponse({"success":False}, status=400)

def m9getrjc(request):
    if request.method == "GET" and request.is_ajax():
        rjc = request.GET.get('rjc')
        rjc_no=list(M5DOCnew.objects.filter(m5glsn=rjc).values('m5glsn').distinct())
        if len(rjc_no)!=0:
            return JsonResponse(rjc_no, safe = False)
        else:
            i=[]
            return JsonResponse(i, safe = False)
    return JsonResponse({"success":False}, status=400)

def m9getshop_name(request):
    if request.method == "GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        shop_name = list(shop_section.objects.filter(section_code=shop_sec).values('section_desc').distinct())
        return JsonResponse(shop_name , safe = False)
    return JsonResponse({"success":False}, status=400)


    
def save_sm9(request):
    context={}
    if request.method == "GET" and request.is_ajax():
            date=request.GET.get('val1')
            idle_time_man_mac=request.GET.get('val2')
            wo_no=request.GET.get('val')
            part_no=request.GET.get('val3')
            sus_jbno=request.GET.get('val4')
            res_jno=request.GET.get('val5')
            mw_no=request.GET.get('val6')
            mg9_no=request.GET.get('val7')
            aff_opn=request.GET.get('val8')
            empno=request.GET.get('val9')
            empname=request.GET.get('val10')
            prev_empno=request.GET.get('val11')
            cat=request.GET.get('val12')
            remark=request.GET.get('val13')
            shop=request.GET.get('val15')
            on_off=request.GET.get('val14')

            m9obj=m9.objects.create()
            m9obj.empname=empname
            m9obj.sus_jbno=sus_jbno
            m9obj.res_jno=res_jno
            m9obj.cat=cat
            m9obj.mw_no=mw_no
            m9obj.mg9_no=mg9_no
            m9obj.empno=empno
            m9obj.prev_empno=prev_empno
            m9obj.remark=remark
            m9obj.idle_time_man_mac=idle_time_man_mac
            m9obj.date=date
            m9obj.shop_sec=shop
            m9obj.part_no=part_no
            m9obj.wo_no=wo_no
            m9obj.aff_opn=aff_opn
            m9obj.on_off=on_off
            m9obj.save()
            return JsonResponse(context,safe=False)
    return JsonResponse({"success":False}, status=400)
def get_value(request):
    if request.method == "GET" and request.is_ajax():
        date=request.GET.get('val1')
        idle_time_man_mac=request.GET.get('val2')
        wo_no=request.GET.get('val')
        part_no=request.GET.get('val3')
        sus_jbno=request.GET.get('val4')
        res_jno=request.GET.get('val5')
        mw_no=request.GET.get('val6')
        mg9_no=request.GET.get('val7')
        aff_opn=request.GET.get('val8')
        empno=request.GET.get('val9')
        empname=request.GET.get('val10')
        prev_empno=request.GET.get('val11')
        cat=request.GET.get('val12')
        remark=request.GET.get('val13')
        shop=request.GET.get('val15')
        lst=[]
        lst=list(m9.objects.filter(shop_sec=shop,wo_no=wo_no,part_no=part_no,aff_opn=aff_opn).values('date','idle_time_man_mac','wo_no','part_no','sus_jbno','res_jno','mw_no','mg9_no','aff_opn','empno','empname','prev_empno','cat','remark',).distinct())
        a={'date':date,'idle_time_man_mac':idle_time_man_mac,'wo_no':wo_no,'part_no':part_no,'sus_jbno':sus_jbno,'res_jno':res_jno,'mw_no':mw_no,'mg9_no':mg9_no,'aff_opn':aff_opn,'empno':empno,'empname':empname,'prev_empno':prev_empno,'cat':cat,'remark':remark}
        for key,value in a.items():
            if key in lst:
                lst.append(a)
        return JsonResponse(lst, safe = False)
    return JsonResponse({"success":False}, status=400)

def qtysum(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    if "Superuser" in rolelist:
        tm=shop_section.objects.all()
        tmp=[]
        for on in tm:
            tmp.append(on.section_code)
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles':tmp
        }
    Ptld.objects.all().delete()   
    return render(request,"qtysum.html",context)

    
def qtysum1(request):
    if request.method == 'GET' and request.is_ajax():  
        part= request.GET.get('asslyno')
        data_list=list(Part.objects.filter(partno=part).values('des').distinct())       
        if(len(data_list)>0):
            return JsonResponse(data_list,safe = False)                                  
    return JsonResponse({"success":False},status=400)           

def qtysum2(request):
    if request.method == 'GET' and request.is_ajax():  
        part = request.GET.get('asslyno')
        part1 = request.GET.get('Txtpartno')
        val = request.GET.get('qty')
        drg_no=list(Part.objects.filter(partno=part).values('drgno').distinct())
        drg=drg_no[0].get('drgno')

        Ptld.objects.create(part_no=part, p_desc=part1,qty=val  ,epc='',ptc='',rem='',drgno=drg)
        data_list2=list(Ptld.objects.values('part_no','p_desc','qty','epc','ptc','rem').distinct())
        return JsonResponse(data_list2,safe = False)                                               
    return JsonResponse({"success":False},status=400)

  
def report1(request): 
    data_list4=list(Ptld.objects.values('part_no','ptc','p_desc','qty','epc','rem','drgno'))
    df=pandas.DataFrame(data_list4)
    pn=[]
    pd=[]
    qt=[]
    ep=[]
    rm=[]
    drg=[]
    dt_length=len(data_list4)    
    for i in range(len(data_list4)):
        pn.append(data_list4[i].get('part_no'))
        pd.append(data_list4[i].get('p_desc'))
        qt1=str(data_list4[i].get('qty'))
        qt.append(qt1)
        ep.append(data_list4[i].get('epc')) 
        rm.append(data_list4[i].get('rem'))
        drg.append(data_list4[i].get('drgno'))
    data=process()
    a=data['DESC']
    partno=list(a.keys())
    desc=data["DESC"].values.tolist()
    qty=data["QTY"].values.tolist()
    ptc=data["PTC"].values.tolist()
    context={
     'val1':pn,
     'val2':pd,
     'val3':qt,
     'val4':ep,
     'val5':rm,
     'val6':drg,
     'count':dt_length,
     'l1':len(pn),
     'l2':len(pd),
     'l3':len(qt),
     'l4':len(ep),
     'l6':len(rm),
     'd':partno,
     'd1':desc,
     'd2':qty,
     'd3':ptc,
     'count1':len(desc),
    }
    return render(request,'report1.html',context)


@login_required
@role_required(urlpass='/demandRegistrationview/')
def demandRegistrationview(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    if "Superuser" in rolelist:    
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'ip':get_client_ip(request),
            'subnav':subnav,
        } 
    if request.method == "POST":       
        SubmitMultipleRowData = request.POST.get('SubmitMultipleRowData')
        dataForm = request.POST.get('dataForm')
        submitvalue = request.POST.get('Edit')

        if SubmitMultipleRowData=="Submit":
            dataFormTemp  = request.POST.get('dataForm')
            context={
            'nav':nav,
            'ip':get_client_ip(request),           
            'subnav':subnav,
            'staff_no':dataFormTemp.split(',')[0],
            'name':dataFormTemp.split(',')[1],
            'dep':dataFormTemp.split(',')[2],
            'dem_RegNo' : dataFormTemp.split(',')[3],
            'sl_no' : dataFormTemp.split(',')[4],
            'part_no' : dataFormTemp.split(',')[5],
            'epc' : dataFormTemp.split(',')[6],
            'Qty' : dataFormTemp.split(',')[7],
            'wo_no' : dataFormTemp.split(',')[8],
            'wo_type' : dataFormTemp.split(',')[9],
            'l_fr' : dataFormTemp.split(',')[10],
            'l_to' : dataFormTemp.split(',')[11],
            'Seq' : dataFormTemp.split(',')[12],
            'status' : dataFormTemp.split(',')[13],
            }
            return render(request,"demandRegistration.html",context)     
        if submitvalue=='Edit':
            staff_no = request.POST.get('staff_no')
            obj=list(Proddem.objects.filter(~Q(status='L') & ~Q(status='E'),staff_no=staff_no).values('staff_no','name','dep','dem_regno','slno','part_no','epc','qty','bo_no','batch_type','l_fr','l_to','seq','status').distinct())
            context={
                'nav':nav,
                'ip':get_client_ip(request),           
                'subnav':subnav,
                'obj':obj
                }
        return render(request,'demandRegisEditInfo.html',context)
    
    return render(request,'demandRegistration.html',context) 

def DemandRegisSave(request):
    if request.method == "GET" and request.is_ajax():
            staff_no = request.GET.get('staff_no')
            name= request.GET.get('name')
            dep = request.GET.get('dep')
            dem_RegNo = request.GET.get('dem_RegNo')
            doc_type = request.GET.get('doc_type')       
            sl_no = request.GET.get('sl_no')
            part_no = request.GET.get('part_no')
            epc = request.GET.get('epc')
            wo_no = request.GET.get('wo_no')
            wo_type = request.GET.get('wo_type')
            loco_from = request.GET.get('loco_from')
            loco_to = request.GET.get('loco_to')
            Qty = request.GET.get('Qty')
            Seq = request.GET.get('Seq') 
            week_no = request.GET.get('week_no')       
            m2 = request.GET.get('m2')        
            m4 = request.GET.get('m4')          
            m5 = request.GET.get('m5')          
            m14 = request.GET.get('m14')          
            dem_others = request.GET.get('dem_others')         
            remark = request.GET.get('remark')          
            status = request.GET.get('status')           
            obj=[]
            d1=date.today()
            OBJ=Proddem.objects.create(staff_no=str(staff_no),name=str(name),dep=str(dep),dem_regno=str(dem_RegNo),dem_date=d1,ddoc_type=str(doc_type),slno=str(sl_no), part_no=str(part_no),epc=str(epc),bo_no=str(wo_no),batch_type=str(wo_type),l_fr=str(loco_from), l_to=str(loco_to),qty=Qty,seq=Seq,week_no=week_no,m2=str(m2),m4=str(m4),m5=str(m5),m14=str(m14),dem_others=str(dem_others),process_dt=d1,loading_dt=d1, print_dt=d1,issue_dt=d1,remark=str(remark),status=str(status)) 
            return JsonResponse(obj,safe = False)
    return JsonResponse({"success":False}, status=400)
def PpncDemStaffNoDetails(request):
    l=[]
    if request.method=="GET" and request.is_ajax():
        staff_no=request.GET.get('staff_no')
        obj=list(Proddem.objects.filter(staff_no=staff_no).values('name','dep').distinct().order_by('staff_no','dem_regno','slno'))
        l.append(obj)
        return JsonResponse(l,safe=False)
    return JsonResponse({"success":False}, status=400)
def PpncDemPartNoDetails(request):
    l=[]
    if request.method=="GET" and request.is_ajax():
        partno=request.GET.get('part_no')
        obj=list(Part.objects.filter(partno=partno).values('ptc','alt_link').distinct())
        l.append(obj)
        return JsonResponse(l,safe=False)
    return JsonResponse({"success":False}, status=400)
def PpncDemEPCDetails(request):
    l=[]
    if request.method=="GET" and request.is_ajax():
        epc=request.GET.get('epc')
        part_no=request.GET.get('part_no')
        obj=list(Code.objects.filter(code=epc,cd_type='11').values('num_1').distinct())
        obj1=list(Nstr.objects.filter(pp_part=part_no,epc=epc).values('pp_part').distinct())
        obj2=list(Nstr.objects.filter(cp_part=part_no,epc=epc).values('cp_part').distinct())
        l.append(obj)
        l.append(obj1)
        l.append(obj2)
        return JsonResponse(l,safe=False)
    return JsonResponse({"success":False}, status=400)
def PpncDemWODetails1(request):
    if request.method=="GET" and request.is_ajax():
        obj1=list(Dpo.objects.values('orderno'))  
        return JsonResponse(obj1,safe=False)
    return JsonResponse({"success":False}, status=400)
def PpncDemWODetails(request):
    l=[]
    if request.method=="GET" and request.is_ajax():
        wo_no=request.GET.get('wo_no')
        obj=list(Batch.objects.filter(bo_no=wo_no).values('batch_type').distinct())
        l.append(obj)
        return JsonResponse(l,safe=False)
    return JsonResponse({"success":False}, status=400)
def PpncDemshopdetails(request):
    l=[]
    if request.method=="GET" and request.is_ajax():
        tb=request.GET.get('tb')
        obj=list(Shop.objects.filter(shop=tb).values('shop').distinct())
        l.append(obj)
        return JsonResponse(l,safe=False)
    return JsonResponse({"success":False}, status=400)
def PpncDemGetNewDemno(request):
    l=[]
    d=date.today()
    if request.method=="GET" and request.is_ajax():
        obj=list(Code.objects.filter(cd_type='M2',code='DEMNO').values('num_1').distinct())
        l1=int(obj[0]['num_1'])+1
        l.append(obj)
        Code.objects.filter(cd_type='M2',code='DEMNO').update(num_1=l1,lupd_date=d)  
        return JsonResponse(l,safe=False)
    return JsonResponse({"success":False}, status=400)
def DemandRegisStatus(request):
    l=[]
    if request.method=="GET" and request.is_ajax():      
        dem_RegNo=request.GET.get('dem_RegNo')
        obj=list(Proddem.objects.filter(dem_regno=dem_RegNo).values('status','id').distinct())
        l.append(obj)
        return JsonResponse(l,safe=False)
    return JsonResponse({"success":False}, status=400)
def DemandRegisAddNewDemand(request):
    if request.method == "GET" and request.is_ajax():
            staff_no = request.GET.get('staff_no') 
            name= request.GET.get('name')         
            dep = request.GET.get('dep')           
            dem_RegNo = request.GET.get('dem_RegNo')          
            doc_type = request.GET.get('doc_type')           
            sl_no = request.GET.get('sl_no')            
            part_no = request.GET.get('part_no')           
            epc = request.GET.get('epc')           
            wo_no = request.GET.get('wo_no')           
            wo_type = request.GET.get('wo_type')           
            loco_from = request.GET.get('loco_from')          
            loco_to = request.GET.get('loco_to')          
            Qty = request.GET.get('Qty')          
            Seq = request.GET.get('Seq')           
            week_no = request.GET.get('week_no')           
            m2 = request.GET.get('m2')          
            m4 = request.GET.get('m4')          
            m5 = request.GET.get('m5')
            m14 = request.GET.get('m14')
            dem_others = request.GET.get('dem_others')
            remark = request.GET.get('remark')
            status = request.GET.get('status')
            obj1=[]
            d2=date.today()
            OBJ1=Proddem.objects.create(staff_no=str(staff_no),name=str(name),dep=str(dep),dem_regno=str(dem_RegNo),dem_date=d2,ddoc_type=str(doc_type),slno=str(sl_no), part_no=str(part_no),epc=str(epc),bo_no=str(wo_no),batch_type=str(wo_type),l_fr=str(loco_from), l_to=str(loco_to),qty=Qty,seq=Seq,week_no=week_no,m2=str(m2),m4=str(m4),m5=str(m5),m14=str(m14),dem_others=str(dem_others),process_dt=d2,loading_dt=d2, print_dt=d2,issue_dt=d2,remark=str(remark),status=str(status)) 
            return JsonResponse(obj1,safe = False)
    return JsonResponse({"success":False}, status=400)
def DemandRegisGetSINo(request):
    if request.method == "GET" and request.is_ajax():
        staff_no = request.GET.get('staff_no')
        dem_regno= request.GET.get('dem_RegNo')
        obj=list(Proddem.objects.filter(staff_no=staff_no,dem_regno=dem_regno).values('slno'))
        val=obj[len(obj)-1].get("slno")
        return JsonResponse(val,safe = False)
    return JsonResponse({"success":False}, status=400)
def DemandRegisModifyDemand(request):
    if request.method == "GET" and request.is_ajax():
            staff_no = request.GET.get('staff_no')          
            name= request.GET.get('name')          
            dep = request.GET.get('dep')          
            dem_RegNo = request.GET.get('dem_RegNo')
            doc_type = request.GET.get('doc_type')
            sl_no = request.GET.get('sl_no')
            part_no = request.GET.get('part_no')
            epc = request.GET.get('epc')
            wo_no = request.GET.get('wo_no')          
            wo_type = request.GET.get('wo_type')          
            loco_from = request.GET.get('loco_from')
            loco_to = request.GET.get('loco_to')
            Qty = request.GET.get('Qty')
            Seq = request.GET.get('Seq')         
            week_no = request.GET.get('week_no')       
            m2 = request.GET.get('m2')          
            m4 = request.GET.get('m4')       
            m5 = request.GET.get('m5')
            m14 = request.GET.get('m14')
            dem_others = request.GET.get('dem_others')      
            remark = request.GET.get('remark')        
            status = request.GET.get('status')
            obj2=[]
            d3=date.today()
            OBJ2=Proddem.objects.filter(bo_no=wo_no).update(staff_no=str(staff_no),name=str(name),dep=str(dep),dem_regno=str(dem_RegNo),dem_date=d3,ddoc_type=str(doc_type),slno=str(sl_no), part_no=str(part_no),epc=str(epc),bo_no=str(wo_no),batch_type=str(wo_type),l_fr=str(loco_from), l_to=str(loco_to),qty=Qty,seq=Seq,week_no=week_no,m2=str(m2),m4=str(m4),m5=str(m5),m14=str(m14),dem_others=str(dem_others),process_dt=d3,loading_dt=d3, print_dt=d3,issue_dt=d3,remark=str(remark),status=str(status)) 
            return JsonResponse(obj2,safe = False)
    return JsonResponse({"success":False}, status=400)
def DemandRegisDelete(request):
    obj=[]
    if request.method == "GET" and request.is_ajax():
        staff_no = request.GET.get('staff_no')
        dem_regno= request.GET.get('dem_RegNo')
        Proddem.objects.filter(staff_no=staff_no,dem_regno=dem_regno).update(del_fl='Y')
        return JsonResponse(obj,safe = False)
    return JsonResponse({"success":False}, status=400)
def PpncdemViewInfo(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    if "Superuser" in rolelist:    
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'ip':get_client_ip(request),
            'subnav':subnav,
        }  
    return render(request,'demandRegisViewInfo.html',context) 
def PpncdemEditInfo(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    if "Superuser" in rolelist:    
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'ip':get_client_ip(request),
            'subnav':subnav,
        }  
    if request.method == "POST":
        submitvalue = request.POST.get('Edit')
        if submitvalue=='Edit':
            staff_no = request.POST.get('staff_no')
            obj=list(Proddem.objects.filter(staff_no=staff_no).values('dem_regno','slno','part_no','epc','qty','bo_no','bo_type','l_fr','l_to','seq','status').distinct())
            context1={
                'obj':obj
                }
        return render(request,'demandRegisEditInfo.html',context1)    
    return render(request,'demandRegisEditInfo.html',context) 
def PpncdemBackClick(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    if "Superuser" in rolelist:    
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'ip':get_client_ip(request),
            'subnav':subnav,
        }  
    return render(request,'homeadmin.html',context)
def demandRegistrationReportview(request, *args, **kwargs):
    tmpstr=[]
    rbtnquery= request.GET.get('rbtnquery')
    staffno= request.GET.get('staffno')
    dem_reg=request.GET.get('dem_reg')
    date_from=request.GET.get('date_from')
    date_to=request.GET.get('date_to')
    demReg=request.GET.get('demReg')
    today=date.today()
    if(rbtnquery=="1"):
        tmp=list(Proddem.objects.values('dem_date','dem_regno','staff_no','name','slno','part_no','l_fr','l_to','bo_no','qty','epc','batch_type','seq','week_no','m2','m4','m5','m14','ddoc_type','dem_others').filter(dem_regno=dem_reg).distinct().order_by('dem_regno'))
        tmpstr.append(tmp)      
    if(rbtnquery=="2"):
        tmp=[]
        for i in (Proddem.objects.raw('SELECT "id","DEM_DATE", "DEM_REGNO", "STAFF_NO", "NAME", "SLNO", "PART_NO", "L_FR", "L_TO","BO_NO","QTY","EPC","BATCH_TYPE","SEQ","WEEK_NO","DDOC_TYPE","DEM_OTHERS" FROM "PRODDEM" WHERE "DEM_DATE" >=%s and "DEM_DATE" <=%s;',[date_from,date_to])):
            tmp.append({'dem_date':i.dem_date,'dem_regno':i.dem_regno,'staff_no':i.staff_no,'name':i.name,'slno':i.slno,'part_no':i.part_no,'l_fr':i.l_fr,'l_to':i.l_to,'bo_no':i.bo_no,'qty':i.qty,'epc':i.epc,'batch_type':i.batch_type,'seq':i.seq,'week_no':i.week_no,'m2':i.m2,'m4':i.m4,'m5':i.m5,'m14':i.m14,'ddoc_type':i.ddoc_type,'dem_others':i.dem_others})
        tmpstr.append(tmp)
    if(rbtnquery=="3"):
        tmp=list(Proddem.objects.values('dem_date','dem_regno','staff_no','name','slno','part_no','l_fr','l_to','bo_no','qty','epc','batch_type','seq','week_no','m2','m4','m5','m14','ddoc_type','dem_others').filter(staff_no=staffno).distinct().order_by('dem_regno'))
        tmpstr.append(tmp) 
    if(rbtnquery=="4"):
        tmp=list(Proddem.objects.values('dem_date','dem_regno','staff_no','name','slno','part_no','l_fr','l_to','bo_no','qty','epc','batch_type','seq','week_no','m2','m4','m5','m14','ddoc_type','dem_others').filter(dem_regno=demReg).distinct().order_by('dem_regno'))
        tmpstr.append(tmp)
    lst=[]
    dem=''
    k=0
    j=0
    for i in range(len(tmp)):
        if tmp[i]['dem_regno']==dem:
            tmp[i].update({'c':1})
            lst[k-1].insert(j,(tmp[i]))
            j=j+1
        else:
            j=1
            l=[]
            tmp[i].update({'c':0})
            l.append(tmp[i])
            lst.insert(k,l)
            dem=tmp[i]['dem_regno']
            k=k+1
    context={
        'tmpstr':lst,
        'today':today,
    }
    pdf = render_to_pdf('demandRegistrationReport.html',context)
    return HttpResponse(pdf, content_type='application/pdf')

def PpncdemGenerateReport(request):
    tmpstr=[]
    today=date.today()
    staffno= request.GET.get('staff_no')
    tmp=list(Proddem.objects.values('dem_date','dem_regno','staff_no','name','slno','part_no','l_fr','l_to','bo_no','qty','epc','batch_type','seq','week_no','m2','m4','m5','m14','ddoc_type','dem_others').filter(staff_no=staffno).distinct().order_by('dem_regno'))
    tmpstr.append(tmp)
    lst=[]
    dem=''
    k=0
    j=0
    for i in range(len(tmp)):
        if tmp[i]['dem_regno']==dem:
            tmp[i].update({'c':1})
            lst[k-1].insert(j,(tmp[i]))
            j=j+1
        else:
            j=1
            l=[]
            tmp[i].update({'c':0})
            l.append(tmp[i])
            lst.insert(k,l)
            dem=tmp[i]['dem_regno']
            k=k+1
    context={
        'tmpstr':lst,
        'today':today
    }
    return render(request,'demandRegistrationPrintReport.html',context)

def caldata(request):
    if request.method=="GET" and request.is_ajax():
        cy = request.GET.get('btnyear')
        myval=list(holidaylist.objects.filter(holiday_year=cy).values('holiday_year','holiday_name', 'holiday_date','holiday_type','remark').order_by('id'))
        return JsonResponse(myval, safe = False)
    return JsonResponse({"success":False}, status=400)
def email(sender_email_id,sender_email_id_password,receiver_email_id,message):
    s = smtplib.SMTP('smtp.gmail.com', 587) 
    s.ehlo()
    s.starttls()
    s.login(sender_email_id,sender_email_id_password)  
    s.sendmail(sender_email_id,receiver_email_id, message) 
    s.quit()
@login_required
@role_required(urlpass='/M20view/')
def holidaycalender(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    holiday=holidaylist.objects.all()
    if "Superuser" in rolelist:
        cyear = date.today().year
        hd1=list(holidaylist.objects.filter(holiday_year=cyear).order_by('id'))
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'holiday_list':hd1,
        }
        if request.method == "POST":
            hd=request.POST.get('h_date')
            hn=request.POST.get('h_name')
            remark=request.POST.get('remark')
            year=hd[-4:]
            ht='GH'
            holidaylist.objects.create(holiday_year=year,holiday_name=hn, holiday_date=hd, holiday_type=ht, remark=remark)
        
    return render(request, "holidaycalender.html", context)
def m20reppdf(request):
    if(request.method=="POST"):            
        shop_sec = request.POST.get('shop_sec')
        lvdate = request.POST.get('lv_date')  
        m2=list(M20new.objects.filter(shop_sec__startswith=shop_sec,lv_date=lvdate).values('shop_sec','name','ticketno','alt_date','shift').order_by('shop_sec','name'))
        data={
            'm2':m2,
            'shop_sec':shop_sec,
            'lvdate':lvdate,
        }    
        pdf = render_to_pdf('M20pdfc.html',data)
        return HttpResponse(pdf, content_type='application/pdf')
def m20getroster(request):
    if request.method == "GET" and request.is_ajax():  
        from.models import Batch      
        shop_sec = request.GET.get('shop_sec')
        ldate=request.GET.get('myd')
        ticket=request.GET.get('myt')
        w1=roster1.objects.filter(shop_sec=shop_sec,staffNo=ticket,date=ldate).values('shift')
        wono = w1[0]['shift']
        cont ={
            "wono":wono,
        }
        return JsonResponse({"cont":cont}, safe = False)
    return JsonResponse({"success":False}, status=400)
def m20getstaffno(request):
    if request.method == "GET" and request.is_ajax():  
        from.models import Batch      
        shop_sec = request.GET.get('shop_sec')
        name=request.GET.get('name')
        
        w1=M5SHEMP.objects.filter(shopsec=shop_sec,name=name).values('staff_no').distinct()
        wono = w1[0]['staff_no']
        cont ={
            "wono":wono,
        }
        return JsonResponse({"cont":cont}, safe = False)

    return JsonResponse({"success":False}, status=400)


def m20rep(request):
    if request.method=="GET" and request.is_ajax():
        shop_sec = request.GET.get('shop_sec')
        sundate = request.GET.get('sundate')
        sundate= datetime.datetime.strptime(sundate,'%d-%m-%Y').date()
        myval=list(M20new.objects.filter(shop_sec__startswith=shop_sec,lv_date=sundate).values('shop_sec','name','ticketno','alt_date','shift').order_by('shop_sec','name'))
        return JsonResponse(myval, safe = False)
    return JsonResponse({"success":False}, status=400)
@login_required
@role_required(urlpass='/M20view/')
def M20report(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    cyear = date.today().year
    if "Superuser" in rolelist:
        hd1=list(holidaylist.objects.filter(holiday_year=cyear))
        tm=shop_section.objects.all().distinct('shop_code')
        tmp=[]
        for on in tm:
            tmp.append(on.shop_code)
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles':tmp,
            'hd':hd1,
            'lvdate':"dd-mm-yyyy",          
        }    
    if request.method == "POST":
            shop_sec = request.POST.get('shop_sec')
            lvdate=request.POST.get('lv_date') 
            sh_name=shop_section.objects.filter(shop_code=shop_sec).values('section_desc')
            shop_n=shop_sec[:-2]
            shop_sec = shop_sec[-2:] 
            m2=list(M20new.objects.filter(shop_sec__startswith=shop_sec,lv_date=datetime.datetime.strptime(lvdate,"%d-%m-%Y").date()).order_by('shop_sec'))
            data={
                'm2':m2,
                'shop_sec':shop_n,
                'lvdate':lvdate,
            }
            
            pdf = render_to_pdf('M20pdfc.html',data)
            return HttpResponse(pdf, content_type='application/pdf')
    return render(request, "M20report.html", context)

@login_required
@role_required(urlpass='/sickcetificate/')
def sickcetificate(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    
    if "Superuser" in rolelist:
        emp =empmast.objects.all() 
        ob=Med1.objects.all().count()
        rno= datetime.datetime.now().strftime ("%Y%m")+"/HOD/"+ str(ob+1)
        d_id=empmast.objects.filter(~Q(desig_longdesc__startswith='CONTRACT'),dept_desc="MEDICAL",decode_paycategory='GAZ').all()
        ex=Med1.objects.all().order_by('-recordno')
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles':emp,
            'rno':rno,
            'doctor':d_id,
            'obj':ex,
            'sub':0
        }

        if request.method == "POST":
           submitvalue = request.POST.get('proceed')
           if submitvalue=='Submit':
                update = request.POST.get('update')
                recordno = request.POST.get('recordno')
                empno = request.POST.get('employeeno')
                doctorid = request.POST.get('doctorid')
                doctorname = request.POST.get('doctorname')
                doctordesignation = request.POST.get('doctordesignation')
                empname= request.POST.get('employeename')
                empdesignation = request.POST.get('empdesignation')
                empdepartment = request.POST.get('empdepartment')
                stationempno = request.POST.get('stationempno')
                suffingfrom = request.POST.get('suffingfrom')
                dutyfordays = request.POST.get('dutyfordays')
                effectdate = request.POST.get('effectdate')
                
                
                newdoc= Med1(
                    update=str(update),
                    recordno=str(recordno),
                    empno = str(empno),
                    doctorname =str(doctorname),
                    doctorid=str(doctorid),
                    doctordesignation =str(doctordesignation),
                    empname=str(empname),
                    empdesignation=str(empdesignation),
                    empdepartment = str(empdepartment),
                    stationempno=str(stationempno), 
                    suffingfrom=str(suffingfrom),
                    dutyfordays=str(dutyfordays),                 
                    effectdate= str(effectdate),                    
                     )

                newdoc.save()
                ob=Med1.objects.all().count()
                rno= datetime.datetime.now().strftime ("%Y%m")+"/HOD/"+ str(ob+1)  
                ex=Med1.objects.all().order_by('-recordno')    
                context={
                    'sub':0,
                    'lenm' :2,
                    'nav':nav,
                    'subnav':subnav,
                    'ip':get_client_ip(request),
                    'roles':emp,
                    'rno':rno,
                    'doctor':d_id,
                    'obj':ex,
                    'sub':1
                }
                messages.success(request, 'Successfully Done!, Select new values to proceed')   
       
    return render(request,'sickcetificate.html',context)

def sickcetificate_edit(request):
    if request.method == "GET" and request.is_ajax():
        recno = request.GET.get('recno')
        obj = Med1.objects.filter(recordno=recno).all()        

        context={            
            'update':obj[0].update,
            'recordno':obj[0].recordno,
            'empno' :obj[0].empno,
            'doctorid':obj[0].doctorid,
            'doctorname':obj[0].doctorname,
            'doctordesignation':obj[0].doctordesignation,
            'empname':obj[0].empname,
            'empdesignation':obj[0].empdesignation,
            'empdepartment' :obj[0].empdepartment,
            'stationempno':obj[0].stationempno, 
            'suffingfrom':obj[0].suffingfrom,
            'dutyfordays':obj[0].dutyfordays,                 
            'effectdate':obj[0].effectdate,
                       
        }         
        return JsonResponse({'data':context}, safe = False)
    return JsonResponse({"success":False}, status=400)

@login_required
@role_required(urlpass='/workdemandbyshop/')
def workdemandbyshop(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    desg=empmast.objects.filter(empno=cuser).values('desig_longdesc')[0]
    ch='ne'
    match = re.search(r'SENIOR SECTION ENGINEER', desg['desig_longdesc'])
    if match:
         ch='sse'
    match = re.search(r'WORKSHOP  MANAGER', desg['desig_longdesc'])
    if match:
         ch='wmm'
    match = re.search(r'PROGRESS MAN', desg['desig_longdesc'])
    if match:
         ch='prm'
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    lst=''
    if ch=='sse':
        lst=list(workdemandbyshopmain.objects.filter(Q(flag=0)).all().order_by('flag','recordno'))
    if ch=='wmm':
        lst=list(workdemandbyshopmain.objects.filter(flag=1).all().order_by('flag','recordno'))
    if ch=='prm':
        lst=list(workdemandbyshopmain.objects.filter(flag=3).all().order_by('flag','recordno'))
    context = {
        'main':'s',
        'ip':get_client_ip(request),
        'nav':nav,
        'subnav':subnav,
        'desg':ch,
        'lst':lst,
    }
    if request.method == "POST":
           submitvalue = request.POST.get('Add Demand')
           submitvalue1 = request.POST.get('Search2')
           submitvalue2 = request.POST.get('Details')
           submitvalue3 = request.POST.get('View')
           locono=request.POST.get('locono')
           workorder=request.POST.get('workorder')
           date=request.POST.get('date')
           detailsdocno=request.POST.get('detailsdocno')
           code=request.POST.get('code')
           if(code=='m4' or code=='M4'):
               code=88
           else:
               code=89
           if submitvalue=='Add Demand':
               cdate=str(datetime.datetime.now().strftime ("%d-%m-%Y"))
               date=str(date)
               docno=workdemandbyshopmain.objects.values('recordno').order_by('-recordno')
               if docno.count()>0:
                    docno=str(int(docno[0]['recordno'])+1)
                    
               else:
                   docno= '100001'
               workdemandbyshopmain.objects.create(recordno=docno,workorder =workorder,locono=locono,flag='0',status='Inbox',remarks='Not Yet Forwarded',sseid=str(cuser),dreleasedate=date,date=cdate,doccode=code) 
               context = {
                        'ip':get_client_ip(request),
                        'nav':nav,
                        'subnav':subnav,
                        'desg':ch,
                        'demandno':docno,
                        'locono':locono,
                        'workorder':workorder,
                        'date':date,
                        'code':code,
                        'flag':'0',
                        'd':'A',
                        
                }
               return render(request,'workdemandbyshopadd.html',context)
           if submitvalue3=='View':
                lst=list(workdemandbyshopmain.objects.filter(~Q(flag=4)).all().order_by('flag','recordno'))
                context = {
                    'main':'n',
                    'ip':get_client_ip(request),
                    'nav':nav,
                    'subnav':subnav,
                    'desg':ch,
                    'lst':lst,
                }
                return render(request,'workdemandbyshop.html',context)

           if submitvalue1=='Search2':
                detailsdocno=request.POST.get('searchdoc')
                doc=list(workdemandbyshopmain.objects.filter(recordno=detailsdocno).values('recordno','workorder','locono','dreleasedate','status','doccode','flag'))
                lst=list(workdemandbyshopsecondary.objects.filter(recordno=detailsdocno).values('id','partno','desc','unit','quantity','locofrom','locoto','shopno').order_by('id'))
                j=1
                for i in range(len(lst)):
                    lst[i].update({'sl':j})
                    j+=1
                context = {
                        'ip':get_client_ip(request),
                        'nav':nav,
                        'subnav':subnav,
                        'desg':ch,
                        'demandno':doc[0]['recordno'],
                        'locono':doc[0]['locono'],
                        'workorder':doc[0]['workorder'],
                        'date':doc[0]['dreleasedate'],
                        'status':doc[0]['status'],
                        'code':doc[0]['doccode'],
                        'lst':lst,
                        'flag':doc[0]['flag'],
                        'd':'B',
                }
                return render(request,'workdemandbyshopadd.html',context)
           if submitvalue2=='Details':
                doc=list(workdemandbyshopmain.objects.filter(recordno=detailsdocno).values('recordno','workorder','locono','dreleasedate','status','doccode','flag'))
                lst=list(workdemandbyshopsecondary.objects.filter(recordno=detailsdocno).values('id','partno','desc','unit','quantity','locofrom','locoto','shopno').order_by('id'))
                j=1
                for i in range(len(lst)):
                    lst[i].update({'sl':j})
                    j+=1
                context = {
                        'ip':get_client_ip(request),
                        'nav':nav,
                        'subnav':subnav,
                        'desg':ch,
                        'demandno':doc[0]['recordno'],
                        'locono':doc[0]['locono'],
                        'workorder':doc[0]['workorder'],
                        'date':doc[0]['dreleasedate'],
                        'status':doc[0]['status'],
                        'code':doc[0]['doccode'],
                        'flag':doc[0]['flag'],
                        'lst':lst,
                        'd':'B',
                }
                return render(request,'workdemandbyshopadd.html',context)
    return render(request,'workdemandbyshop.html',context)
def workdemandbyshoppdf(request, *args, **kwargs):
    docno = request.GET.get('docno')
    main=list(workdemandbyshopmain.objects.filter(recordno=docno).values('recordno','workorder','locono','dreleasedate','doccode','sseid','wmmid','pmid','date','wmmdate','prmdate'))
    sec=list(workdemandbyshopsecondary.objects.filter(recordno=docno).values('id','partno','desc','unit','quantity','locofrom','locoto','shopno').order_by('id'))
    for i in range(len(sec)):
        sec[i].update({'sl':i+1})
    data={
        'main':main,
        'sec':sec,
    }
    pdf = render_to_pdf('workdemandbyshoppdf.html', data)
    return HttpResponse(pdf, content_type='application/pdf')


def getcode(request):
    if request.method == "GET" and request.is_ajax():
        unit=list(Code.objects.filter(cd_type='51').values('alpha_1').distinct())       
        return JsonResponse(unit, safe = False)
    return JsonResponse({"success":False}, status=400)

def getworkorderno(request):
    if request.method == "GET" and request.is_ajax():
        bono=list(Batch.objects.values('bo_no').distinct())       
        return JsonResponse(bono, safe = False)
    return JsonResponse({"success":False}, status=400)

def addworkorderdetails(request):
    if request.method=="GET" and request.is_ajax():
        partno=request.GET.get('partno')
        desc=request.GET.get('desc')
        quantity=request.GET.get('quantity')
        unit=request.GET.get('unit')
        locofrom=request.GET.get('locofrom')
        locoto=request.GET.get('locoto')
        docno=request.GET.get('docno')
        shopsec=request.GET.get('shopsec')
        a=request.GET.get('a')
        if a=='0':
            workdemandbyshopsecondary.objects.create(recordno=docno,partno=partno,quantity=quantity,desc=desc,unit=unit,locofrom=locofrom,locoto=locoto,shopno=shopsec)
        else:
            workdemandbyshopsecondary.objects.filter(id=a).update(recordno=docno,partno=partno,quantity=quantity,desc=desc,unit=unit,locofrom=locofrom,locoto=locoto,shopno=shopsec)
        return JsonResponse(partno, safe = False)
    return JsonResponse({"success":False}, status=400)

def getworkdemandpart(request):
    if request.method=='GET' and request.is_ajax():
        docno=request.GET.get('docno')
        lst=list(workdemandbyshopsecondary.objects.filter(recordno=docno).values('id','partno','desc','unit','quantity','locofrom','locoto','shopno').order_by('id'))
        j=1
        for i in range(len(lst)):
            lst[i].update({'sl':j})
            j+=1
        return JsonResponse(lst,safe=False)
    return JsonResponse({"success":False},status=400)
def getpartno(request):
    if request.method=='GET' and request.is_ajax():
        lst=[]
        part=list(Part.objects.filter(partno__isnull=False).values('partno').distinct())
        shop=list(Shop.objects.filter(shop__isnull=False).values('shop').distinct())
        lst.append(list(part))
        lst.append(list(shop))
        return JsonResponse(lst,safe=False)
    return JsonResponse({"success":False},status=400)

def changestatus(request):
    cuser=request.user
    if request.method=='GET' and request.is_ajax():
        docno=request.GET.get('docno')
        status=request.GET.get('flag')
        cdate=str(datetime.datetime.now().strftime ("%d-%m-%Y"))

        if status == '0':
            workdemandbyshopmain.objects.filter(recordno=docno).update(flag='1',status='Progress',remarks='Forwarded To WMM')
        if status == '1':
            workdemandbyshopmain.objects.filter(recordno=docno).update(flag='3',status='Progress',remarks='Forwarded To PRM',wmmid=str(cuser),wmmdate=cdate)
        
        if status == '2':
            workdemandbyshopmain.objects.filter(recordno=docno).update(flag='0',status='Progress',remarks='Returned By Wmm',wmmid=str(cuser))
        
        if status == '3':
            workdemandbyshopmain.objects.filter(recordno=docno).update(flag='4',status='Completed',remarks='Work Order Generated',pmid=str(cuser),prmdate=cdate)
        a=[]
        return JsonResponse(a,safe=False)
    return JsonResponse({"success":False},status=400)



@login_required
@role_required(urlpass='/mnp_entr/')
def mnp_entr(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()
    if "Superuser" in rolelist:
        tm=shop_section.objects.all()
        tmp=[]
        for on in tm:
            tmp.append(on.section_code)
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'subnav':subnav,
            'ip':get_client_ip(request),
            'roles':tmp
        }
    elif(len(rolelist)==1):
        for i in range(0,len(rolelist)):
            req = M13.objects.all().filter(shop=rolelist[i]).values('wo').distinct()
            wo_nop =wo_nop | req
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'wo_nop':wo_nop,
            'nav':nav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist,
            'subnav':subnav,
        }
        
    elif(len(rolelist)>1):
        context = {
            'sub':0,
            'lenm' :len(rolelist),
            'nav':nav,
            'ip':get_client_ip(request),
            'usermaster':usermaster,
            'roles' :rolelist,
            'subnav':subnav,
        }
    return render(request,'mnp_entr.html',context)

def mwnochanged(request):
    if request.method == 'GET' and request.is_ajax():
        txtmwno = request.GET.get('Txt_mw')    
        if not txtmwno == "":
            data_list=list(Mnp.objects.filter(mwno=txtmwno).values('mwno','descr','maint_area','location','bay','mw_cat','shopsec','sh_name','lc_no','no_shift','category','dt_of_comm','make','eqp_type','mc_type_gr','used_for','unit','cost','available','condition','replace_by','date_tr_c','capacity','required','yr_scrap','load_cente','status','cat_code','updt_dt'))
            if(len(data_list)>0):
                return JsonResponse(data_list,safe = False)
        
    return JsonResponse({"success":False}, status = 400)

def mwsave(request):
    if request.method == 'GET' and request.is_ajax():
         txtMwNo=request.GET.get('txtMwNo')
         txtDescr=request.GET.get('txtDescr')
         txtShopSec=request.GET.get('txtShopSec')
         txtSh_name=request.GET.get('txtSh_name')
         txtLc_no=request.GET.get('txtLc_no')
         txtBay=request.GET.get('txtBay')
         ddMaintArea=request.GET.get('ddMaintArea')
         txtNo_shift=request.GET.get('txtNo_shift')
         if(txtNo_shift==""):
             txtNo_shift=None
         ddCategory=request.GET.get('ddCategory')
         txtDt_of_comm=request.GET.get('txtDt_of_comm')
         if txtDt_of_comm != "":
            ts=txtDt_of_comm.split('-')
            txtDt_of_comm=ts[2]+"-"+ts[1]+"-"+ts[0]
         txtLocation=request.GET.get('txtLocation')
         txtEqp_type=request.GET.get('txtEqp_type')
         txtMC_Type_GR=request.GET.get('txtMC_Type_GR')
         txtCost=request.GET.get('txtCost')
         if(txtCost==""):
             txtCost=None
         txtUnit=request.GET.get('txtUnit')
         txtAvailable=request.GET.get('txtAvailable')
         txtReplace_by=request.GET.get('txtReplace_by')
         if(txtReplace_by==""):
             txtReplace_by=None
         txtDate_TR_C=request.GET.get('txtDate_TR_C')
         if txtDate_TR_C != "":
             ps=txtDate_TR_C.split('-')
             txtDate_TR_C=ps[2]+"-"+ps[1]+"-"+ps[0]
         txtCapacity=request.GET.get('txtCapacity')
         txtReq=request.GET.get('txtReq')
         txtYR_Scrap=request.GET.get('txtYR_Scrap')
         if txtYR_Scrap != "":
             ls=txtYR_Scrap.split('-')
             txtYR_Scrap=ls[2]+"-"+ls[1]+"-"+ls[0]
         txtCondition=request.GET.get('txtCondition')
         txtMake=request.GET.get('txtMake')
         txtUsed_for=request.GET.get('txtUsed_for')
         data_list1=list(Mnp.objects.filter(mwno=txtMwNo).values('mwno','descr','maint_area','location','bay','mw_cat','shopsec','sh_name','lc_no','no_shift','category','dt_of_comm','make','eqp_type','mc_type_gr','used_for','unit','cost','available','condition','replace_by','date_tr_c','capacity','required','yr_scrap','load_cente','status','cat_code','updt_dt'))
         dt=datetime.date.today()
         if len(data_list1) == 0  :
            
            if txtDescr == "" :
                
                return JsonResponse({"success":False}, status = 400)  
            if txtLocation == "" :
                
                return JsonResponse({"success":False}, status = 400)
            if ddCategory == "" :
                
                return JsonResponse({"success":False}, status = 400)
            if ddMaintArea == "":
                
                return JsonResponse({"success":False}, status = 400)
             
            if txtDt_of_comm =="" and txtDate_TR_C == "" and txtYR_Scrap == "":
                
                Mnp.objects.create(mwno=str(txtMwNo),descr=str(txtDescr),location=str(txtLocation),category=str(ddCategory),
                maint_area=str(ddMaintArea),bay=str(txtBay),shopsec=str(txtShopSec),sh_name=str(txtSh_name),lc_no=str(txtLc_no),
                no_shift=txtNo_shift,eqp_type=str(txtEqp_type),mc_type_gr=str(txtMC_Type_GR),cost=txtCost,unit=str(txtUnit),
                available=str(txtAvailable),replace_by=txtReplace_by,capacity=str(txtCapacity),required=str(txtReq),
                condition=str(txtCondition),make=str(txtMake),used_for=str(txtUsed_for),updt_dt=dt)
            elif txtDt_of_comm =="" and txtDate_TR_C != "" and txtYR_Scrap != "":
                
                Mnp.objects.create(mwno=str(txtMwNo),descr=str(txtDescr),location=str(txtLocation),category=str(ddCategory),
                maint_area=str(ddMaintArea),bay=str(txtBay),shopsec=str(txtShopSec),sh_name=str(txtSh_name),lc_no=str(txtLc_no),
                no_shift=txtNo_shift,eqp_type=str(txtEqp_type),date_tr_c=txtDate_TR_C,yr_scrap=txtYR_Scrap,
                mc_type_gr=str(txtMC_Type_GR),cost=txtCost,unit=str(txtUnit),available=str(txtAvailable),replace_by=txtReplace_by,
                capacity=str(txtCapacity),required=str(txtReq),condition=str(txtCondition),make=str(txtMake),used_for=str(txtUsed_for),updt_dt=dt)
            elif txtDate_TR_C == "" and txtDt_of_comm !="" and txtYR_Scrap != "":
                
                Mnp.objects.create(mwno=str(txtMwNo),descr=str(txtDescr),location=str(txtLocation),category=str(ddCategory),
                maint_area=str(ddMaintArea),bay=str(txtBay),shopsec=str(txtShopSec),sh_name=str(txtSh_name),lc_no=str(txtLc_no),
                no_shift=txtNo_shift,eqp_type=str(txtEqp_type),dt_of_comm=txtDt_of_comm,yr_scrap=txtYR_Scrap,
                mc_type_gr=str(txtMC_Type_GR),cost=txtCost,unit=str(txtUnit),available=str(txtAvailable),replace_by=txtReplace_by,
                capacity=str(txtCapacity),required=str(txtReq),condition=str(txtCondition),make=str(txtMake),used_for=str(txtUsed_for),updt_dt=dt)
            elif txtYR_Scrap == "" and txtDt_of_comm !="" and txtDate_TR_C != "":
                
                Mnp.objects.create(mwno=str(txtMwNo),descr=str(txtDescr),location=str(txtLocation),category=str(ddCategory),
                maint_area=str(ddMaintArea),bay=str(txtBay),shopsec=str(txtShopSec),sh_name=str(txtSh_name),lc_no=str(txtLc_no),
                no_shift=txtNo_shift,eqp_type=str(txtEqp_type),dt_of_comm=txtDt_of_comm,date_tr_c=txtDate_TR_C,
                mc_type_gr=str(txtMC_Type_GR),cost=txtCost,unit=str(txtUnit),available=str(txtAvailable),replace_by=txtReplace_by,
                capacity=str(txtCapacity),required=str(txtReq),condition=str(txtCondition),make=str(txtMake),used_for=str(txtUsed_for),updt_dt=dt)
            elif txtDt_of_comm =="" and txtDate_TR_C == "" and txtYR_Scrap != "":
                
                Mnp.objects.create(mwno=str(txtMwNo),descr=str(txtDescr),location=str(txtLocation),category=str(ddCategory),
                maint_area=str(ddMaintArea),bay=str(txtBay),shopsec=str(txtShopSec),sh_name=str(txtSh_name),lc_no=str(txtLc_no),
                no_shift=txtNo_shift,eqp_type=str(txtEqp_type),yr_scrap=txtYR_Scrap,
                mc_type_gr=str(txtMC_Type_GR),cost=txtCost,unit=str(txtUnit),available=str(txtAvailable),replace_by=txtReplace_by,
                capacity=str(txtCapacity),required=str(txtReq),condition=str(txtCondition),make=str(txtMake),used_for=str(txtUsed_for),updt_dt=dt)
            
            elif txtDt_of_comm =="" and txtDate_TR_C != "" and txtYR_Scrap == "":
                
                Mnp.objects.create(mwno=str(txtMwNo),descr=str(txtDescr),location=str(txtLocation),category=str(ddCategory),
                maint_area=str(ddMaintArea),bay=str(txtBay),shopsec=str(txtShopSec),sh_name=str(txtSh_name),lc_no=str(txtLc_no),
                no_shift=txtNo_shift,eqp_type=str(txtEqp_type),date_tr_c=txtDate_TR_C,
                mc_type_gr=str(txtMC_Type_GR),cost=txtCost,unit=str(txtUnit),available=str(txtAvailable),replace_by=txtReplace_by,
                capacity=str(txtCapacity),required=str(txtReq),condition=str(txtCondition),make=str(txtMake),used_for=str(txtUsed_for),updt_dt=dt)
             
            elif txtDt_of_comm !="" and txtDate_TR_C == "" and txtYR_Scrap == "":
                
                Mnp.objects.create(mwno=str(txtMwNo),descr=str(txtDescr),location=str(txtLocation),category=str(ddCategory),
                maint_area=str(ddMaintArea),bay=str(txtBay),shopsec=str(txtShopSec),sh_name=str(txtSh_name),lc_no=str(txtLc_no),
                no_shift=txtNo_shift,eqp_type=str(txtEqp_type),dt_of_comm=txtDt_of_comm,
                mc_type_gr=str(txtMC_Type_GR),cost=txtCost,unit=str(txtUnit),available=str(txtAvailable),replace_by=txtReplace_by,
                capacity=str(txtCapacity),required=str(txtReq),condition=str(txtCondition),make=str(txtMake),used_for=str(txtUsed_for),updt_dt=dt)
            
            else:
                
                Mnp.objects.create(mwno=str(txtMwNo),descr=str(txtDescr),location=str(txtLocation),category=str(ddCategory),
                maint_area=str(ddMaintArea),bay=str(txtBay),shopsec=str(txtShopSec),sh_name=str(txtSh_name),lc_no=str(txtLc_no),
                no_shift=txtNo_shift,eqp_type=str(txtEqp_type),dt_of_comm=txtDt_of_comm,date_tr_c=txtDate_TR_C,yr_scrap=txtYR_Scrap,
                mc_type_gr=str(txtMC_Type_GR),cost=txtCost,unit=str(txtUnit),available=str(txtAvailable),replace_by=txtReplace_by,
                capacity=str(txtCapacity),required=str(txtReq),condition=str(txtCondition),make=str(txtMake),used_for=str(txtUsed_for),updt_dt=dt)
            
            
            obj=[]
            return JsonResponse(obj,safe = False)
         else:
            
            Mnp.objects.filter(mwno=txtMwNo).update(descr=str(txtDescr),location=str(txtLocation),category=str(ddCategory),
                maint_area=str(ddMaintArea),bay=str(txtBay),shopsec=str(txtShopSec),sh_name=str(txtSh_name),lc_no=str(txtLc_no),
                no_shift=txtNo_shift,eqp_type=str(txtEqp_type),dt_of_comm=txtDt_of_comm,date_tr_c=txtDate_TR_C,yr_scrap=txtYR_Scrap,
                mc_type_gr=str(txtMC_Type_GR),cost=txtCost,unit=str(txtUnit),available=str(txtAvailable),replace_by=txtReplace_by,
                capacity=str(txtCapacity),required=str(txtReq),condition=str(txtCondition),make=str(txtMake),used_for=str(txtUsed_for),
                load_cente=str(txtLc_no),updt_dt=dt)
            
            obj=[]
            return JsonResponse(obj,safe = False)
    return JsonResponse({"success":False}, status = 400)

def getdocumentno(request):
    if request.method=='GET' and request.is_ajax():
        lst=list(workdemandbyshopmain.objects.values('recordno'))
        return JsonResponse(lst,safe=False)
    return JsonResponse({"success":False},status=400)

@login_required
@role_required(urlpass='/empregist/')
def empregist(request):
    cuser=request.user
    usermaster=empmast.objects.filter(empno=cuser).first()
    rolelist=usermaster.role.split(", ")
    nav=dynamicnavbar(request,rolelist)
    menulist=set()
    for ob in nav:
        menulist.add(ob.navitem)
    menulist=list(menulist)
    subnav=subnavbar.objects.filter(parentmenu__in=menulist)
    wo_nop = empmast.objects.none()  
    shop=shop_section.objects.all()  
    empdes= empmast.objects.all().distinct('desig_longdesc')
    empdep= empmast.objects.all().distinct('dept_desc')
    empst= empmast.objects.all().distinct('emp_status')

    if "Superuser" in rolelist:      
        context={
            'sub':0,
            'lenm' :2,
            'nav':nav,
            'ip':get_client_ip(request),
            'shop':shop,
            'empdes':empdes,
            'empdep':empdep,
            'empst':empst,
            'subnav':subnav,
        }
    if request.method=="POST":
        Submit=request.POST.get('Submit')
        empno=request.POST.get('empno')
        empname=request.POST.get('empname')
        birthdate=request.POST.get('dobdate')
        dateapp=request.POST.get('dateapp')
        sex=request.POST.get('empsex')
        marital_status=request.POST.get('empmarital')            
        email=request.POST.get('empemail')            
        contactno=request.POST.get('empphone')
        shopno=request.POST.get('shop_sec')  
        sub_shop_sec=request.POST.get('sub_shop_sec')
        emp_inctype=request.POST.get('emptype') 
        empdesignation=request.POST.get('empdesignation') 
        emptdepartment=request.POST.get('emptdepartment') 
        empstatus=request.POST.get('empstatus') 
        office_orderno=request.POST.get('officeor') 
        if Submit=='Submit':     
           
            empmast.objects.create(empno=empno, empname=empname, birthdate=birthdate,appointmentdate=dateapp,sex=sex,marital_status=marital_status,email=email,contactno=contactno,parentshop=shopno,shopno=sub_shop_sec,emp_inctype=emp_inctype,desig_longdesc=empdesignation,emp_status=empstatus,dept_desc=emptdepartment,office_orderno=office_orderno)
            messages.success(request,'Record has successful inserted !')
        else:
            empmast.objects.filter(empno=empno).update(emp_status=empstatus,email=email,contactno=contactno,emp_inctype=emp_inctype)
            messages.error(request,'Record has successful updated ')

         
    return render(request, 'empRegistration.html',context)

def  get_emp_det(request):
    if request.method == "GET" and request.is_ajax():
        empno = request.GET.get('empno')

        obj = empmast.objects.filter(empno=empno).all() 
        rno=len(obj)
        if rno==0:            
           context={            
            'rno':rno ,
           }  
        else:          
           context={  
            'rno':rno ,          
            'empno':obj[0].empno,
            'empname':obj[0].empname,
            'birthdate':obj[0].birthdate,
            'dateapp':obj[0].appointmentdate,
            'office_or':obj[0].office_orderno,
            'sex':obj[0].sex,
            'emp_inctype':obj[0].emp_inctype,
            'marital_status':obj[0].marital_status,
            'email':obj[0].email,
            'contactno':obj[0].contactno,
            'shopno':obj[0].shopno,
            'parentshop':obj[0].parentshop,
            'desig':obj[0].desig_longdesc,
            'status':obj[0].emp_status,
            'dept':obj[0].dept_desc,
                    
           }  
       
       
        return JsonResponse(context, safe = False)
    return JsonResponse({"success":False}, status=400)

